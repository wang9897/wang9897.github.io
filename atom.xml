<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wang9897</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-30T08:06:25.007Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wang9897</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>补图(bzoj1098)</title>
    <link href="http://yoursite.com/2019/06/30/%E8%A1%A5%E5%9B%BE-bzoj1098/"/>
    <id>http://yoursite.com/2019/06/30/补图-bzoj1098/</id>
    <published>2019-06-30T07:51:52.000Z</published>
    <updated>2019-06-30T08:06:25.007Z</updated>
    
    <content type="html"><![CDATA[<p>题解:</p><p>在原图中相连的两个点在补图中必然不相连  在补图中相连的点在原图中必然不会相连 所以我们考虑对于每个点做BFS 去查询其补图中联通块的大小 具体来说就是对于每个点去扩展其原图中没有连边的点并且这个点也没有被选入到补图   那么这个点与当前这个点必然在一个联通块里面 然后就能维护出补图联通块的个数以及每个联通块的大小 考虑用链表优化过程</p><p>(大概就是这个思路..我只是上来存个补图的板子)</p><p>复杂度 $O(n+m)$</p><p>代码实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NM=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[NM&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> t,pre,last;</span><br><span class="line">&#125;node;</span><br><span class="line">node d[MAXN];</span><br><span class="line"><span class="keyword">bool</span> tag[MAXN],flag[MAXN];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;que;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> x=que.front();que.pop();</span><br><span class="line">link(x)tag[j-&gt;t]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=d[<span class="number">0</span>].last;k!=<span class="number">-1</span>;k=d[k].last)&#123;</span><br><span class="line">    <span class="keyword">int</span> y=k;</span><br><span class="line">    <span class="keyword">if</span>(!tag[y]&amp;&amp;!flag[y])&#123;</span><br><span class="line">que.push(y);num++;flag[y]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> pre=d[y].pre;</span><br><span class="line"><span class="keyword">int</span> last=d[y].last;</span><br><span class="line">d[pre].last=last;</span><br><span class="line"><span class="keyword">if</span>(last!=<span class="number">-1</span>)d[last].pre=pre;</span><br><span class="line">d[y].last=d[y].pre=<span class="number">-1</span>;k=pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">link(x)tag[j-&gt;t]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    d[<span class="number">0</span>].pre=<span class="number">-1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">d[i].t=i;</span><br><span class="line">d[i].pre=i<span class="number">-1</span>;</span><br><span class="line">d[i<span class="number">-1</span>].last=i;</span><br><span class="line">    &#125;</span><br><span class="line">    d[n].last=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">x=read();y=read();</span><br><span class="line">add(x,y);add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i])<span class="keyword">continue</span>;</span><br><span class="line">num=<span class="number">1</span>;que.push(i);flag[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> pre=d[i].pre;</span><br><span class="line"><span class="keyword">int</span> last=d[i].last;</span><br><span class="line">d[pre].last=last;</span><br><span class="line"><span class="keyword">if</span>(last!=<span class="number">-1</span>)d[last].pre=pre;</span><br><span class="line">d[i].last=d[i].pre=<span class="number">-1</span>;</span><br><span class="line">bfs();</span><br><span class="line">ans.pb(num);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ans.begin(),ans.end());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ans.size();i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题解:&lt;/p&gt;
&lt;p&gt;在原图中相连的两个点在补图中必然不相连  在补图中相连的点在原图中必然不会相连 所以我们考虑对于每个点做BFS 去查询其补图中联通块的大小 具体来说就是对于每个点去扩展其原图中没有连边的点并且这个点也没有被选入到补图   那么这个点与当前这个点必然在一
      
    
    </summary>
    
      <category term="图论" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="补图" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/%E8%A1%A5%E5%9B%BE/"/>
    
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="bfs" scheme="http://yoursite.com/tags/bfs/"/>
    
  </entry>
  
  <entry>
    <title>P4770(SAM+主席树+倍增)</title>
    <link href="http://yoursite.com/2019/05/16/P4770-SAM-%E4%B8%BB%E5%B8%AD%E6%A0%91-%E5%80%8D%E5%A2%9E/"/>
    <id>http://yoursite.com/2019/05/16/P4770-SAM-主席树-倍增/</id>
    <published>2019-05-16T11:56:18.000Z</published>
    <updated>2019-05-16T12:22:19.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意:"></a>题意:</h2><p>给定一个母串,$q$次查询每个串的本质不同子串在原串对应的$[l,r]$子串中不出现的个数</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h2><p>感觉非常坑人的是</p><p>并没有从题目中看出 需要满足查询串的本质不同的情况</p><p>那么对于不用考虑查询串的本质不同的话 那么就直接 对于每个询问串在原串的sam上跑一遍 通过倍增统计答案即可</p><p>现在需要求本质不同的情况  那么我们考虑 预处理以每个节点为结尾的前缀 最短需要多长是满足题意</p><p>然后对于查询串建sam 然后综合预处理 对于每个节点统计答案</p><p>复杂度 $O(T*20log(n))$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[MAXN],fa[MAXN],ch[MAXN][<span class="number">26</span>],n;</span><br><span class="line"><span class="keyword">char</span> str[MAXN];</span><br><span class="line"><span class="keyword">int</span> Rt[MAXN],f[MAXN][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">int</span> rt,cnt,cur,num;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">npde</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,sum;</span><br><span class="line">&#125;node;</span><br><span class="line">node d[MAXN*<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x)x=++num;</span><br><span class="line">    d[x].sum++;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(t&lt;=mid)update(d[x].l,l,mid,t);</span><br><span class="line">    <span class="keyword">else</span> update(d[x].r,mid+<span class="number">1</span>,r,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!y)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(!x)&#123;x=y;<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> t=++num;d[t]=d[x];d[t].sum+=d[y].sum;x=t;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    merge(d[x].l,d[y].l,l,mid);</span><br><span class="line">    merge(d[x].r,d[y].r,mid+<span class="number">1</span>,r);</span><br><span class="line">    d[x].sum=d[d[x].l].sum+d[d[x].r].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">built</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> last=cur;cur=++cnt;dis[cur]=dis[last]+<span class="number">1</span>;<span class="keyword">int</span> p=last;</span><br><span class="line">    update(Rt[cur],<span class="number">1</span>,n,dis[cur]);</span><br><span class="line">    <span class="keyword">for</span>(;p&amp;&amp;!ch[p][x];p=fa[p])ch[p][x]=cur;</span><br><span class="line">    <span class="keyword">if</span>(!p)fa[cur]=rt;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q=ch[p][x];</span><br><span class="line">    <span class="keyword">if</span>(dis[q]==dis[p]+<span class="number">1</span>)fa[cur]=q;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nt=++cnt;dis[nt]=dis[p]+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(ch[nt],ch[q],<span class="keyword">sizeof</span>(ch[q]));</span><br><span class="line">        fa[nt]=fa[q];fa[q]=fa[cur]=nt;</span><br><span class="line">        <span class="keyword">for</span>(;ch[p][x]==q;p=fa[p])ch[p][x]=nt;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    inc(i,<span class="number">1</span>,<span class="number">20</span>)f[x][i]=f[f[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    link(x)&#123;</span><br><span class="line">dfs(j-&gt;t);</span><br><span class="line">merge(Rt[x],Rt[j-&gt;t],<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans1;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">querty</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;</span><br><span class="line">ans1+=d[x].sum;<span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)querty(d[x].l,l,mid,ql,qr);</span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid)querty(d[x].r,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> L,R;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ans1=<span class="number">0</span>;querty(Rt[x],<span class="number">1</span>,n,L+y<span class="number">-1</span>,R);</span><br><span class="line">    <span class="keyword">if</span>(ans1&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"><span class="keyword">int</span> Sum[MAXN];</span><br><span class="line"><span class="keyword">int</span> dis1[MAXN],fa1[MAXN],ch1[MAXN][<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> rt1,cnt1,cur1,maxx[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">built1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> last=cur1;cur1=++cnt1;dis1[cur1]=dis1[last]+<span class="number">1</span>;<span class="keyword">int</span> p=last;</span><br><span class="line">    maxx[cur1]=dis1[cur1];</span><br><span class="line">    <span class="keyword">for</span>(;p&amp;&amp;!ch1[p][x];p=fa1[p])ch1[p][x]=cur1;</span><br><span class="line">    <span class="keyword">if</span>(!p)fa1[cur1]=rt1;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> q=ch1[p][x];</span><br><span class="line"><span class="keyword">if</span>(dis1[q]==dis1[p]+<span class="number">1</span>)fa1[cur1]=q;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nt=++cnt1;dis1[nt]=dis1[p]+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(ch1[nt],ch1[q],<span class="keyword">sizeof</span>(ch1[q]));</span><br><span class="line">    fa1[nt]=fa1[q];fa1[q]=fa1[cur1]=nt;</span><br><span class="line">    <span class="keyword">for</span>(;ch1[p][x]==q;p=fa1[p])ch1[p][x]=nt;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[MAXN];</span><br><span class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line">_dfs(vec[x][i]);</span><br><span class="line">maxx[x]=maxx[vec[x][i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str+<span class="number">1</span>);<span class="keyword">int</span> len=<span class="built_in">strlen</span>(str+<span class="number">1</span>);n=len;</span><br><span class="line">    rt=cnt=cur=<span class="number">1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,len)built(str[i]-<span class="string">'a'</span>);</span><br><span class="line">    inc(i,<span class="number">1</span>,cnt)add(fa[i],i),f[i][<span class="number">0</span>]=fa[i];</span><br><span class="line">    dfs(rt);</span><br><span class="line">    <span class="keyword">int</span> q=read();</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);L=read();R=read();</span><br><span class="line">    len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);<span class="keyword">int</span> temp=rt;<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">inc(i,<span class="number">1</span>,len)&#123;</span><br><span class="line">    <span class="keyword">int</span> t=s[i]-<span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">if</span>(ch[temp][t])temp=ch[temp][t],ans++;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> p=temp;</span><br><span class="line"><span class="keyword">for</span>(;p&amp;&amp;!ch[p][t];p=fa[p]);</span><br><span class="line"><span class="keyword">if</span>(!p)temp=rt,ans=<span class="number">0</span>;<span class="keyword">else</span> temp=ch[p][t],ans=dis[p]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x=temp;<span class="keyword">int</span> y=ans;</span><br><span class="line">    dec(j,<span class="number">20</span>,<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!check(f[x][j],dis[f[x][j]]))x=f[x][j],y=dis[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l=dis[fa[x]]+<span class="number">1</span>;<span class="keyword">int</span> r=y;<span class="keyword">int</span> ans2=dis[fa[x]];</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(x,mid))ans2=mid,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Sum[i]=ans2+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cnt1=cur1=rt1=<span class="number">1</span>;</span><br><span class="line">inc(i,<span class="number">1</span>,len)built1(s[i]-<span class="string">'a'</span>);</span><br><span class="line">inc(i,<span class="number">1</span>,cnt1)vec[fa1[i]].pb(i);</span><br><span class="line">_dfs(rt1);</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line">inc(i,<span class="number">1</span>,cnt1)&#123;</span><br><span class="line">    <span class="keyword">int</span> t=max(Sum[maxx[i]],dis1[fa1[i]]+<span class="number">1</span>);</span><br><span class="line">    sum+=max(<span class="number">0</span>,dis1[i]-t+<span class="number">1</span>);</span><br><span class="line">    vec[i].clear();</span><br><span class="line">&#125;</span><br><span class="line">inc(i,<span class="number">1</span>,cnt1)<span class="built_in">memset</span>(ch1[i],<span class="number">0</span>,<span class="keyword">sizeof</span>(ch1[i])),dis1[i]=maxx[i]=fa1[i]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意:&quot;&gt;&lt;/a&gt;题意:&lt;/h2&gt;&lt;p&gt;给定一个母串,$q$次查询每个串的本质不同子串在原串对应的$[l,r]$子串中不出现的个数&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="SAM" scheme="http://yoursite.com/tags/SAM/"/>
    
      <category term="倍增" scheme="http://yoursite.com/tags/%E5%80%8D%E5%A2%9E/"/>
    
      <category term="主席树" scheme="http://yoursite.com/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>动态DP</title>
    <link href="http://yoursite.com/2019/04/25/%E5%8A%A8%E6%80%81DP/"/>
    <id>http://yoursite.com/2019/04/25/动态DP/</id>
    <published>2019-04-25T12:16:58.000Z</published>
    <updated>2019-04-25T12:51:12.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>动态DP????</p><p>难道是传说中会动的DP??? 但是据我们所知DP状态都定了 还能改变吗???</p><p>动态DP:就是DP上进行一些单点修改操作</p><p><a href="https://www.luogu.org/blog/gkxx-is-here/what-the-hell-is-ddp" target="_blank" rel="noopener">参考博客</a></p><p>需要相应较强的数据结构的前置知识点和普通的DP能力(因为你发现整个过程都是再用一些数据结构在维护)</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="SP1716-GSS3-Can-you-answer-these-queries-III"><a href="#SP1716-GSS3-Can-you-answer-these-queries-III" class="headerlink" title="SP1716 GSS3 - Can you answer these queries III"></a><a href="https://www.luogu.org/problemnew/show/SP1716" target="_blank" rel="noopener">SP1716</a> GSS3 - Can you answer these queries III</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意:"></a>题意:</h4><p>​    $n$个数,$q$次操作</p><ul><li>操作$0 x y$ 把$A_x$修改成$y$</li><li>操作$1lr$询问区间$[l,r]$的最大子段和</li></ul><h4 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h4><p>直接考虑线段树区间合并即可,不需要动态DP</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lmax[MAXN&lt;&lt;<span class="number">2</span>],rmax[MAXN&lt;&lt;<span class="number">2</span>],sum[MAXN&lt;&lt;<span class="number">2</span>],maxx[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    maxx[x]=max(maxx[l],maxx[r]);</span><br><span class="line">    maxx[x]=max(maxx[x],rmax[l]+lmax[r]);</span><br><span class="line">    lmax[x]=max(lmax[l],sum[l]+lmax[r]);</span><br><span class="line">    rmax[x]=max(rmax[r],sum[r]+rmax[l]);</span><br><span class="line">    sum[x]=sum[l]+sum[r];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">built</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;lmax[x]=rmax[x]=sum[x]=maxx[x]=a[l];<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    built(x&lt;&lt;<span class="number">1</span>,l,mid);built(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    up(x,x&lt;&lt;<span class="number">1</span>,x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;lmax[x]=rmax[x]=sum[x]=maxx[x]=k;<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(t&lt;=mid)update(x&lt;&lt;<span class="number">1</span>,l,mid,t,k);</span><br><span class="line">    <span class="keyword">else</span> update(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,t,k);</span><br><span class="line">    up(x,x&lt;&lt;<span class="number">1</span>,x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans;<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    lmax[x]=lmax[y];rmax[x]=rmax[y];sum[x]=sum[y];maxx[x]=maxx[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!flag)copy(ans,x);</span><br><span class="line">    <span class="keyword">else</span> up(ans,ans,x);</span><br><span class="line">    flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)query(x&lt;&lt;<span class="number">1</span>,l,mid,ql,qr);</span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid)query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    inc(i,<span class="number">1</span>,n)a[i]=read();</span><br><span class="line">    built(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">int</span> q=read();</span><br><span class="line">    <span class="keyword">int</span> op,x,y;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">    op=read();x=read();y=read();</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">0</span>)update(<span class="number">1</span>,<span class="number">1</span>,n,x,y);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        flag=<span class="number">0</span>;query(<span class="number">1</span>,<span class="number">1</span>,n,x,y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,maxx[ans]);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P4719-动态DP"><a href="#P4719-动态DP" class="headerlink" title="P4719 动态DP"></a><a href="https://www.luogu.org/problemnew/show/P4719" target="_blank" rel="noopener">P4719</a> 动态DP</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意:"></a>题意:</h4><p>给定一棵$n$个点的树，点带点权。</p><p>有$m$次操作，每次操作给定$x,y$，表示修改点$x$的权值为$y$。</p><p>你需要在每次操作之后求出这棵树的最大权独立集的权值大小。</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解:"></a>题解:</h4><p>考虑不带修的情况  写出DP递推式转化成矩阵形式</p><p>然后发现具有结合律 我们用LCT来维护矩阵</p><p>复杂度 $O(8*nlogn)$</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    num[<span class="number">0</span>][<span class="number">0</span>]=num[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;num[<span class="number">1</span>][<span class="number">0</span>]=x;num[<span class="number">1</span>][<span class="number">1</span>]=-inf;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix &amp;v)&#123;</span><br><span class="line">    Matrix ans;</span><br><span class="line">    inc(i,<span class="number">0</span>,<span class="number">1</span>)inc(j,<span class="number">0</span>,<span class="number">1</span>)ans.num[i][j]=-inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++)&#123;</span><br><span class="line">            ans.num[i][j]=max(ans.num[i][j],num[i][k]+v.num[k][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Matrix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ch[MAXN][<span class="number">2</span>],pre[MAXN],a[MAXN];</span><br><span class="line">Matrix p[MAXN],s[MAXN];</span><br><span class="line"><span class="keyword">bool</span> rt[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    ch[x][<span class="number">0</span>]=<span class="number">0</span>;ch[x][<span class="number">1</span>]=<span class="number">0</span>;rt[x]=<span class="number">1</span>;pre[x]=<span class="number">0</span>;</span><br><span class="line">    p[x].init(y);s[x].init(-inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    s[x]=p[x];</span><br><span class="line">    <span class="keyword">if</span>(ch[x][<span class="number">0</span>])s[x]=s[ch[x][<span class="number">0</span>]]*s[x];</span><br><span class="line">    <span class="keyword">if</span>(ch[x][<span class="number">1</span>])s[x]=s[x]*s[ch[x][<span class="number">1</span>]];</span><br><span class="line">    <span class="comment">//cout&lt;&lt;x&lt;&lt;":::::::"&lt;&lt;s[x].num[0][0]&lt;&lt;" "&lt;&lt;s[x].num[1][0]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> kind)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=pre[x];</span><br><span class="line">    pre[ch[x][kind]]=y;ch[y][!kind]=ch[x][kind];</span><br><span class="line">    <span class="keyword">if</span>(rt[y])rt[x]=<span class="number">1</span>,rt[y]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> ch[pre[y]][ch[pre[y]][<span class="number">1</span>]==y]=x;</span><br><span class="line">    pre[x]=pre[y];ch[x][kind]=y;pre[y]=x;</span><br><span class="line">    up(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!rt[x])&#123;</span><br><span class="line">    <span class="keyword">if</span>(rt[pre[x]])rotate(x,ch[pre[x]][<span class="number">0</span>]==x);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y=pre[x];<span class="keyword">int</span> kind=ch[pre[y]][<span class="number">0</span>]==y;</span><br><span class="line">        <span class="keyword">if</span>(ch[y][kind]==x)rotate(x,!kind),rotate(x,kind);</span><br><span class="line">        <span class="keyword">else</span> rotate(y,kind),rotate(x,kind);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    up(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">    splay(x);</span><br><span class="line">    <span class="keyword">if</span>(ch[x][<span class="number">1</span>])&#123;</span><br><span class="line">        rt[ch[x][<span class="number">1</span>]]=<span class="number">1</span>;pre[ch[x][<span class="number">1</span>]]=x;</span><br><span class="line">        p[x].num[<span class="number">0</span>][<span class="number">0</span>]+=max(s[ch[x][<span class="number">1</span>]].num[<span class="number">0</span>][<span class="number">0</span>],s[ch[x][<span class="number">1</span>]].num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        p[x].num[<span class="number">0</span>][<span class="number">1</span>]+=max(s[ch[x][<span class="number">1</span>]].num[<span class="number">0</span>][<span class="number">0</span>],s[ch[x][<span class="number">1</span>]].num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        p[x].num[<span class="number">1</span>][<span class="number">0</span>]+=s[ch[x][<span class="number">1</span>]].num[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y)&#123;</span><br><span class="line">        rt[y]=<span class="number">0</span>;</span><br><span class="line">        p[x].num[<span class="number">0</span>][<span class="number">0</span>]-=max(s[y].num[<span class="number">0</span>][<span class="number">0</span>],s[y].num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        p[x].num[<span class="number">0</span>][<span class="number">1</span>]-=max(s[y].num[<span class="number">0</span>][<span class="number">0</span>],s[y].num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        p[x].num[<span class="number">1</span>][<span class="number">0</span>]-=s[y].num[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    ch[x][<span class="number">1</span>]=y;up(x);</span><br><span class="line">    y=x;x=pre[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    p[y].num[<span class="number">0</span>][<span class="number">0</span>]+=max(p[x].num[<span class="number">0</span>][<span class="number">0</span>],p[x].num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">    p[y].num[<span class="number">0</span>][<span class="number">1</span>]+=max(p[x].num[<span class="number">0</span>][<span class="number">0</span>],p[x].num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">    p[y].num[<span class="number">1</span>][<span class="number">0</span>]+=p[x].num[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(y==j-&gt;t)<span class="keyword">continue</span>;</span><br><span class="line">    dfs(j-&gt;t,x);</span><br><span class="line">    join(j-&gt;t,x);pre[j-&gt;t]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;p[x].num[0][0]&lt;&lt;" "&lt;&lt;p[x].num[1][0]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//s[0].num[0][0]=s[0].num[0][1]=0;s[0].num[1][0]=-inf;s[0].num[1][1]=-inf;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    inc(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">    a[i]=read();newnode(i,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">2</span>,n)&#123;</span><br><span class="line">    x=read();y=read();</span><br><span class="line">    add(x,y);add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;" "&lt;&lt;s[1].num[0][0]&lt;&lt;":::"&lt;&lt;s[1].num[1][0]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">    x=read();y=read();</span><br><span class="line">    access(x);splay(x);</span><br><span class="line">    p[x].num[<span class="number">1</span>][<span class="number">0</span>]+=(y-a[x]);a[x]=y;up(x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(s[x].num[<span class="number">0</span>][<span class="number">0</span>],s[x].num[<span class="number">1</span>][<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P4751-动态DP加强版"><a href="#P4751-动态DP加强版" class="headerlink" title="P4751 动态DP加强版"></a><a href="https://www.luogu.org/problemnew/show/P4751" target="_blank" rel="noopener">P4751</a> 动态DP加强版</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意:"></a>题意:</h4><p>与上题题意相同</p><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解:"></a>题解:</h4><p>出题人十分毒瘤</p><p>上一题的做法会被卡常 虽然都是一个$logn$的做法 但是LCT的常数过于巨大</p><p>我们考虑用全局平衡二叉树(链分治)</p><p>我们用树链剖分的思想 取出每条重链</p><p>对于每条重链分治找带权重心(每个点的权值是轻儿子的个数加1)构造$BST$</p><p>这样形成的树形结构 对于每个点 不管是跳轻边还是重边 都只会是$logn$次</p><p>然后用矩阵来维护DP即可</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="keyword">namespace</span> superRead</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 5000010</span></span><br><span class="line">    <span class="keyword">char</span> buf[BUF_SIZE]; <span class="keyword">int</span> cur = BUF_SIZE; FILE *in = <span class="built_in">stdin</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gnc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == BUF_SIZE) &#123; fread(buf, BUF_SIZE, <span class="number">1</span>, in); cur = <span class="number">0</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> buf[cur++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>; <span class="keyword">char</span> c = gnc(); x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f |= c == <span class="string">'-'</span>, c = gnc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="number">48</span>, c = gnc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; t, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">        read(t); read(args...);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> superRead::read;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeln</span><span class="params">(T x)</span> </span>&#123; write(x); <span class="built_in">puts</span>(<span class="string">""</span>); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chkmin</span><span class="params">(T&amp; x, <span class="keyword">const</span> T&amp; y)</span> </span>&#123; <span class="keyword">return</span> y &lt; x ? (x = y, <span class="literal">true</span>) : <span class="literal">false</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chkmax</span><span class="params">(T&amp; x, <span class="keyword">const</span> T&amp; y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? (x = y, <span class="literal">true</span>) : <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    num[<span class="number">0</span>][<span class="number">0</span>]=num[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    num[<span class="number">1</span>][<span class="number">0</span>]=x;num[<span class="number">1</span>][<span class="number">1</span>]=-inf;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix &amp;v)&#123;</span><br><span class="line">    Matrix ans;</span><br><span class="line">    inc(i,<span class="number">0</span>,<span class="number">1</span>)inc(j,<span class="number">0</span>,<span class="number">1</span>)ans.num[i][j]=-inf;</span><br><span class="line">    ans.num[<span class="number">0</span>][<span class="number">0</span>]=max(num[<span class="number">0</span>][<span class="number">0</span>]+v.num[<span class="number">0</span>][<span class="number">0</span>],num[<span class="number">0</span>][<span class="number">1</span>]+v.num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">    ans.num[<span class="number">0</span>][<span class="number">1</span>]=max(num[<span class="number">0</span>][<span class="number">0</span>]+v.num[<span class="number">0</span>][<span class="number">1</span>],num[<span class="number">0</span>][<span class="number">1</span>]+v.num[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    ans.num[<span class="number">1</span>][<span class="number">0</span>]=max(num[<span class="number">1</span>][<span class="number">0</span>]+v.num[<span class="number">0</span>][<span class="number">0</span>],num[<span class="number">1</span>][<span class="number">1</span>]+v.num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">    ans.num[<span class="number">1</span>][<span class="number">1</span>]=max(num[<span class="number">1</span>][<span class="number">0</span>]+v.num[<span class="number">0</span>][<span class="number">1</span>],num[<span class="number">1</span>][<span class="number">1</span>]+v.num[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Matrix;</span><br><span class="line">Matrix s[MAXN],p[MAXN];</span><br><span class="line"><span class="keyword">int</span> f[MAXN],son[MAXN],num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    f[x]=pre;num[x]=<span class="number">1</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    dfs(j-&gt;t,x);</span><br><span class="line">    num[x]+=num[j-&gt;t];</span><br><span class="line">    <span class="keyword">if</span>(son[x]==<span class="number">-1</span>||num[son[x]]&lt;num[j-&gt;t])son[x]=j-&gt;t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tp[MAXN],ch[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> td)&#123;</span><br><span class="line">    tp[x]=td;</span><br><span class="line">    <span class="keyword">if</span>(son[x]!=<span class="number">-1</span>)_dfs(son[x],td);</span><br><span class="line">    link(x)<span class="keyword">if</span>(j-&gt;t!=son[x]&amp;&amp;j-&gt;t!=f[x])_dfs(j-&gt;t,j-&gt;t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    s[x]=p[x];</span><br><span class="line">    <span class="keyword">if</span>(ch[x][<span class="number">0</span>])s[x]=s[ch[x][<span class="number">0</span>]]*s[x];</span><br><span class="line">    <span class="keyword">if</span>(ch[x][<span class="number">1</span>])s[x]=s[x]*s[ch[x][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> __dfs(<span class="keyword">int</span> x)&#123;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(j-&gt;t==f[x])<span class="keyword">continue</span>;</span><br><span class="line">    __dfs(j-&gt;t);</span><br><span class="line">    <span class="keyword">if</span>(j-&gt;t!=son[x])&#123;</span><br><span class="line">        p[x].num[<span class="number">0</span>][<span class="number">0</span>]+=max(s[j-&gt;t].num[<span class="number">0</span>][<span class="number">0</span>],s[j-&gt;t].num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        p[x].num[<span class="number">0</span>][<span class="number">1</span>]+=max(s[j-&gt;t].num[<span class="number">0</span>][<span class="number">0</span>],s[j-&gt;t].num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        p[x].num[<span class="number">1</span>][<span class="number">0</span>]+=s[j-&gt;t].num[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s[x]=p[x];</span><br><span class="line">    <span class="keyword">if</span>(son[x]!=<span class="number">-1</span>)s[x]=s[x]*s[son[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> st[MAXN],tot,size[MAXN];</span><br><span class="line"><span class="keyword">int</span> fa[MAXN],a[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fbuilt</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll sum1=<span class="number">0</span>,sum2=<span class="number">0</span>;</span><br><span class="line">    inc(i,l,r)sum1+=size[i];</span><br><span class="line">    inc(i,l,r)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">2</span>*(sum2+size[i])&gt;=sum1)&#123;</span><br><span class="line">        <span class="keyword">int</span> lx=fbuilt(l,i<span class="number">-1</span>);<span class="keyword">int</span> rx=fbuilt(i+<span class="number">1</span>,r);</span><br><span class="line">        ch[st[i]][<span class="number">0</span>]=lx;ch[st[i]][<span class="number">1</span>]=rx;</span><br><span class="line">        fa[lx]=st[i];fa[rx]=st[i];</span><br><span class="line">        up(st[i]);</span><br><span class="line">        <span class="keyword">return</span> st[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> sum2+=size[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>||y==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(tp[x]==tp[y])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">built</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">-1</span>)&#123;</span><br><span class="line">    st[++tot]=x;</span><br><span class="line">    <span class="keyword">if</span>(son[x]!=<span class="number">-1</span>)size[tot]=num[x]-num[son[x]];</span><br><span class="line">    <span class="keyword">else</span> size[x]=<span class="number">1</span>;</span><br><span class="line">    x=son[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fbuilt(<span class="number">1</span>,tot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    p[x].num[<span class="number">1</span>][<span class="number">0</span>]+=(y-a[x]);a[x]=y;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]&amp;&amp;!check(x,fa[x]))&#123;</span><br><span class="line">          p[fa[x]].num[<span class="number">1</span>][<span class="number">0</span>]-=s[x].num[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">          p[fa[x]].num[<span class="number">0</span>][<span class="number">0</span>]-=max(s[x].num[<span class="number">0</span>][<span class="number">0</span>],s[x].num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">          p[fa[x]].num[<span class="number">0</span>][<span class="number">1</span>]-=max(s[x].num[<span class="number">0</span>][<span class="number">0</span>],s[x].num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">          up(x);</span><br><span class="line">          p[fa[x]].num[<span class="number">1</span>][<span class="number">0</span>]+=s[x].num[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">          p[fa[x]].num[<span class="number">0</span>][<span class="number">0</span>]+=max(s[x].num[<span class="number">0</span>][<span class="number">0</span>],s[x].num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">          p[fa[x]].num[<span class="number">0</span>][<span class="number">1</span>]+=max(s[x].num[<span class="number">0</span>][<span class="number">0</span>],s[x].num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> up(x);</span><br><span class="line">    x=fa[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    read(n,m);</span><br><span class="line">    inc(i,<span class="number">1</span>,n)read(a[i]),p[i].init(a[i]),s[i].init(-inf),son[i]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    inc(i,<span class="number">2</span>,n)read(x,y),add(x,y),add(y,x);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);_dfs(<span class="number">1</span>,<span class="number">1</span>);__dfs(<span class="number">1</span>);</span><br><span class="line">    inc(i,<span class="number">1</span>,n)<span class="keyword">if</span>(tp[i]==i)fa[built(i)]=f[i];</span><br><span class="line">    <span class="keyword">int</span> rt;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)<span class="keyword">if</span>(!fa[i])rt=i;</span><br><span class="line">    <span class="keyword">int</span> Ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">    read(x,y);x^=Ans;</span><br><span class="line">    update(x,y);</span><br><span class="line">    Ans=max(s[rt].num[<span class="number">0</span>][<span class="number">0</span>],s[rt].num[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">    writeln(Ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;动态DP????&lt;/p&gt;
&lt;p&gt;难道是传说中会动的DP??? 但是据我们所知DP状态都定了 还能改变吗???&lt;/p&gt;
&lt;p&gt;动态DP:就是D
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="DP" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/DP/"/>
    
    
      <category term="LCT" scheme="http://yoursite.com/tags/LCT/"/>
    
      <category term="链分治" scheme="http://yoursite.com/tags/%E9%93%BE%E5%88%86%E6%B2%BB/"/>
    
      <category term="矩阵乘法" scheme="http://yoursite.com/tags/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>圆方树入门</title>
    <link href="http://yoursite.com/2019/04/25/%E5%9C%86%E6%96%B9%E6%A0%91%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/04/25/圆方树入门/</id>
    <published>2019-04-25T11:09:01.000Z</published>
    <updated>2019-04-25T12:01:44.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚仙人掌入门….</p><p>对于一类点双问题 我们可以采用圆方树解决</p><p>大致做法就是点双缩环 变成树形结构 从而解决树形问题</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="P4630-APIO2018-铁人两项"><a href="#P4630-APIO2018-铁人两项" class="headerlink" title="P4630 APIO2018 铁人两项"></a><a href="https://www.luogu.org/problemnew/show/P4630" target="_blank" rel="noopener">P4630</a> APIO2018 铁人两项</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意:"></a>题意:</h4><p>统计有多少个三元组$(s,c,f)$ 满足从$s-&gt;c$和$c-&gt;f$的路径不相交</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h4><p>首先我们可以确定的是 在同一个点双分量内的两个点$s,v$必然可以从这个点双分量找到第三个点$w$( $w!=s$并且$w!=v$)</p><p>那么问题转化成 对于任意两点 第三个点可以是这两点的任意路径中除去头尾的节点的并集</p><p>那用点双缩环  圆点的价值是-1  方点的价值是点双规模的大小</p><p>对于任意两点的答案就是圆方树路径的求和</p><p>我们考虑树形DP一下统计所有的不同三元组即可</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">4e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;node;</span><br><span class="line">node d[MAXN];</span><br><span class="line"><span class="keyword">int</span> dfn[MAXN],low[MAXN],bcc_pos[MAXN];</span><br><span class="line"><span class="keyword">int</span> num,cnt,st[MAXN],tot;</span><br><span class="line">ll a[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[MAXN],p[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan_Bcc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    dfn[x]=low[x]=++cnt;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(dfn[j-&gt;t]&amp;&amp;dfn[j-&gt;t]&lt;dfn[x]&amp;&amp;j-&gt;t!=pre)&#123;</span><br><span class="line">        st[++tot]=j-&gt;v;</span><br><span class="line">        low[x]=min(low[x],dfn[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!dfn[j-&gt;t])&#123;</span><br><span class="line">        st[++tot]=j-&gt;v;</span><br><span class="line">        tarjan_Bcc(j-&gt;t,x);</span><br><span class="line">        low[x]=min(low[x],low[j-&gt;t]);</span><br><span class="line">        <span class="keyword">if</span>(low[j-&gt;t]&gt;=dfn[x])&#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=st[tot--];</span><br><span class="line">            <span class="keyword">if</span>(bcc_pos[d[y].x]!=num)&#123;</span><br><span class="line">            bcc_pos[d[y].x]=num;</span><br><span class="line">            p[num-n].pb(d[y].x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bcc_pos[d[y].y]!=num)&#123;</span><br><span class="line">            bcc_pos[d[y].y]=num;</span><br><span class="line">            p[num-n].pb(d[y].y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(y==j-&gt;v)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a[num]=p[num-n].size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p[num-n].size();i++)&#123;</span><br><span class="line">            vec[num].pb(p[num-n][i]);</span><br><span class="line">            vec[p[num-n][i]].pb(num);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans;</span><br><span class="line">ll sum[MAXN],size[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sum[x]=<span class="number">0</span>;size[x]=<span class="number">0</span>;<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;x&lt;&lt;":::"&lt;&lt;pre&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec[x][i]==pre)<span class="keyword">continue</span>;</span><br><span class="line">    dfs(vec[x][i],x);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;x&lt;&lt;"::::==="&lt;&lt;vec[x][i]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(!flag)sum[x]+=sum[vec[x][i]],size[x]+=size[vec[x][i]],flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ans+=(size[x]*sum[vec[x][i]]+size[vec[x][i]]*sum[x]+a[x]*size[x]*size[vec[x][i]]);</span><br><span class="line">        sum[x]+=sum[vec[x][i]];size[x]+=size[vec[x][i]];</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=n)&#123;</span><br><span class="line">    ans+=(sum[x]+<span class="number">1l</span>l*a[x]*size[x]);</span><br><span class="line">    size[x]++;</span><br><span class="line">    sum[x]+=<span class="number">1l</span>l*size[x]*a[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    sum[x]+=<span class="number">1l</span>l*size[x]*a[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    inc(i,<span class="number">1</span>,n)a[i]=<span class="number">-1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)d[i].x=read(),d[i].y=read(),add(d[i].x,d[i].y,i),add(d[i].y,d[i].x,i);</span><br><span class="line">    num=n;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)<span class="keyword">if</span>(!dfn[i])tarjan_Bcc(i,<span class="number">0</span>),dfs(i,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P4606-SDOI2018-战略游戏"><a href="#P4606-SDOI2018-战略游戏" class="headerlink" title="P4606 SDOI2018 战略游戏"></a><a href="https://www.luogu.org/problemnew/show/P4606" target="_blank" rel="noopener">P4606</a> SDOI2018 战略游戏</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意:"></a>题意:</h4><p>给定一个$n$个点,$m$条边的无向图,$q$次询问,每次询问$k$个点,表示这$k$个点已经被小C占领,如果你能找到一个点(未被占领)去除这个点以及其连边后,使得小C存在一对节点$&lt;u,v&gt;$不连通,则小Q获胜,问能让小Q获胜的节点有多少个</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解:"></a>题解:</h4><p>很显然的 如果在一个点双分量里面 则去除任何一个点都不会影响其他节点的连通性</p><p>那么对于任意两个点双分量 我们只有去除这两个点双分量路径上的割点 才会影响这两个点双分量的连通性 </p><p>所以我们用点双缩点后 对于割点的权值为1 非割点价值为0</p><p>然后对于$k$个关键节点 在圆方树上做出虚树 对于每个点考虑是否是在点双分量的路径上即可</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _,n,m;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;node;</span><br><span class="line">node que[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[MAXN],p[MAXN];</span><br><span class="line"><span class="keyword">int</span> bcc_pos[MAXN],num,cnt;</span><br><span class="line"><span class="keyword">int</span> a[MAXN],st[MAXN],tot,dfn[MAXN],low[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan_Bcc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    dfn[x]=low[x]=++cnt;</span><br><span class="line">    <span class="keyword">int</span> ch=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[j-&gt;t]&amp;&amp;dfn[j-&gt;t]&lt;dfn[x]&amp;&amp;j-&gt;t!=pre)&#123;</span><br><span class="line">    low[x]=min(low[x],dfn[j-&gt;t]);</span><br><span class="line">    st[++tot]=j-&gt;v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!dfn[j-&gt;t])&#123;</span><br><span class="line">    ch++;</span><br><span class="line">    st[++tot]=j-&gt;v;</span><br><span class="line">    tarjan_Bcc(j-&gt;t,x);</span><br><span class="line">    low[x]=min(low[j-&gt;t],low[x]);</span><br><span class="line">    <span class="keyword">if</span>(low[j-&gt;t]&gt;=dfn[x])&#123;</span><br><span class="line">a[x]=<span class="number">1</span>;num++;p[num-n].clear();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> y=st[tot--];</span><br><span class="line">    <span class="keyword">if</span>(bcc_pos[que[y].x]!=num)&#123;</span><br><span class="line">bcc_pos[que[y].x]=num;</span><br><span class="line">p[num-n].pb(que[y].x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(bcc_pos[que[y].y]!=num)&#123;</span><br><span class="line">bcc_pos[que[y].y]=num;</span><br><span class="line">p[num-n].pb(que[y].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y==j-&gt;v)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p[num-n].size();i++)&#123;</span><br><span class="line">    vec[num].pb(p[num-n][i]);</span><br><span class="line">    vec[p[num-n][i]].pb(num);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pre==<span class="number">0</span>&amp;&amp;ch&gt;=<span class="number">2</span>)a[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pre==<span class="number">0</span>)a[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[MAXN],fa[MAXN],sum[MAXN],son[MAXN],Num[MAXN],P[MAXN],cnt1;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> deep)</span></span>&#123;</span><br><span class="line">    fa[x]=pre;dep[x]=deep+<span class="number">1</span>;Num[x]=<span class="number">1</span>;P[x]=++cnt1;</span><br><span class="line">    sum[x]=sum[pre]+a[x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vec[x][i]==pre)<span class="keyword">continue</span>;</span><br><span class="line">dfs(vec[x][i],x,deep+<span class="number">1</span>);</span><br><span class="line">Num[x]+=Num[vec[x][i]];</span><br><span class="line"><span class="keyword">if</span>(son[x]==<span class="number">-1</span>||Num[son[x]]&lt;Num[vec[x][i]])son[x]=vec[x][i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tp[MAXN];</span><br><span class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> td)&#123;</span><br><span class="line">    tp[x]=td;</span><br><span class="line">    <span class="keyword">if</span>(son[x]!=<span class="number">-1</span>)_dfs(son[x],td);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)<span class="keyword">if</span>(vec[x][i]!=fa[x]&amp;&amp;vec[x][i]!=son[x])_dfs(vec[x][i],vec[x][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xx=tp[x];<span class="keyword">int</span> yy=tp[y];</span><br><span class="line">    <span class="keyword">while</span>(xx!=yy)&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[xx]&lt;dep[yy])swap(xx,yy),swap(x,y);</span><br><span class="line">x=fa[xx];xx=tp[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y])swap(x,y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1[MAXN],v2,v3;</span><br><span class="line"><span class="keyword">int</span> K,calc[MAXN],ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> P[x]&lt;P[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">built</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tot)&#123;st[++tot]=x;v3.pb(x);<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> lca=Lca(st[tot],x);</span><br><span class="line">    <span class="keyword">while</span>(tot&gt;<span class="number">1</span>&amp;&amp;dep[lca]&lt;dep[st[tot<span class="number">-1</span>]])&#123;</span><br><span class="line">v1[st[tot]].pb(st[tot<span class="number">-1</span>]);</span><br><span class="line">v1[st[tot<span class="number">-1</span>]].pb(st[tot]);</span><br><span class="line">tot--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tot&amp;&amp;dep[lca]&lt;dep[st[tot]])&#123;</span><br><span class="line">v1[lca].pb(st[tot]);</span><br><span class="line">v1[st[tot]].pb(lca);</span><br><span class="line">tot--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!tot||dep[st[tot]]&lt;dep[lca])st[++tot]=lca,v3.pb(lca);</span><br><span class="line">    st[++tot]=x;v3.pb(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> __dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v1[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(v1[x][i]==pre)<span class="keyword">continue</span>;</span><br><span class="line">__dfs(v1[x][i],x);</span><br><span class="line">calc[x]+=calc[v1[x][i]];</span><br><span class="line"><span class="keyword">if</span>(calc[v1[x][i]]&amp;&amp;calc[v1[x][i]]&lt;K)flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)ans+=a[x];</span><br><span class="line">    <span class="keyword">if</span>(calc[x]!=K)&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag)ans+=a[x];</span><br><span class="line">ans+=(sum[x]-sum[pre]-a[x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _=read();</span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));o=e;</span><br><span class="line">n=read();m=read();</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">inc(i,<span class="number">1</span>,m)que[i].x=read(),que[i].y=read(),add(que[i].x,que[i].y,i),add(que[i].y,que[i].x,i);</span><br><span class="line">tot=cnt=<span class="number">0</span>;num=n;</span><br><span class="line">tarjan_Bcc(<span class="number">1</span>,<span class="number">0</span>);cnt1=<span class="number">0</span>;</span><br><span class="line">inc(i,<span class="number">1</span>,num)son[i]=<span class="number">-1</span>;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);_dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> q=read();</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line">    K=read();v2.clear();v3.clear();</span><br><span class="line">    inc(i,<span class="number">1</span>,K)x=read(),v2.pb(x),calc[x]=<span class="number">1</span>;</span><br><span class="line">    sort(v2.begin(),v2.end(),cmp);</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,K)built(v2[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">while</span>(tot&gt;<span class="number">1</span>)&#123;v1[st[tot]].pb(st[tot<span class="number">-1</span>]);v1[st[tot<span class="number">-1</span>]].pb(st[tot]);tot--;&#125;</span><br><span class="line">    <span class="keyword">if</span>(st[<span class="number">1</span>]!=<span class="number">1</span>)&#123;v1[<span class="number">1</span>].pb(st[<span class="number">1</span>]);v1[st[<span class="number">1</span>]].pb(<span class="number">1</span>);v3.pb(<span class="number">1</span>);&#125;</span><br><span class="line">    ans=<span class="number">0</span>;__dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v3.size();i++)v1[v3[i]].clear(),calc[v3[i]]=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,K)<span class="keyword">if</span>(a[v2[i<span class="number">-1</span>]])ans--;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">inc(i,<span class="number">1</span>,num)vec[i].clear(),bcc_pos[i]=low[i]=dfn[i]=<span class="number">0</span>,a[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;刚仙人掌入门….&lt;/p&gt;
&lt;p&gt;对于一类点双问题 我们可以采用圆方树解决&lt;/p&gt;
&lt;p&gt;大致做法就是点双缩环 变成树形结构 从而解决树形问题
      
    
    </summary>
    
      <category term="图论" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="dp" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/dp/"/>
    
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
      <category term="点双分量" scheme="http://yoursite.com/tags/%E7%82%B9%E5%8F%8C%E5%88%86%E9%87%8F/"/>
    
      <category term="虚树" scheme="http://yoursite.com/tags/%E8%99%9A%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>静态仙人掌</title>
    <link href="http://yoursite.com/2019/04/17/%E9%9D%99%E6%80%81%E4%BB%99%E4%BA%BA%E6%8E%8C/"/>
    <id>http://yoursite.com/2019/04/17/静态仙人掌/</id>
    <published>2019-04-17T08:03:35.000Z</published>
    <updated>2019-04-17T09:32:02.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>圆方树是一种数据结构  用来解决静态仙人掌问题</p><p>这个东西原始的出处应该是paper《Maintaining bridge-connected and biconnected components on-line》</p><p>仙人掌的正经定义是: 无向图中每条边至多在一个简单环上</p><p>而圆方树是通过点双性质,将简单环处理掉,把一个特殊图变成树形结构,里面的点分为两类圆点(本身图上的点),方点(用来代替点双分量的点)</p><p>圆方树有很多性质:</p><ul><li>无论如何换根,圆方树的形态不变(因为把环变成了菊花链)</li><li>方点和方点不会相连</li><li>圆方树的子树 = 原仙人掌的子仙人掌</li></ul><p>至于其他的性质,关键在题目中</p><p>参照博客:</p><p><a href="https://blog.csdn.net/calabash_boy/article/details/79973483" target="_blank" rel="noopener">calabash_boy</a></p><p><a href="https://www.cnblogs.com/zzqsblog/p/5851393.html" target="_blank" rel="noopener">zzq</a></p><p><a href="http://immortalco.blog.uoj.ac/archive?tag=%E4%BB%99%E4%BA%BA%E6%8E%8C" target="_blank" rel="noopener">immortalCO</a></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="Luogu-P4129-SHOI2006-仙人掌"><a href="#Luogu-P4129-SHOI2006-仙人掌" class="headerlink" title="Luogu P4129 [SHOI2006]仙人掌"></a>Luogu P4129 [SHOI2006]仙人掌</h3><h4 id="题目链接-P4120"><a href="#题目链接-P4120" class="headerlink" title="题目链接: P4120"></a>题目链接: <a href="https://www.luogu.org/problemnew/show/P4129" target="_blank" rel="noopener">P4120</a></h4><h4 id="题意"><a href="#题意" class="headerlink" title="题意:"></a>题意:</h4><p>判断一个图是否为仙人掌,若为仙人掌则求其支撑子图的个数(支撑子图也是原图的子图，这种子图可以比原来少一些边，但是不能破坏图的连通性，也不能去除原来图上的任何顶点)</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h4><p>在上一遍已经有了对<a href="https://wang9897.github.io/2019/04/15/%E4%BB%99%E4%BA%BA%E6%8E%8C%E5%9B%BE%E7%9A%84%E5%88%A4%E5%AE%9A/" target="_blank" rel="noopener">无向图仙人掌的判定</a>,我们考虑计数,答案为(仙人掌每片叶子的个数+1)的乘积</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NM=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Huge</span>&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">10001</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> BASE=<span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">int</span> Num[MAXN];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(Num,<span class="number">0</span>,<span class="keyword">sizeof</span>(Num));</span><br><span class="line">        <span class="keyword">int</span> rlen=s.size();</span><br><span class="line">        len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i=rlen<span class="number">-5</span>;i&gt;=<span class="number">0</span>;i-=<span class="number">4</span>)&#123;</span><br><span class="line">            Num[len]=Num[len]*<span class="number">10</span>+s[i+<span class="number">1</span>]-<span class="string">'0'</span>;</span><br><span class="line">            Num[len]=Num[len]*<span class="number">10</span>+s[i+<span class="number">2</span>]-<span class="string">'0'</span>;</span><br><span class="line">            Num[len]=Num[len]*<span class="number">10</span>+s[i+<span class="number">3</span>]-<span class="string">'0'</span>;</span><br><span class="line">            Num[len]=Num[len]*<span class="number">10</span>+s[i+<span class="number">4</span>]-<span class="string">'0'</span>;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i&lt;<span class="number">0</span>) i+=<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">            Num[len]=Num[len]*<span class="number">10</span>+s[j]-<span class="string">'0'</span>;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;i, Huge &amp;v)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        i&gt;&gt;s;</span><br><span class="line">        v.init(s);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;o, Huge &amp;v)&#123;</span><br><span class="line">        <span class="keyword">if</span> (v.len==<span class="number">0</span> &amp;&amp; v.Num[<span class="number">0</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            o&lt;&lt;<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">        o&lt;&lt;v.Num[v.len<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=v.len<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            o&lt;&lt;setw(<span class="number">4</span>)&lt;&lt;setfill(<span class="string">'0'</span>)&lt;&lt;v.Num[i];</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>+=(<span class="keyword">const</span> Huge &amp;v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> nlen=max(v.len,len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nlen;i++)&#123;</span><br><span class="line">            Num[i]+=v.Num[i];</span><br><span class="line">            <span class="keyword">if</span> (Num[i]&gt;=BASE)&#123;</span><br><span class="line">                Num[i]-=BASE;</span><br><span class="line">                Num[i+<span class="number">1</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Num[nlen]!=<span class="number">0</span>) nlen++;</span><br><span class="line">        len=nlen;</span><br><span class="line">        <span class="comment">//return (*this);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>-=(<span class="keyword">const</span> Huge &amp;v)&#123;</span><br><span class="line">        <span class="keyword">int</span> nlen=max(v.len,len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nlen;i++)&#123;</span><br><span class="line">            Num[i]-=v.Num[i];</span><br><span class="line">            <span class="keyword">if</span> (Num[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                Num[i]+=BASE;</span><br><span class="line">                Num[i+<span class="number">1</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (Num[nlen]==<span class="number">0</span> &amp;&amp; nlen&gt;=<span class="number">0</span>) nlen--;</span><br><span class="line">        len=nlen+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//return (*this);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>*=(<span class="keyword">const</span> Huge &amp;v)&#123;</span><br><span class="line">        Huge c;</span><br><span class="line">        c.init(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;v.len;j++)&#123;</span><br><span class="line">                c.Num[i+j]+=Num[i]*v.Num[j];</span><br><span class="line">                <span class="keyword">if</span> (c.Num[i+j]&gt;=BASE)&#123;</span><br><span class="line">                    c.Num[i+j+<span class="number">1</span>]+=c.Num[i+j]/BASE;</span><br><span class="line">                    c.Num[i+j]%=BASE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        c.len=len+v.len;</span><br><span class="line">        <span class="keyword">while</span> (c.Num[c.len]==<span class="number">0</span> &amp;&amp; c.len&gt;=<span class="number">0</span>) c.len--;</span><br><span class="line">        len=c.len+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) Num[i]=c.Num[i];</span><br><span class="line">        <span class="comment">//return (*this);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Huge &amp;v)&#123;</span><br><span class="line">        <span class="keyword">if</span> (len!=v.len) <span class="keyword">return</span> len&lt;v.len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            <span class="keyword">if</span> (Num[i]!=v.Num[i]) <span class="keyword">return</span> Num[i]&lt;v.Num[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> low[MAXN],dfn[MAXN],tarjan_bcc[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN],pis[NM];</span><br><span class="line"><span class="keyword">int</span> Num[NM];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[NM];</span><br><span class="line"><span class="keyword">int</span> st[NM],tot,cnt,num;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;node;</span><br><span class="line">node d[NM];</span><br><span class="line">Huge ans,ans1;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">trans</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> y;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">    <span class="keyword">int</span> t1=x%<span class="number">10</span>;x-=t1;x/=<span class="number">10</span>;</span><br><span class="line">    y.push_back((<span class="keyword">char</span>)(t1+<span class="string">'0'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(y.begin(),y.end());</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan_Bcc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;low[x]=dfn[x]=++cnt;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t]&amp;&amp;dfn[j-&gt;t]&lt;dfn[x]&amp;&amp;j-&gt;t!=pre)&#123;</span><br><span class="line">        st[++tot]=j-&gt;v;pis[j-&gt;v]=<span class="number">1</span>;</span><br><span class="line">        low[x]=min(low[x],dfn[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!vis[j-&gt;t])&#123;</span><br><span class="line">        st[++tot]=j-&gt;v;</span><br><span class="line">        tarjan_Bcc(j-&gt;t,x);</span><br><span class="line">        low[x]=min(low[x],low[j-&gt;t]);</span><br><span class="line">        <span class="keyword">if</span>(low[j-&gt;t]&gt;=dfn[x])&#123;</span><br><span class="line">        num++;vec[num].clear();</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=st[tot--];</span><br><span class="line">            <span class="keyword">if</span>(pis[y])Num[num]++;</span><br><span class="line">            <span class="keyword">if</span>(tarjan_bcc[d[y].x]!=num)&#123;</span><br><span class="line">            vec[num].pb(d[y].x);</span><br><span class="line">            tarjan_bcc[d[y].x]=num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tarjan_bcc[d[y].y]!=num)&#123;</span><br><span class="line">            vec[num].pb(d[y].y);</span><br><span class="line">            tarjan_bcc[d[y].y]=num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j-&gt;v==y)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Num[num]==<span class="number">1</span>)ans1.init(trans(vec[num].size()+<span class="number">1</span>)),ans*=ans1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt1=<span class="number">0</span>;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    ans.init(trans(<span class="number">1</span>));</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">    <span class="keyword">int</span> k=read();<span class="keyword">int</span> last=read();</span><br><span class="line">    inc(j,<span class="number">2</span>,k)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=read();cnt1++;</span><br><span class="line">        d[cnt1].x=x;d[cnt1].y=last;</span><br><span class="line">        add(x,last,cnt1);</span><br><span class="line">        add(last,x,cnt1);</span><br><span class="line">        last=x;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt2=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)<span class="keyword">if</span>(!vis[i])tarjan_Bcc(i,<span class="number">0</span>),cnt2++;</span><br><span class="line">    <span class="keyword">if</span>(cnt2&gt;<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"0\n"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="comment">/*cout&lt;&lt;num&lt;&lt;" "&lt;&lt;cnt&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    inc(i,1,num)&#123;</span></span><br><span class="line"><span class="comment">    for(int j=0;j&lt;vec[i].size();j++)cout&lt;&lt;vec[i][j]&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    inc(i,<span class="number">1</span>,num)<span class="keyword">if</span>(Num[i]&gt;<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"0\n"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BZOJ-2125-最短路"><a href="#BZOJ-2125-最短路" class="headerlink" title="BZOJ 2125 最短路"></a>BZOJ 2125 最短路</h3><h4 id="题目链接-BZOJ2125"><a href="#题目链接-BZOJ2125" class="headerlink" title="题目链接: BZOJ2125"></a>题目链接: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2125" target="_blank" rel="noopener">BZOJ2125</a></h4><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意:"></a>题意:</h4><p>给一个仙人掌图,$q$次查询两点之间的最短路径</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解:"></a>题解:</h4><p>对仙人掌图构造圆方树,对于查询的两个点,若其$LCA$为圆点,则直接输出圆方树上的路径和即可,若其$LCA$为方点,则两个倍增到其方点表示的点双环上,再决定走哪侧更优即可.</p><p>注意构造圆方树时 如果一条边是圆圆边，那么就是原来的边权，如果是圆方边，那么边权等于环的根到那个圆点的最短路径长度.</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">8e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125;node;</span><br><span class="line">node d[MAXN];</span><br><span class="line"><span class="keyword">int</span> dfn[MAXN],low[MAXN];</span><br><span class="line"><span class="keyword">int</span> st[MAXN],tot;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt;vec[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt,num;</span><br><span class="line">ll sum[MAXN],Sum[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;p[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trajan_Bcc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;dfn[x]=low[x]=++cnt;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]&amp;&amp;dfn[x]&gt;dfn[j-&gt;t]&amp;&amp;j-&gt;t!=pre)&#123;</span><br><span class="line">    st[++tot]=j-&gt;v;</span><br><span class="line">    low[x]=min(low[x],dfn[j-&gt;t]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!vis[j-&gt;t])&#123;</span><br><span class="line">    st[++tot]=j-&gt;v;sum[j-&gt;t]=sum[x]+d[j-&gt;v].z;</span><br><span class="line">    trajan_Bcc(j-&gt;t,x);</span><br><span class="line">    low[x]=min(low[x],low[j-&gt;t]);</span><br><span class="line">    <span class="keyword">if</span>(low[j-&gt;t]&gt;=dfn[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(st[tot]!=j-&gt;v)&#123;</span><br><span class="line">    num++;<span class="keyword">int</span> y=st[tot--];</span><br><span class="line">    Sum[num-n]+=d[y].z;</span><br><span class="line">    <span class="keyword">if</span>(dfn[d[y].x]&gt;dfn[d[y].y])p[num-n].pb(d[y].x);</span><br><span class="line">    <span class="keyword">else</span> p[num-n].pb(d[y].y);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">y=st[tot--];Sum[num-n]+=d[y].z;</span><br><span class="line"><span class="keyword">if</span>(dfn[d[y].x]&lt;dfn[d[y].y])p[num-n].pb(d[y].x);</span><br><span class="line"><span class="keyword">else</span> p[num-n].pb(d[y].y);</span><br><span class="line"><span class="keyword">if</span>(y==j-&gt;v)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(p[num-n].begin(),p[num-n].end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;p[num-n].size();i++)&#123;</span><br><span class="line">ll t1=sum[p[num-n][i]]-sum[x];</span><br><span class="line">vec[num].pb(mp(p[num-n][i],min(t1,Sum[num-n]-t1)));</span><br><span class="line">    &#125;</span><br><span class="line">    vec[x].pb(mp(num,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=st[tot];tot--;</span><br><span class="line">    vec[x].pb(mp(j-&gt;t,d[y].z));</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fa[MAXN][<span class="number">21</span>],dep[MAXN],son[MAXN],Num[MAXN];</span><br><span class="line">ll sum1[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> deep)</span></span>&#123;</span><br><span class="line">    fa[x][<span class="number">0</span>]=pre;dep[x]=deep+<span class="number">1</span>;Num[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)fa[x][i]=fa[fa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vec[x][i].first==pre)<span class="keyword">continue</span>;</span><br><span class="line">sum1[vec[x][i].first]=sum1[x]+vec[x][i].second;</span><br><span class="line">dfs(vec[x][i].first,x,deep+<span class="number">1</span>);</span><br><span class="line">Num[x]+=Num[vec[x][i].first];</span><br><span class="line"><span class="keyword">if</span>(son[x]==<span class="number">-1</span>||Num[vec[x][i].first]&gt;Num[son[x]])son[x]=vec[x][i].first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tp[MAXN];</span><br><span class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> td)&#123;</span><br><span class="line">    tp[x]=td;</span><br><span class="line">    <span class="keyword">if</span>(son[x]!=<span class="number">-1</span>)_dfs(son[x],td);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)<span class="keyword">if</span>(vec[x][i].first!=fa[x][<span class="number">0</span>]&amp;&amp;vec[x][i].first!=son[x])_dfs(vec[x][i].first,vec[x][i].first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Tp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=dep[x]-dep[y];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[fa[x][i]]&gt;dep[y])x=fa[x][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xx=tp[x];<span class="keyword">int</span> yy=tp[y];</span><br><span class="line">    <span class="keyword">while</span>(xx!=yy)&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[xx]&lt;dep[yy])swap(xx,yy),swap(x,y);</span><br><span class="line">x=fa[xx][<span class="number">0</span>];xx=tp[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y])swap(x,y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pos</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>;<span class="keyword">int</span> r=p[y].size();<span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(dfn[p[y][mid<span class="number">-1</span>]]&gt;=dfn[x])ans=mid,r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();m=read();q=read();</span><br><span class="line">    inc(i,<span class="number">1</span>,m)d[i].x=read(),d[i].y=read(),d[i].z=read(),add(d[i].x,d[i].y,i),add(d[i].y,d[i].x,i);</span><br><span class="line">    num=n;</span><br><span class="line">    trajan_Bcc(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    inc(i,<span class="number">1</span>,num)son[i]=<span class="number">-1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    _dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">x=read();y=read();</span><br><span class="line"><span class="keyword">int</span> lca=Lca(x,y);</span><br><span class="line"><span class="keyword">if</span>(lca&lt;=n)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum1[x]+sum1[y]<span class="number">-2</span>*sum1[lca]);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xx=Tp(x,lca);<span class="keyword">int</span> yy=Tp(y,lca);</span><br><span class="line">    ll ans=sum1[x]-sum1[xx]+sum1[y]-sum1[yy];</span><br><span class="line">    <span class="keyword">int</span> t1=Pos(xx,lca-n);<span class="keyword">int</span> t2=Pos(yy,lca-n);</span><br><span class="line">    <span class="keyword">if</span>(t1&gt;t2)swap(t1,t2);</span><br><span class="line">    ll ans1=sum[p[lca-n][t2<span class="number">-1</span>]]-sum[p[lca-n][t1<span class="number">-1</span>]];</span><br><span class="line">    ans+=min(Sum[lca-n]-ans1,ans1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BZOJ-1023-SHOI2008-cactus仙人掌图"><a href="#BZOJ-1023-SHOI2008-cactus仙人掌图" class="headerlink" title="BZOJ 1023 [SHOI2008]cactus仙人掌图"></a>BZOJ 1023 [SHOI2008]cactus仙人掌图</h3><h4 id="题目链接-BZOJ1023"><a href="#题目链接-BZOJ1023" class="headerlink" title="题目链接:BZOJ1023"></a>题目链接:<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1023" target="_blank" rel="noopener">BZOJ1023</a></h4><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意:"></a>题意:</h4><p>求仙人掌图的直径</p><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解:"></a>题解:</h4><p>对仙人掌图构造圆方树,对于普通的树形结构求树的直径,我们考虑维护链的最大和次大值,做个树形DP即可,对于圆方树,我们对圆点和方点分开考虑,圆点仍然按照普通的树形DP,方点则类似于经典基环树求直径 不习惯写单调队列 所以码码码码线段树 查询区间最值</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NM=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dfn[MAXN],low[MAXN],n,m,sum[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;p[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt;vec[MAXN];</span><br><span class="line"><span class="keyword">int</span> st[MAXN],tot,cnt,num;</span><br><span class="line"><span class="keyword">int</span> Sum[MAXN];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;node;</span><br><span class="line">node que[NM];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)sum[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)vec[i].clear(),dfn[i]=low[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num-n;i++)p[i].clear(),Sum[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan_Bcc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    dfn[x]=low[x]=++cnt;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[j-&gt;t]&amp;&amp;dfn[j-&gt;t]&lt;dfn[x]&amp;&amp;j-&gt;t!=pre)&#123;</span><br><span class="line">    low[x]=min(low[x],dfn[j-&gt;t]);</span><br><span class="line">    st[++tot]=j-&gt;v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!dfn[j-&gt;t])&#123;</span><br><span class="line">    st[++tot]=j-&gt;v;sum[j-&gt;t]=sum[x]+<span class="number">1</span>;</span><br><span class="line">    tarjan_Bcc(j-&gt;t,x);</span><br><span class="line">    low[x]=min(low[x],low[j-&gt;t]);</span><br><span class="line">    <span class="keyword">if</span>(low[j-&gt;t]&gt;=dfn[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(st[tot]==j-&gt;v)vec[x].pb(mp(j-&gt;t,<span class="number">1</span>)),tot--;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    num++;p[num-n].clear();</span><br><span class="line">    <span class="keyword">int</span> y=st[tot--];</span><br><span class="line">    <span class="keyword">if</span>(dfn[que[y].x]&gt;dfn[que[y].y])p[num-n].pb(que[y].x);</span><br><span class="line">    <span class="keyword">else</span> p[num-n].pb(que[y].y);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">y=st[tot--];</span><br><span class="line"><span class="keyword">if</span>(dfn[que[y].x]&gt;dfn[que[y].y])p[num-n].pb(que[y].y);</span><br><span class="line"><span class="keyword">else</span> p[num-n].pb(que[y].x);</span><br><span class="line"><span class="keyword">if</span>(y==j-&gt;v)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(p[num-n].begin(),p[num-n].end());</span><br><span class="line">    Sum[num-n]=p[num-n].size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;p[num-n].size();i++)&#123;</span><br><span class="line"><span class="keyword">int</span> c=sum[p[num-n][i]]-sum[x];</span><br><span class="line">vec[num].pb(mp(p[num-n][i],min(c,Sum[num-n]-c)));</span><br><span class="line">    &#125;</span><br><span class="line">    vec[x].pb(mp(num,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxx[MAXN],ans[MAXN];</span><br><span class="line"><span class="keyword">int</span> rt,cntk;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,maxx,maxx1;</span><br><span class="line">&#125;Node;</span><br><span class="line">Node d[MAXN*<span class="number">21</span>];</span><br><span class="line"><span class="keyword">int</span> k1,k2;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x)x=++cntk,d[x].l=d[x].r=<span class="number">0</span>,d[x].maxx=d[x].maxx1=-inf;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;d[x].maxx=k1-k2;d[x].maxx1=k1+k2;<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(t&lt;=mid)update(d[x].l,l,mid,t);</span><br><span class="line">    <span class="keyword">else</span> update(d[x].r,mid+<span class="number">1</span>,r,t);</span><br><span class="line">    d[x].maxx=d[x].maxx1=-inf;</span><br><span class="line">    <span class="keyword">if</span>(d[x].l)d[x].maxx=max(d[x].maxx,d[d[x].l].maxx),d[x].maxx1=max(d[x].maxx1,d[d[x].l].maxx1);</span><br><span class="line">    <span class="keyword">if</span>(d[x].r)d[x].maxx=max(d[x].maxx,d[d[x].r].maxx),d[x].maxx1=max(d[x].maxx1,d[d[x].r].maxx1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans1;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;ans1=max(ans1,d[x].maxx);<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)query1(d[x].l,l,mid,ql,qr);</span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid)query1(d[x].r,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;ans1=max(ans1,d[x].maxx1);<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)query2(d[x].l,l,mid,ql,qr);</span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid)query2(d[x].r,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vec[x][i].first==pre)<span class="keyword">continue</span>;</span><br><span class="line">dfs(vec[x][i].first,x);</span><br><span class="line">maxx[x]=max(maxx[x],maxx[vec[x][i].first]+vec[x][i].second);</span><br><span class="line">ans[x]=max(ans[x],ans[vec[x][i].first]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=n)&#123;</span><br><span class="line"><span class="keyword">int</span> maxx1=<span class="number">0</span>,maxx2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec[x][i].first==pre)<span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">int</span> y=maxx[vec[x][i].first]+vec[x][i].second;</span><br><span class="line">    <span class="keyword">if</span>(y&gt;maxx1)maxx2=maxx1,maxx1=y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(y&gt;maxx2)maxx2=y;</span><br><span class="line">&#125;</span><br><span class="line">ans[x]=max(ans[x],maxx1+maxx2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">rt=<span class="number">0</span>;cntk=<span class="number">0</span>;<span class="keyword">int</span> sz=p[x-n].size();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p[x-n].size();i++)&#123;</span><br><span class="line">    k1=maxx[p[x-n][i]];k2=i;</span><br><span class="line">    update(rt,<span class="number">1</span>,<span class="number">2</span>*sz,i+<span class="number">1</span>);</span><br><span class="line">    k1=maxx[p[x-n][i]];k2=i+sz;</span><br><span class="line">    update(rt,<span class="number">1</span>,<span class="number">2</span>*sz,<span class="number">1</span>+i+sz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p[x-n].size();i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> y=sz+i+<span class="number">1</span>;<span class="keyword">int</span> t=sz/<span class="number">2</span>;</span><br><span class="line">    ans1=-inf;query1(rt,<span class="number">1</span>,<span class="number">2</span>*sz,y-t,y<span class="number">-1</span>);</span><br><span class="line">    ans[x]=max(ans[x],maxx[p[x-n][i]]+ans1+y<span class="number">-1</span>);</span><br><span class="line">    ans1=-inf;query1(rt,<span class="number">1</span>,<span class="number">2</span>*sz,y-sz+<span class="number">1</span>,y-t<span class="number">-1</span>);</span><br><span class="line">    ans[x]=max(ans[x],maxx[p[x-n][i]]-y+<span class="number">1</span>+ans1+sz);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));o=e;</span><br><span class="line">    <span class="keyword">int</span> cnt1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x,y,k;</span><br><span class="line">    num=n;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">k=read();x=read();</span><br><span class="line">inc(j,<span class="number">2</span>,k)&#123;</span><br><span class="line">    y=read();</span><br><span class="line">    cnt1++;que[cnt1].x=x;que[cnt1].y=y;</span><br><span class="line">    add(x,y,cnt1);add(y,x,cnt1);</span><br><span class="line">    x=y;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tarjan_Bcc(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    inc(i,<span class="number">1</span>,num)maxx[i]=ans[i]=<span class="number">0</span>;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[<span class="number">1</span>]);</span><br><span class="line">    init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BZOJ-4316-小C的独立集"><a href="#BZOJ-4316-小C的独立集" class="headerlink" title="BZOJ 4316 小C的独立集"></a>BZOJ 4316 小C的独立集</h3><h4 id="题目链接-BZOJ4316"><a href="#题目链接-BZOJ4316" class="headerlink" title="题目链接: BZOJ4316"></a>题目链接: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4316" target="_blank" rel="noopener">BZOJ4316</a></h4><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意:"></a>题意:</h4><p>求仙人掌图中的最大独立集(在无向图中选出若干个点，这些点互相没有边连接，并使取出的点尽量多)</p><h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解:"></a>题解:</h4><p>将仙人掌图转化成圆方树,对于每个点做一个0/1DP,还是对于园方点分情况讨论,对于圆点做普通树形DP即可,对于方点,其$dp[0]$表示其父亲节点不被选取时点的最多个数,$dp[1]$表示其父亲节点被选取时点的最多个数,分类讨论转移下即可</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;node;</span><br><span class="line">node que[MAXN];</span><br><span class="line"><span class="keyword">int</span> dfn[MAXN],low[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[MAXN],p[MAXN];</span><br><span class="line"><span class="keyword">int</span> st[MAXN],tot,cnt,num;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan_Bcc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    dfn[x]=low[x]=++cnt;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[j-&gt;t]&amp;&amp;dfn[j-&gt;t]&lt;dfn[x]&amp;&amp;j-&gt;t!=pre)&#123;</span><br><span class="line">    low[x]=min(low[x],dfn[j-&gt;t]);</span><br><span class="line">    st[++tot]=j-&gt;v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!dfn[j-&gt;t])&#123;</span><br><span class="line">    st[++tot]=j-&gt;v;</span><br><span class="line">    tarjan_Bcc(j-&gt;t,x);</span><br><span class="line">    low[x]=min(low[x],low[j-&gt;t]);</span><br><span class="line">    <span class="keyword">if</span>(low[j-&gt;t]&gt;=dfn[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(st[tot]==j-&gt;v)vec[j-&gt;t].pb(x),vec[x].pb(j-&gt;t),tot--;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    num++;<span class="keyword">int</span> y=st[tot--];</span><br><span class="line">    <span class="keyword">if</span>(dfn[que[y].x]&gt;dfn[que[y].y])p[num-n].pb(que[y].x);</span><br><span class="line">    <span class="keyword">else</span> p[num-n].pb(que[y].y);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">y=st[tot--];</span><br><span class="line"><span class="keyword">if</span>(dfn[que[y].x]&lt;dfn[que[y].y])p[num-n].pb(que[y].x);</span><br><span class="line"><span class="keyword">else</span> p[num-n].pb(que[y].y);</span><br><span class="line"><span class="keyword">if</span>(j-&gt;v==y)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p[num-n].size();i++)&#123;</span><br><span class="line">vec[num].pb(p[num-n][i]);</span><br><span class="line">vec[p[num-n][i]].pb(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN][<span class="number">2</span>],dp1[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vec[x][i]==pre)<span class="keyword">continue</span>;</span><br><span class="line">dfs(vec[x][i],x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=n)&#123;</span><br><span class="line"><span class="keyword">int</span> maxx1=<span class="number">0</span>,maxx2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec[x][i]==pre)<span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">int</span> y=vec[x][i];</span><br><span class="line">    <span class="keyword">if</span>(y&lt;=n)maxx1+=max(dp[y][<span class="number">0</span>],dp[y][<span class="number">1</span>]),maxx2+=dp[y][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span> maxx1+=dp[y][<span class="number">0</span>],maxx2+=dp[y][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">dp[x][<span class="number">0</span>]=maxx1;dp[x][<span class="number">1</span>]=maxx2+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> sz=p[x-n].size();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sz;i++)p[x-n].pb(p[x-n][i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p[x-n].size();i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x-n][i]!=pre)<span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;i+sz;j++)&#123;</span><br><span class="line">dp1[p[x-n][j]][<span class="number">0</span>]=dp[p[x-n][j]][<span class="number">0</span>]+max(dp1[p[x-n][j<span class="number">-1</span>]][<span class="number">0</span>],dp1[p[x-n][j<span class="number">-1</span>]][<span class="number">1</span>]);</span><br><span class="line">dp1[p[x-n][j]][<span class="number">1</span>]=dp[p[x-n][j]][<span class="number">1</span>]+dp1[p[x-n][j<span class="number">-1</span>]][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[x][<span class="number">0</span>]=max(dp1[p[x-n][i+sz<span class="number">-1</span>]][<span class="number">0</span>],dp1[p[x-n][i+sz<span class="number">-1</span>]][<span class="number">1</span>]);</span><br><span class="line">    dp[p[x-n][i+<span class="number">1</span>]][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;i+sz;j++)&#123;</span><br><span class="line">dp[p[x-n][j]][<span class="number">0</span>]=dp[p[x-n][j]][<span class="number">0</span>]+max(dp[p[x-n][j<span class="number">-1</span>]][<span class="number">0</span>],dp[p[x-n][j<span class="number">-1</span>]][<span class="number">1</span>]);</span><br><span class="line">dp[p[x-n][j]][<span class="number">1</span>]=dp[p[x-n][j]][<span class="number">1</span>]+dp[p[x-n][j<span class="number">-1</span>]][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[x][<span class="number">1</span>]=dp[p[x-n][i+sz<span class="number">-1</span>]][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">que[i].x=read();que[i].y=read();</span><br><span class="line">add(que[i].x,que[i].y,i);</span><br><span class="line">add(que[i].y,que[i].x,i);</span><br><span class="line">    &#125;</span><br><span class="line">    num=n;</span><br><span class="line">    tarjan_Bcc(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(dp[<span class="number">1</span>][<span class="number">0</span>],dp[<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CODEFORCES-487E-Tourists"><a href="#CODEFORCES-487E-Tourists" class="headerlink" title="CODEFORCES 487E Tourists"></a>CODEFORCES 487E Tourists</h3><h4 id="题目链接-cf487E"><a href="#题目链接-cf487E" class="headerlink" title="题目链接: cf487E"></a>题目链接: <a href="https://codeforces.com/contest/487/problem/E" target="_blank" rel="noopener">cf487E</a></h4><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意:"></a>题意:</h4><p>给一个连通的无向图,有点权.要求支持两种操作: 查询x,y简单路径上的最小点权;修改x的点权为w;</p><h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解:"></a>题解:</h4><p>一般而言缩环的姿势有三种:点双,边双,联通分量 这个题我们考虑点双缩环,至于为什么,读者可以从点双的性质出发即可.我们类似圆方树,对于每个点双分量用一个方点代替,其他点以菊花图的形式链接方点,因为可能存在一些点存在多个点双分量,这样修改时复杂度就会退化,那么我们这个方点仅代表其儿子节点的最小值,再查询时,若$LCA$是方点,还需要与其$LCA$的父亲进行比较,修改的话,用$multiset$来维护每个方点对应的最小值.然后问题就成了,在树上查询一条链的最小点权.树链剖分+线段树模板题</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;node;</span><br><span class="line">node que[MAXN];</span><br><span class="line"><span class="keyword">int</span> dfn[MAXN],low[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[MAXN],p[MAXN];</span><br><span class="line"><span class="keyword">int</span> num,tot,cnt,st[MAXN],bcc_pos[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan_Bcc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    dfn[x]=low[x]=++cnt;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[j-&gt;t]&amp;&amp;dfn[j-&gt;t]&lt;dfn[x]&amp;&amp;j-&gt;t!=pre)&#123;</span><br><span class="line">    low[x]=min(low[x],dfn[j-&gt;t]);</span><br><span class="line">    st[++tot]=j-&gt;v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!dfn[j-&gt;t])&#123;</span><br><span class="line">    st[++tot]=j-&gt;v;</span><br><span class="line">    tarjan_Bcc(j-&gt;t,x);</span><br><span class="line">    low[x]=min(low[x],low[j-&gt;t]);</span><br><span class="line">    <span class="keyword">if</span>(low[j-&gt;t]&gt;=dfn[x])&#123;</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> y=st[tot--];</span><br><span class="line">    <span class="keyword">if</span>(bcc_pos[que[y].x]!=num)p[num-n].pb(que[y].x),bcc_pos[que[y].x]=num;</span><br><span class="line">    <span class="keyword">if</span>(bcc_pos[que[y].y]!=num)p[num-n].pb(que[y].y),bcc_pos[que[y].y]=num;</span><br><span class="line">    <span class="keyword">if</span>(y==j-&gt;v)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p[num-n].size();i++)&#123;</span><br><span class="line">    vec[num].pb(p[num-n][i]);</span><br><span class="line">    vec[p[num-n][i]].pb(num);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;s[MAXN];</span><br><span class="line"><span class="keyword">int</span> fa[MAXN],son[MAXN],Num[MAXN],dep[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> deep)</span></span>&#123;</span><br><span class="line">    fa[x]=pre;Num[x]=<span class="number">1</span>;dep[x]=deep+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vec[x][i]==pre)<span class="keyword">continue</span>;</span><br><span class="line">dfs(vec[x][i],x,deep+<span class="number">1</span>);</span><br><span class="line">Num[x]+=Num[vec[x][i]];</span><br><span class="line"><span class="keyword">if</span>(x&gt;n)s[x-n].insert(a[vec[x][i]]);</span><br><span class="line"><span class="keyword">if</span>(son[x]==<span class="number">-1</span>||Num[son[x]]&lt;Num[vec[x][i]])son[x]=vec[x][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;n)a[x]=(*s[x-n].begin());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos[MAXN],Fpos[MAXN],tp[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt1;</span><br><span class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> td)&#123;</span><br><span class="line">    pos[x]=++cnt1;Fpos[pos[x]]=x;tp[x]=td;</span><br><span class="line">    <span class="keyword">if</span>(son[x]!=<span class="number">-1</span>)_dfs(son[x],td);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vec[x][i]!=fa[x]&amp;&amp;vec[x][i]!=son[x])_dfs(vec[x][i],vec[x][i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> minn[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">built</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;minn[x]=a[Fpos[l]];<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    built(x&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    built(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    minn[x]=min(minn[x&lt;&lt;<span class="number">1</span>],minn[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;minn[x]=k;<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(t&lt;=mid)update(x&lt;&lt;<span class="number">1</span>,l,mid,t,k);</span><br><span class="line">    <span class="keyword">else</span> update(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,t,k);</span><br><span class="line">    minn[x]=min(minn[x&lt;&lt;<span class="number">1</span>],minn[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;ans=min(ans,minn[x]);<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)query(x&lt;&lt;<span class="number">1</span>,l,mid,ql,qr);</span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid)query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xx=tp[x];<span class="keyword">int</span> yy=tp[y];</span><br><span class="line">    ans=inf;</span><br><span class="line">    <span class="keyword">while</span>(xx!=yy)&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[xx]&lt;dep[yy])swap(xx,yy),swap(x,y);</span><br><span class="line">query(<span class="number">1</span>,<span class="number">1</span>,num,pos[xx],pos[x]);</span><br><span class="line">x=fa[xx];xx=tp[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y])swap(x,y);</span><br><span class="line">    query(<span class="number">1</span>,<span class="number">1</span>,num,pos[x],pos[y]);</span><br><span class="line">    <span class="keyword">if</span>(x&gt;n)&#123;</span><br><span class="line">ans=min(ans,a[fa[x]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();m=read();q=read();</span><br><span class="line">    inc(i,<span class="number">1</span>,n)a[i]=read();</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">que[i].x=read();que[i].y=read();</span><br><span class="line">add(que[i].x,que[i].y,i);</span><br><span class="line">add(que[i].y,que[i].x,i);</span><br><span class="line">    &#125;</span><br><span class="line">    num=n;</span><br><span class="line">    tarjan_Bcc(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    inc(i,<span class="number">1</span>,num)son[i]=<span class="number">-1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);_dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    built(<span class="number">1</span>,<span class="number">1</span>,num);</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line"><span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'C'</span>)&#123;</span><br><span class="line">    x=read();y=read();</span><br><span class="line">    <span class="keyword">if</span>(fa[x]&gt;n)&#123;</span><br><span class="line">s[fa[x]-n].erase(s[fa[x]-n].lower_bound(a[x]));</span><br><span class="line">s[fa[x]-n].insert(y);</span><br><span class="line">a[fa[x]]=(*s[fa[x]-n].begin());</span><br><span class="line">update(<span class="number">1</span>,<span class="number">1</span>,num,pos[fa[x]],a[fa[x]]);</span><br><span class="line">a[x]=y;</span><br><span class="line">update(<span class="number">1</span>,<span class="number">1</span>,num,pos[x],a[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> a[x]=y,update(<span class="number">1</span>,<span class="number">1</span>,num,pos[x],a[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    x=read();y=read();</span><br><span class="line">    solve(x,y);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;圆方树是一种数据结构  用来解决静态仙人掌问题&lt;/p&gt;
&lt;p&gt;这个东西原始的出处应该是paper《Maintaining bridge-co
      
    
    </summary>
    
      <category term="图论" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="dp" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/dp/"/>
    
    
      <category term="树链剖分" scheme="http://yoursite.com/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
      <category term="点双分量" scheme="http://yoursite.com/tags/%E7%82%B9%E5%8F%8C%E5%88%86%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>仙人掌图的判定</title>
    <link href="http://yoursite.com/2019/04/15/%E4%BB%99%E4%BA%BA%E6%8E%8C%E5%9B%BE%E7%9A%84%E5%88%A4%E5%AE%9A/"/>
    <id>http://yoursite.com/2019/04/15/仙人掌图的判定/</id>
    <published>2019-04-15T08:20:23.000Z</published>
    <updated>2019-04-15T08:38:44.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="无向图上仙人掌图的判定"><a href="#无向图上仙人掌图的判定" class="headerlink" title="无向图上仙人掌图的判定"></a>无向图上仙人掌图的判定</h2><p>例题<a href="https://www.luogu.org/problemnew/show/P4129" target="_blank" rel="noopener">洛谷P4129</a></p><p>通过$tarjan$ 求出所有的点双分量</p><p>根据仙人掌图的性质 我们对于包含非树边的点双分量 判断是否是简单环即可(通过判环的点数是否等于边数)</p><p>注意仙人掌图的前提 图是联通的</p><p>然后注意这题 统计答案会很大 所以需要写高精度(黄大佬的高精板子真的快啊)</p><p>复杂度 $O(n+m)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仙人掌是指无向连通图中,每一条边最多出现在一个简单环上</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NM=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Huge</span>&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">10001</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> BASE=<span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">int</span> Num[MAXN];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(Num,<span class="number">0</span>,<span class="keyword">sizeof</span>(Num));</span><br><span class="line">        <span class="keyword">int</span> rlen=s.size();</span><br><span class="line">        len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i=rlen<span class="number">-5</span>;i&gt;=<span class="number">0</span>;i-=<span class="number">4</span>)&#123;</span><br><span class="line">            Num[len]=Num[len]*<span class="number">10</span>+s[i+<span class="number">1</span>]-<span class="string">'0'</span>;</span><br><span class="line">            Num[len]=Num[len]*<span class="number">10</span>+s[i+<span class="number">2</span>]-<span class="string">'0'</span>;</span><br><span class="line">            Num[len]=Num[len]*<span class="number">10</span>+s[i+<span class="number">3</span>]-<span class="string">'0'</span>;</span><br><span class="line">            Num[len]=Num[len]*<span class="number">10</span>+s[i+<span class="number">4</span>]-<span class="string">'0'</span>;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i&lt;<span class="number">0</span>) i+=<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">            Num[len]=Num[len]*<span class="number">10</span>+s[j]-<span class="string">'0'</span>;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;i, Huge &amp;v)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        i&gt;&gt;s;</span><br><span class="line">        v.init(s);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;o, Huge &amp;v)&#123;</span><br><span class="line">        <span class="keyword">if</span> (v.len==<span class="number">0</span> &amp;&amp; v.Num[<span class="number">0</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            o&lt;&lt;<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">        o&lt;&lt;v.Num[v.len<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=v.len<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            o&lt;&lt;setw(<span class="number">4</span>)&lt;&lt;setfill(<span class="string">'0'</span>)&lt;&lt;v.Num[i];</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>+=(<span class="keyword">const</span> Huge &amp;v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> nlen=max(v.len,len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nlen;i++)&#123;</span><br><span class="line">            Num[i]+=v.Num[i];</span><br><span class="line">            <span class="keyword">if</span> (Num[i]&gt;=BASE)&#123;</span><br><span class="line">                Num[i]-=BASE;</span><br><span class="line">                Num[i+<span class="number">1</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Num[nlen]!=<span class="number">0</span>) nlen++;</span><br><span class="line">        len=nlen;</span><br><span class="line">        <span class="comment">//return (*this);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>-=(<span class="keyword">const</span> Huge &amp;v)&#123;</span><br><span class="line">        <span class="keyword">int</span> nlen=max(v.len,len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nlen;i++)&#123;</span><br><span class="line">            Num[i]-=v.Num[i];</span><br><span class="line">            <span class="keyword">if</span> (Num[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                Num[i]+=BASE;</span><br><span class="line">                Num[i+<span class="number">1</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (Num[nlen]==<span class="number">0</span> &amp;&amp; nlen&gt;=<span class="number">0</span>) nlen--;</span><br><span class="line">        len=nlen+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//return (*this);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>*=(<span class="keyword">const</span> Huge &amp;v)&#123;</span><br><span class="line">        Huge c;</span><br><span class="line">        c.init(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;v.len;j++)&#123;</span><br><span class="line">                c.Num[i+j]+=Num[i]*v.Num[j];</span><br><span class="line">                <span class="keyword">if</span> (c.Num[i+j]&gt;=BASE)&#123;</span><br><span class="line">                    c.Num[i+j+<span class="number">1</span>]+=c.Num[i+j]/BASE;</span><br><span class="line">                    c.Num[i+j]%=BASE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        c.len=len+v.len;</span><br><span class="line">        <span class="keyword">while</span> (c.Num[c.len]==<span class="number">0</span> &amp;&amp; c.len&gt;=<span class="number">0</span>) c.len--;</span><br><span class="line">        len=c.len+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) Num[i]=c.Num[i];</span><br><span class="line">        <span class="comment">//return (*this);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Huge &amp;v)&#123;</span><br><span class="line">        <span class="keyword">if</span> (len!=v.len) <span class="keyword">return</span> len&lt;v.len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            <span class="keyword">if</span> (Num[i]!=v.Num[i]) <span class="keyword">return</span> Num[i]&lt;v.Num[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> low[MAXN],dfn[MAXN],tarjan_bcc[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN],pis[NM];</span><br><span class="line"><span class="keyword">int</span> Num[NM];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[NM];</span><br><span class="line"><span class="keyword">int</span> st[NM],tot,cnt,num;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;node;</span><br><span class="line">node d[NM];</span><br><span class="line">Huge ans,ans1;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">trans</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> y;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line"><span class="keyword">int</span> t1=x%<span class="number">10</span>;x-=t1;x/=<span class="number">10</span>;</span><br><span class="line">y.push_back((<span class="keyword">char</span>)(t1+<span class="string">'0'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(y.begin(),y.end());</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan_Bcc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;low[x]=dfn[x]=++cnt;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]&amp;&amp;dfn[j-&gt;t]&lt;dfn[x]&amp;&amp;j-&gt;t!=pre)&#123;</span><br><span class="line">    st[++tot]=j-&gt;v;pis[j-&gt;v]=<span class="number">1</span>;</span><br><span class="line">    low[x]=min(low[x],dfn[j-&gt;t]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!vis[j-&gt;t])&#123;</span><br><span class="line">    st[++tot]=j-&gt;v;</span><br><span class="line">    tarjan_Bcc(j-&gt;t,x);</span><br><span class="line">    low[x]=min(low[x],low[j-&gt;t]);</span><br><span class="line">    <span class="keyword">if</span>(low[j-&gt;t]&gt;=dfn[x])&#123;</span><br><span class="line">num++;vec[num].clear();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> y=st[tot--];</span><br><span class="line">    <span class="keyword">if</span>(pis[y])Num[num]++;</span><br><span class="line">    <span class="keyword">if</span>(tarjan_bcc[d[y].x]!=num)&#123;</span><br><span class="line">vec[num].pb(d[y].x);</span><br><span class="line">tarjan_bcc[d[y].x]=num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tarjan_bcc[d[y].y]!=num)&#123;</span><br><span class="line">vec[num].pb(d[y].y);</span><br><span class="line">tarjan_bcc[d[y].y]=num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j-&gt;v==y)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Num[num]==<span class="number">1</span>)ans1.init(trans(vec[num].size()+<span class="number">1</span>)),ans*=ans1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt1=<span class="number">0</span>;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    ans.init(trans(<span class="number">1</span>));</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">int</span> k=read();<span class="keyword">int</span> last=read();</span><br><span class="line">inc(j,<span class="number">2</span>,k)&#123;</span><br><span class="line">    <span class="keyword">int</span> x=read();cnt1++;</span><br><span class="line">    d[cnt1].x=x;d[cnt1].y=last;</span><br><span class="line">    add(x,last,cnt1);</span><br><span class="line">    add(last,x,cnt1);</span><br><span class="line">    last=x;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt2=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)<span class="keyword">if</span>(!vis[i])tarjan_Bcc(i,<span class="number">0</span>),cnt2++;</span><br><span class="line">    <span class="keyword">if</span>(cnt2&gt;<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"0\n"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,num)<span class="keyword">if</span>(Num[i]&gt;<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"0\n"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有向图上仙人掌图的判断"><a href="#有向图上仙人掌图的判断" class="headerlink" title="有向图上仙人掌图的判断"></a>有向图上仙人掌图的判断</h2><p>例题<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3594" target="_blank" rel="noopener">hdu3594</a></p><p>参考博客<a href="https://www.cnblogs.com/AOQNRMGYXLMV/p/5353502.html" target="_blank" rel="noopener">仙人掌</a></p><p>首先我们通过$tarjan$ 判断图的强连通性</p><p>然后构造$dfs$树  通过分析 如果包含交叉边(两个端点不在同一个子树中) 前向边(出点是入点的祖先)则一定不满足仙人掌图</p><p>然后类似于树上差分的做法 判断一个边是否被多次覆盖即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仙人掌是指无向连通图中,每一条边最多出现在一个简单环上</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NM=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dfn[MAXN],low[MAXN],tot;</span><br><span class="line"><span class="keyword">bool</span> kis[MAXN],Kis[MAXN];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="keyword">int</span> Num;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan_scc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    dfn[x]=low[x]=++tot;</span><br><span class="line">    s.push(x);kis[x]=<span class="number">1</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[j-&gt;t])&#123;</span><br><span class="line">    tarjan_scc(j-&gt;t);</span><br><span class="line">    low[x]=min(low[x],low[j-&gt;t]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(kis[j-&gt;t])&#123;</span><br><span class="line">    low[x]=min(low[x],dfn[j-&gt;t]);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(low[x]==dfn[x])&#123;</span><br><span class="line">Num++;Kis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> y=s.top();</span><br><span class="line">    <span class="keyword">if</span>(y!=x)s.pop(),kis[y]=<span class="number">0</span>,Kis[y]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;node;</span><br><span class="line">node d[MAXN];</span><br><span class="line"><span class="keyword">int</span> fa[MAXN],dep[MAXN],num[MAXN],son[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN],pis[NM];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt,p[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> deep)</span></span>&#123;</span><br><span class="line">    fa[x]=pre;dep[x]=deep+<span class="number">1</span>;num[x]=<span class="number">1</span>;vis[x]=<span class="number">1</span>;</span><br><span class="line">    p[x]=++cnt;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">pis[j-&gt;v]=<span class="number">1</span>;vec[x].pb(j-&gt;t);</span><br><span class="line">dfs(j-&gt;t,x,deep+<span class="number">1</span>);</span><br><span class="line">num[x]+=num[j-&gt;t];</span><br><span class="line"><span class="keyword">if</span>(son[x]==<span class="number">-1</span>||num[son[x]]&lt;num[j-&gt;t])son[x]=j-&gt;t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tp[MAXN];</span><br><span class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> td)&#123;</span><br><span class="line">    tp[x]=td;</span><br><span class="line">    <span class="keyword">if</span>(son[x]!=<span class="number">-1</span>)_dfs(son[x],td);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)<span class="keyword">if</span>(vec[x][i]!=fa[x]&amp;&amp;vec[x][i]!=son[x])_dfs(vec[x][i],vec[x][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xx=tp[x];<span class="keyword">int</span> yy=tp[y];</span><br><span class="line">    <span class="keyword">while</span>(xx!=yy)&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[xx]&lt;dep[yy])swap(xx,yy),swap(x,y);</span><br><span class="line">x=fa[xx];xx=tp[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y])swap(x,y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum[MAXN];</span><br><span class="line"><span class="keyword">void</span> __dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vec[x][i]==pre)<span class="keyword">continue</span>;</span><br><span class="line">__dfs(vec[x][i],x);</span><br><span class="line">sum[x]+=sum[vec[x][i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _=read();</span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line"><span class="keyword">int</span> n=read();cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));o=e;</span><br><span class="line"><span class="built_in">memset</span>(Kis,<span class="number">0</span>,<span class="keyword">sizeof</span>(Kis));</span><br><span class="line"><span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span>(dfn));</span><br><span class="line">inc(i,<span class="number">1</span>,n)sum[i]=vis[i]=<span class="number">0</span>,vec[i].clear(),son[i]=<span class="number">-1</span>;</span><br><span class="line">Num=tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x,y;<span class="keyword">int</span> cnt1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x&amp;&amp;!y)<span class="keyword">break</span>;</span><br><span class="line">    ++cnt1;d[cnt1].x=x+<span class="number">1</span>;d[cnt1].y=y+<span class="number">1</span>;</span><br><span class="line">    add(x+<span class="number">1</span>,y+<span class="number">1</span>,cnt1);</span><br><span class="line">&#125;</span><br><span class="line">inc(i,<span class="number">1</span>,n)<span class="keyword">if</span>(!dfn[i])tarjan_scc(i);</span><br><span class="line">inc(i,<span class="number">1</span>,cnt1)pis[i]=<span class="number">0</span>;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">_dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">inc(i,<span class="number">1</span>,cnt1)&#123;</span><br><span class="line">    <span class="keyword">if</span>(pis[i])<span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">int</span> lca=Lca(d[i].x,d[i].y);</span><br><span class="line">    <span class="keyword">if</span>(lca==d[i].x)&#123;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(lca!=d[i].y)&#123;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">    sum[d[i].x]++;sum[d[i].y]--;</span><br><span class="line">&#125;</span><br><span class="line">inc(i,<span class="number">1</span>,n)<span class="keyword">if</span>(!Kis[i])&#123;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(Num&gt;=<span class="number">2</span>)&#123;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">__dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">inc(i,<span class="number">2</span>,n)<span class="keyword">if</span>(sum[i]&gt;<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)<span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;无向图上仙人掌图的判定&quot;&gt;&lt;a href=&quot;#无向图上仙人掌图的判定&quot; class=&quot;headerlink&quot; title=&quot;无向图上仙人掌图的判定&quot;&gt;&lt;/a&gt;无向图上仙人掌图的判定&lt;/h2&gt;&lt;p&gt;例题&lt;a href=&quot;https://www.luogu.org/p
      
    
    </summary>
    
      <category term="图论" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="点双分量" scheme="http://yoursite.com/tags/%E7%82%B9%E5%8F%8C%E5%88%86%E9%87%8F/"/>
    
      <category term="强联通分量" scheme="http://yoursite.com/tags/%E5%BC%BA%E8%81%94%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>cf504E(树链剖分+SA)</title>
    <link href="http://yoursite.com/2019/04/10/cf504E-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86-SA/"/>
    <id>http://yoursite.com/2019/04/10/cf504E-树链剖分-SA/</id>
    <published>2019-04-10T13:19:09.000Z</published>
    <updated>2019-04-10T13:24:20.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你一颗$n$个节点的树 每个节点上都有一个字符$c$ q次查询两条路径形成的字符串的最长公共前缀</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>比较直观的做法是</p><p>树链剖分 每个点对对应$logn$个区间 然后二分答案 用$hash$取$check$</p><p>复杂度$O(qlog^2n)$ 不能通过</p><p>我们考虑对两段路径的$logn$个区间 类似于区间合并的做法 转化成求两个重链上子区间的$lcp$</p><p>那么我们将所有重链正反分别加入到字符串中 然后求一遍$SA$</p><p>复杂度$O(nlogn+qlong)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=head[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*head[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=head[x];head[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> str[MAXN];</span><br><span class="line"><span class="keyword">int</span> fa[MAXN],dep[MAXN],son[MAXN],num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> deep)</span></span>&#123;</span><br><span class="line">    fa[x]=pre;dep[x]=deep+<span class="number">1</span>;num[x]=<span class="number">1</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">dfs(j-&gt;t,x,deep+<span class="number">1</span>);</span><br><span class="line">num[x]+=num[j-&gt;t];</span><br><span class="line"><span class="keyword">if</span>(son[x]==<span class="number">-1</span>||num[son[x]]&lt;num[j-&gt;t])son[x]=j-&gt;t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> p[MAXN],fp[MAXN],tp[MAXN],cnt;</span><br><span class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> td)&#123;</span><br><span class="line">    p[x]=++cnt;fp[p[x]]=x;tp[x]=td;</span><br><span class="line">    <span class="keyword">if</span>(son[x]!=<span class="number">-1</span>)_dfs(son[x],td);</span><br><span class="line">    link(x)<span class="keyword">if</span>(j-&gt;t!=fa[x]&amp;&amp;j-&gt;t!=son[x])_dfs(j-&gt;t,j-&gt;t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> s[MAXN],s1[MAXN];</span><br><span class="line"><span class="keyword">int</span> len,tot;</span><br><span class="line"><span class="keyword">int</span> End[MAXN],Begin[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    len=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">if</span>(tp[i]!=i)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> t=i;tot=<span class="number">0</span>;Begin[i]=len;</span><br><span class="line"><span class="keyword">while</span>(t!=<span class="number">-1</span>)&#123;</span><br><span class="line">    s1[tot++]=str[t];</span><br><span class="line">    t=son[t];</span><br><span class="line">&#125;</span><br><span class="line">inc(i,<span class="number">0</span>,tot<span class="number">-1</span>)s[len++]=s1[i];</span><br><span class="line">s[len++]=<span class="string">'$'</span>;</span><br><span class="line">dec(i,tot<span class="number">-1</span>,<span class="number">0</span>)s[len++]=s1[i];</span><br><span class="line">End[i]=len<span class="number">-1</span>;</span><br><span class="line">s[len++]=<span class="string">'$'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s[len]=<span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sa[MAXN],txt[MAXN],t1[MAXN],t2[MAXN],rank1[MAXN],rank2[MAXN],Td[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> f[],<span class="keyword">int</span> t,<span class="keyword">int</span> w,<span class="keyword">int</span> k)</span></span>&#123;<span class="keyword">return</span> f[t]==f[w]&amp;&amp;f[t+k]==f[w+k];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">256</span>;</span><br><span class="line">    <span class="keyword">int</span> *rank1=t1;<span class="keyword">int</span> *Td=t2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)txt[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)rank1[i]=s[i],txt[s[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)txt[i]+=txt[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)sa[--txt[s[i]]]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=len;k&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len-k;i&lt;len;i++)Td[num++]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="keyword">if</span>(sa[i]&gt;=k)Td[num++]=sa[i]-k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)txt[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)txt[rank1[i]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)txt[i]+=txt[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)sa[--txt[rank1[Td[i]]]]=Td[i];</span><br><span class="line">swap(rank1,Td);rank1[sa[<span class="number">0</span>]]=<span class="number">0</span>;</span><br><span class="line">num=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)rank1[sa[i]]=cmp(Td,sa[i],sa[i<span class="number">-1</span>],k)?num<span class="number">-1</span>:num++;</span><br><span class="line"><span class="keyword">if</span>(num&gt;=len)<span class="keyword">break</span>;</span><br><span class="line">m=num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)rank2[sa[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> h[MAXN],H[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hh</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(rank2[i]==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> t=sa[rank2[i]<span class="number">-1</span>];<span class="keyword">int</span> w=i;<span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>||H[i<span class="number">-1</span>]&lt;=<span class="number">1</span>)k=<span class="number">0</span>;<span class="keyword">else</span> k=H[i<span class="number">-1</span>]<span class="number">-1</span>,t+=k,w+=k;</span><br><span class="line"><span class="keyword">while</span>(t&lt;len&amp;&amp;w&lt;len)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[t]==s[w])k++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    t++;w++;</span><br><span class="line">&#125;</span><br><span class="line">H[i]=k;h[rank2[i]]=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN][<span class="number">21</span>],ma[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">St</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=len;i++)ma[i]=ma[i/<span class="number">2</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)dp[i][<span class="number">0</span>]=h[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">20</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)&lt;=len;i++)&#123;</span><br><span class="line">    dp[i][j]=min(dp[i][j<span class="number">-1</span>],dp[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rmq</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> inf;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r)swap(l,r);</span><br><span class="line">    l++;</span><br><span class="line">    <span class="keyword">int</span> k=ma[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> min(dp[l][k],dp[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt;v1,v2,p1,p2;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    v1.clear();v2.clear();</span><br><span class="line">    <span class="keyword">int</span> uu=tp[u];<span class="keyword">int</span> vv=tp[v];</span><br><span class="line">    <span class="keyword">while</span>(uu!=vv)&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[uu]&gt;dep[vv])&#123;</span><br><span class="line">    v1.pb(mp(End[uu]-dep[u]+dep[uu],End[uu]));</span><br><span class="line">    u=fa[uu];uu=tp[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    v2.pb(mp(Begin[vv],Begin[vv]+dep[v]-dep[vv]));</span><br><span class="line">    v=fa[vv];vv=tp[v];</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&gt;dep[v])&#123;v1.pb(mp(End[tp[u]]-dep[u]+dep[tp[u]],End[tp[v]]-dep[v]+dep[tp[v]]));&#125;</span><br><span class="line">    <span class="keyword">else</span> v1.pb(mp(Begin[tp[u]]+dep[u]-dep[tp[u]],Begin[tp[v]]+dep[v]-dep[tp[v]]));</span><br><span class="line">    reverse(v2.begin(),v2.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v2.size();i++)v1.pb(v2[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    inc(i,<span class="number">1</span>,n)son[i]=<span class="number">-1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">" %c"</span>,&amp;str[i]);</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    inc(i,<span class="number">2</span>,n)u=read(),v=read(),add(u,v),add(v,u);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);_dfs(<span class="number">1</span>,<span class="number">1</span>);work();</span><br><span class="line">    Sa();hh();St();</span><br><span class="line">    <span class="keyword">int</span> q=read();</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">p1.clear();p2.clear();</span><br><span class="line">u=read();v=read();x=read();y=read();</span><br><span class="line">solve(u,v);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v1.size();i++)p1.pb(v1[i]);</span><br><span class="line">solve(x,y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v1.size();i++)p2.pb(v1[i]);</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=p1[<span class="number">0</span>].first,lx=<span class="number">0</span>,rx=p2[<span class="number">0</span>].first;</span><br><span class="line"><span class="keyword">int</span> t1=p1.size();<span class="keyword">int</span> t2=p2.size();<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;t1&amp;&amp;lx&lt;t2)&#123;</span><br><span class="line">    <span class="keyword">int</span> k=rmq(rank2[r],rank2[rx]);</span><br><span class="line">    k=min(k,min(p1[l].second-r+<span class="number">1</span>,p2[lx].second-rx+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span>(!k)<span class="keyword">break</span>;</span><br><span class="line">    ans+=k;</span><br><span class="line">    <span class="keyword">if</span>(r+k<span class="number">-1</span>&gt;=p1[l].second)&#123;</span><br><span class="line">l++;</span><br><span class="line"><span class="keyword">if</span>(l==t1)<span class="keyword">break</span>;</span><br><span class="line">r=p1[l].first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> r+=k;</span><br><span class="line">    <span class="keyword">if</span>(rx+k<span class="number">-1</span>&gt;=p2[lx].second)&#123;</span><br><span class="line">lx++;</span><br><span class="line"><span class="keyword">if</span>(lx==t2)<span class="keyword">break</span>;</span><br><span class="line">rx=p2[lx].first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> rx+=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给你一颗$n$个节点的树 每个节点上都有一个字符$c$ q次查询两条路径形成的字符串的最长公共前缀&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="树链剖分" scheme="http://yoursite.com/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="SA" scheme="http://yoursite.com/tags/SA/"/>
    
  </entry>
  
  <entry>
    <title>cf1037H</title>
    <link href="http://yoursite.com/2019/04/10/cf1037H/"/>
    <id>http://yoursite.com/2019/04/10/cf1037H/</id>
    <published>2019-04-10T07:32:32.000Z</published>
    <updated>2019-04-10T07:49:56.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个串$S$ $q$次查询在S[l,r]中字典序比询问串大的字典序最小的那个</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这题有两个版本的写法</p><h3 id="SAM"><a href="#SAM" class="headerlink" title="SAM"></a>SAM</h3><p>考虑对原串建SAM 用线段树合并维护每个节点上$Right$集合</p><p>对于每次查询</p><p>从前往后对于每个位置找到恰好比当前前缀字典序大的 并满足区间范围的位置</p><p>然后输出即可</p><p>复杂度$O(26*nlogn)$</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">6e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt,rt,cur,tot;</span><br><span class="line"><span class="keyword">int</span> Rt[MAXN],Len,fa[MAXN],dis[MAXN],ch[MAXN][<span class="number">31</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,num;</span><br><span class="line">&#125;node;</span><br><span class="line">node d[MAXN*<span class="number">41</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x)x=++tot;</span><br><span class="line">    d[x].num++;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(t&lt;=mid)update(d[x].l,l,mid,t);</span><br><span class="line">    <span class="keyword">else</span> update(d[x].r,mid+<span class="number">1</span>,r,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">built</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> last=cur;cur=++cnt;dis[cur]=dis[last]+<span class="number">1</span>;<span class="keyword">int</span> p=last;</span><br><span class="line">    update(Rt[cur],<span class="number">1</span>,Len,dis[cur]);</span><br><span class="line">    <span class="keyword">for</span>(;p&amp;&amp;!ch[p][x];p=fa[p])ch[p][x]=cur;</span><br><span class="line">    <span class="keyword">if</span>(!p)fa[cur]=rt;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> q=ch[p][x];</span><br><span class="line"><span class="keyword">if</span>(dis[q]==dis[p]+<span class="number">1</span>)fa[cur]=q;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nt=++cnt;dis[nt]=dis[p]+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(ch[nt],ch[q],<span class="keyword">sizeof</span>(ch[q]));</span><br><span class="line">    fa[nt]=fa[q];fa[q]=fa[cur]=nt;</span><br><span class="line">    <span class="keyword">for</span>(;ch[p][x]==q;p=fa[p])ch[p][x]=nt;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!y)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(!x)&#123;x=y;<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> t=++tot;d[t]=d[x];d[t].num+=d[y].num;x=t;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    merge(d[x].l,d[y].l,l,mid);</span><br><span class="line">    merge(d[x].r,d[y].r,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;ans+=d[x].num;<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)query(d[x].l,l,mid,ql,qr);</span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid)query(d[x].r,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    link(x)dfs(j-&gt;t),merge(Rt[x],Rt[j-&gt;t],<span class="number">1</span>,Len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x||l&gt;r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ans=<span class="number">0</span>;query(x,<span class="number">1</span>,Len,l,r);</span><br><span class="line">    <span class="keyword">if</span>(ans&gt;=<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);<span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);Len=len;</span><br><span class="line">    rt=cnt=cur=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)built(str[i]-<span class="string">'`'</span>);</span><br><span class="line">    inc(i,<span class="number">1</span>,cnt)add(fa[i],i);</span><br><span class="line">    dfs(rt);</span><br><span class="line">    <span class="keyword">int</span> q=read();</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="keyword">int</span> l=read();<span class="keyword">int</span> r=read();<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);<span class="keyword">int</span> temp=rt;</span><br><span class="line">len=<span class="built_in">strlen</span>(s);s[len]=<span class="string">'`'</span>;<span class="keyword">int</span> len1=<span class="number">0</span>,len2,len3;<span class="keyword">int</span> Temp,TEMP;</span><br><span class="line"><span class="keyword">int</span> pos1=<span class="number">-1</span>;<span class="keyword">int</span> pos2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> t=s[i]-<span class="string">'`'</span>;Temp=temp;len2=len1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=t+<span class="number">1</span>;j&lt;=<span class="number">26</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!ch[Temp][j])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!check(Rt[ch[Temp][j]],l+i,r))<span class="keyword">continue</span>;</span><br><span class="line">pos1=i;pos2=j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[temp][t])<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(!check(Rt[ch[temp][t]],l+i,r))<span class="keyword">break</span>;</span><br><span class="line">    temp=ch[temp][t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pos1==<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pos1;i++)<span class="built_in">printf</span>(<span class="string">"%c"</span>,s[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,(<span class="keyword">char</span>)(<span class="string">'a'</span>+pos2<span class="number">-1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SA"><a href="#SA" class="headerlink" title="SA"></a>SA</h3><p>离线询问 把原串和询问串用一个字符链接在一起 跑$SA$</p><p>然后按着$rank$从大到小枚举 因为对于每个询问 满足条件的必然是$rank$比询问位置大的</p><p>我们从两个方向统计答案</p><p>对于原串的下标满足$[l,r-min(rmq(rank[last],i),len)]$ 维护$rank$的最小值</p><p>然后对于下标满足$[r-len,r]$暴力枚举其$rank$以及其$lcp$是否满足条件 并维护满足条件里面$rank$最小</p><p>的下标</p><p>复杂度$O(nlogn)$</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">6e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[MAXN],s[MAXN];</span><br><span class="line"><span class="keyword">int</span> vis[MAXN];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">&#125;node;</span><br><span class="line">node que[MAXN];</span><br><span class="line"><span class="keyword">int</span> txt[MAXN],sa[MAXN],td[MAXN],rank1[MAXN],rank2[MAXN],t1[MAXN],t2[MAXN];</span><br><span class="line"><span class="keyword">int</span> ma[MAXN];</span><br><span class="line"><span class="keyword">int</span> dp[MAXN][<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> f[],<span class="keyword">int</span> t,<span class="keyword">int</span> w,<span class="keyword">int</span> k)</span></span>&#123;<span class="keyword">return</span> f[t]==f[w]&amp;&amp;f[t+k]==f[w+k];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);<span class="keyword">int</span> m=<span class="number">256</span>;</span><br><span class="line">    <span class="keyword">int</span> *t1=rank1;<span class="keyword">int</span> *t2=td;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)txt[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)txt[str[i]]++,rank1[i]=str[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)txt[i]+=txt[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)sa[--txt[str[i]]]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=len;k&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len-k;i&lt;len;i++)td[p++]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="keyword">if</span>(sa[i]&gt;=k)td[p++]=sa[i]-k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)txt[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)txt[rank1[i]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)txt[i]+=txt[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)sa[--txt[rank1[td[i]]]]=td[i];</span><br><span class="line">swap(rank1,td);rank1[sa[<span class="number">0</span>]]=<span class="number">0</span>;</span><br><span class="line">p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)rank1[sa[i]]=cmp(td,sa[i],sa[i<span class="number">-1</span>],k)?p<span class="number">-1</span>:p++;</span><br><span class="line"><span class="keyword">if</span>(p&gt;=len)<span class="keyword">break</span>;</span><br><span class="line">m=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)rank2[sa[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> h[MAXN],H[MAXN],Len;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hh</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(rank2[i]==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> t=sa[rank2[i]<span class="number">-1</span>];<span class="keyword">int</span> w=i;<span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>||H[i<span class="number">-1</span>]&lt;=<span class="number">1</span>)k=<span class="number">0</span>;<span class="keyword">else</span> k=H[i<span class="number">-1</span>]<span class="number">-1</span>,t+=k,w+=k;</span><br><span class="line"><span class="keyword">while</span>(t&lt;len&amp;&amp;w&lt;len)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str[t]==str[w])k++;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    t++;w++;</span><br><span class="line">&#125;</span><br><span class="line">H[i]=k;h[rank2[i]]=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">St</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    inc(i,<span class="number">2</span>,len)ma[i]=ma[i/<span class="number">2</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)dp[i][<span class="number">0</span>]=h[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">20</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)&lt;=len;i++)&#123;</span><br><span class="line">    dp[i][j]=min(dp[i][j<span class="number">-1</span>],dp[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rmq</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    l++;</span><br><span class="line">    <span class="keyword">int</span> k=ma[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> min(dp[l][k],dp[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> minn[MAXN&lt;&lt;<span class="number">2</span>],LEN[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">built</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    minn[x]=inf;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    built(x&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    built(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    minn[x]=min(minn[x],k);</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(t&lt;=mid)update(x&lt;&lt;<span class="number">1</span>,l,mid,t,k);</span><br><span class="line">    <span class="keyword">else</span> update(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,t,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans1;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;ans1=min(ans1,minn[x]);<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)query(x&lt;&lt;<span class="number">1</span>,l,mid,ql,qr);</span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid)query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line">pii ans[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);<span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;":::: "&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(!vis[sa[i]]&amp;&amp;sa[i]&lt;Len)&#123;</span><br><span class="line">    last=i;</span><br><span class="line">    update(<span class="number">1</span>,<span class="number">1</span>,Len,sa[i]+<span class="number">1</span>,i);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!vis[sa[i]])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> k=vis[sa[i]];</span><br><span class="line"><span class="keyword">int</span> l=que[k].l;<span class="keyword">int</span> r=que[k].r;</span><br><span class="line"><span class="keyword">if</span>(last)r-=min(rmq(i,last),LEN[k]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line">ans1=inf;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=r)query(<span class="number">1</span>,<span class="number">1</span>,Len,l,r);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=max(que[k].r-LEN[k],que[k].l<span class="number">-1</span>);j&lt;que[k].r;j++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(rank2[j]&lt;=i)<span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">int</span> k1=min(rmq(i,rank2[j]),LEN[k]);</span><br><span class="line">    <span class="keyword">if</span>(j+k1+<span class="number">1</span>&gt;que[k].r)<span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span>(ans1&gt;rank2[j])ans1=rank2[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans1==inf)ans[k].first=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> ans[k].first=ans1,ans[k].second=rmq(i,ans1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);<span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);Len=len;str[len]=<span class="string">'$'</span>;len++;</span><br><span class="line">    built(<span class="number">1</span>,<span class="number">1</span>,Len);</span><br><span class="line">    <span class="keyword">int</span> n=read();</span><br><span class="line">    inc(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">que[i].l=read();que[i].r=read();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);<span class="keyword">int</span> len1=<span class="built_in">strlen</span>(s);LEN[i]=len1;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len1;j++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(j==<span class="number">0</span>)vis[len]=i;</span><br><span class="line">    str[len++]=s[j];</span><br><span class="line">&#125;</span><br><span class="line">str[len++]=<span class="string">'$'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str[len]=<span class="string">'\0'</span>;</span><br><span class="line">    Sa();hh();St();</span><br><span class="line">    <span class="comment">//cout&lt;&lt;str&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//inc(i,1,len-1)cout&lt;&lt;sa[i]&lt;&lt;" ";</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line">    solve();</span><br><span class="line">    inc(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i].first==<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=sa[ans[i].first];j&lt;=sa[ans[i].first]+ans[i].second;j++)<span class="built_in">printf</span>(<span class="string">"%c"</span>,str[j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定一个串$S$ $q$次查询在S[l,r]中字典序比询问串大的字典序最小的那个&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="SAM" scheme="http://yoursite.com/tags/SAM/"/>
    
      <category term="SA" scheme="http://yoursite.com/tags/SA/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>cf547E(SAM+dfs序+主席树)</title>
    <link href="http://yoursite.com/2019/04/06/cf547E-SAM-dfs%E5%BA%8F-%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    <id>http://yoursite.com/2019/04/06/cf547E-SAM-dfs序-主席树/</id>
    <published>2019-04-06T05:18:38.000Z</published>
    <updated>2019-04-06T05:24:47.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$n$个串 $q$次查询</p><p>每次查询$(l,r,k)$ 表示下标为$k$的串在下标为$[l,r]$的串中出现的次数的和</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我们考虑建广义的SAM</p><p>这样所有串的情况都可以在一颗后缀树上表示</p><p>对于每个串我们找到他的最佳匹配位置  </p><p>问题转化为 对于查询 我们在他最佳匹配位置的子树中统计节点的权值在[l,r]的个数</p><p>这样 $dfs$序对于序列建可持久化线段树 然后查询答案即可</p><p>复杂度$O(qlogn)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">6e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> rt,cnt,cur;</span><br><span class="line"><span class="keyword">int</span> dis[MAXN],ch[MAXN][<span class="number">26</span>],fa[MAXN],tag[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">built</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> last=cur;cur=++cnt;dis[cur]=dis[last]+<span class="number">1</span>;tag[cur]=id;<span class="keyword">int</span> p=last;</span><br><span class="line">    <span class="keyword">for</span>(;p&amp;&amp;!ch[p][x];p=fa[p])ch[p][x]=cur;</span><br><span class="line">    <span class="keyword">if</span>(!p)fa[cur]=rt;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> q=ch[p][x];</span><br><span class="line"><span class="keyword">if</span>(dis[q]==dis[p]+<span class="number">1</span>)fa[cur]=q;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nt=++cnt;dis[nt]=dis[p]+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(ch[nt],ch[q],<span class="keyword">sizeof</span>(ch[q]));</span><br><span class="line">    fa[nt]=fa[q];fa[q]=fa[cur]=nt;</span><br><span class="line">    <span class="keyword">for</span>(;ch[p][x]==q;p=fa[p])ch[p][x]=nt;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> id[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">int</span> len=str[i].size();<span class="keyword">int</span> temp=rt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">    <span class="keyword">int</span> t=str[i][j]-<span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">if</span>(ch[temp][t])temp=ch[temp][t];</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> p=temp;</span><br><span class="line"><span class="keyword">for</span>(;p&amp;&amp;!ch[p][t];p=fa[p]);</span><br><span class="line"><span class="keyword">if</span>(!p)temp=rt;<span class="keyword">else</span> temp=ch[p][t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">id[i]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[MAXN],tot,num[MAXN],fdfn[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    dfn[x]=++tot;num[x]=<span class="number">1</span>;fdfn[tot]=x;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">dfs(j-&gt;t);</span><br><span class="line">num[x]+=num[j-&gt;t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,sum;</span><br><span class="line">&#125;node;</span><br><span class="line">node d[MAXN*<span class="number">21</span>];<span class="keyword">int</span> Rt[MAXN],tot1;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    x=++tot1;d[x]=d[y];d[x].sum++;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(t&lt;=mid)update(d[x].l,d[y].l,l,mid,t);</span><br><span class="line">    <span class="keyword">else</span> update(d[x].r,d[y].r,mid+<span class="number">1</span>,r,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;ans+=d[y].sum-d[x].sum;<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)query(d[x].l,d[y].l,l,mid,ql,qr);</span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid)query(d[x].r,d[y].r,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    rt=cur=cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;str[i];</span><br><span class="line">    inc(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">int</span> len=str[i].size();</span><br><span class="line">cur=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)built(str[i][j]-<span class="string">'a'</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    solve();</span><br><span class="line">    inc(i,<span class="number">1</span>,cnt)add(fa[i],i);</span><br><span class="line">    dfs(rt);</span><br><span class="line">    inc(i,<span class="number">1</span>,tot)&#123;</span><br><span class="line"><span class="keyword">if</span>(!tag[fdfn[i]])Rt[i]=Rt[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">else</span> update(Rt[i],Rt[i<span class="number">-1</span>],<span class="number">1</span>,n,tag[fdfn[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l,r,x;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r&gt;&gt;x;x=id[x];</span><br><span class="line">ans=<span class="number">0</span>;query(Rt[dfn[x]<span class="number">-1</span>],Rt[dfn[x]+num[x]<span class="number">-1</span>],<span class="number">1</span>,n,l,r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定$n$个串 $q$次查询&lt;/p&gt;
&lt;p&gt;每次查询$(l,r,k)$ 表示下标为$k$的串在下标为$[l,r]$的串中出现的次数的和&lt;/p
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="SAM" scheme="http://yoursite.com/tags/SAM/"/>
    
      <category term="主席树" scheme="http://yoursite.com/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
      <category term="dfs序" scheme="http://yoursite.com/tags/dfs%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>cf961F(hash+线段树+二分)</title>
    <link href="http://yoursite.com/2019/04/06/cf961F-hash-%E7%BA%BF%E6%AE%B5%E6%A0%91-%E4%BA%8C%E5%88%86/"/>
    <id>http://yoursite.com/2019/04/06/cf961F-hash-线段树-二分/</id>
    <published>2019-04-06T04:59:47.000Z</published>
    <updated>2019-04-06T05:42:13.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个字符串$T$</p><p>求前$\lceil \frac{|T|}{2} \rceil$ 个位置与其关于对称轴对应位置形成的串 在满足以下条件下的最长前缀</p><ul><li>前缀的长度小于串长</li><li>前缀长度为奇数</li><li>在是前缀的同时也是串的后缀</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>在考虑没有长度是奇数限制的情况下 直接对每个串做二分 $hash$来$check$即可</p><p>因为是奇数 所以这个前缀必然存在对称中心 所以我们可以考虑枚举这个中心  去$check$这个中心最远能往前影响的最远位置</p><p>然后对于这段区间维护区间最值  可以用线段树维护</p><p>复杂度$O(nlogn)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod1=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod2=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[MAXN];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll sum1[MAXN],sum2[MAXN];</span><br><span class="line">ll Sum1[MAXN],Sum2[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span>&#123;</span><br><span class="line">    ll ans1=(sum1[y1]-sum1[x1<span class="number">-1</span>]*Sum1[y1-x1+<span class="number">1</span>]%mod1+mod1)%mod1;</span><br><span class="line">    ll ans2=(sum1[y2]-sum1[x2<span class="number">-1</span>]*Sum1[y2-x2+<span class="number">1</span>]%mod1+mod1)%mod1;</span><br><span class="line">    <span class="keyword">if</span>(ans1!=ans2)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    ans1=(sum2[y1]-sum2[x1<span class="number">-1</span>]*Sum2[y1-x1+<span class="number">1</span>]%mod2+mod2)%mod2;</span><br><span class="line">    ans2=(sum2[y2]-sum2[x2<span class="number">-1</span>]*Sum2[y2-x2+<span class="number">1</span>]%mod2+mod2)%mod2;</span><br><span class="line">    <span class="keyword">if</span>(ans1!=ans2)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=x-t+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(y+len<span class="number">-1</span>&gt;n)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!judge(t,x,y-x+t,y))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!judge(x,x+len<span class="number">-1</span>,y,y+len<span class="number">-1</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> maxx[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(maxx[x]!=<span class="number">0</span>)&#123;</span><br><span class="line">maxx[x&lt;&lt;<span class="number">1</span>]=max(maxx[x&lt;&lt;<span class="number">1</span>],maxx[x]);</span><br><span class="line">maxx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=max(maxx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],maxx[x]);</span><br><span class="line">maxx[x]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;maxx[x]=max(maxx[x],t);<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    push(x);</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)update(x&lt;&lt;<span class="number">1</span>,l,mid,ql,qr,t);</span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid)update(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;vec.pb(max(<span class="number">-1</span>,(maxx[x]-l)*<span class="number">2</span>+<span class="number">1</span>));<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    push(x);</span><br><span class="line">    query(x&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();<span class="built_in">scanf</span>(<span class="string">"%s"</span>,str+<span class="number">1</span>);</span><br><span class="line">    Sum1[<span class="number">0</span>]=Sum2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)Sum1[i]=Sum1[i<span class="number">-1</span>]*<span class="number">131</span>%mod1,Sum2[i]=Sum2[i<span class="number">-1</span>]*<span class="number">233</span>%mod2;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)sum1[i]=sum1[i<span class="number">-1</span>]*<span class="number">131</span>+str[i],sum1[i]%=mod1;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)sum2[i]=sum2[i<span class="number">-1</span>]*<span class="number">233</span>+str[i],sum2[i]%=mod2;</span><br><span class="line">    <span class="keyword">int</span> x,y;x=y=(n<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)y++;<span class="keyword">else</span> x--,y++;</span><br><span class="line">    dec(i,(n<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>,<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>;<span class="keyword">int</span> r=x;<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(check(mid,x,y))ans=mid,r=mid<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ans)&#123;x--;y++;<span class="keyword">continue</span>;&#125;</span><br><span class="line">update(<span class="number">1</span>,<span class="number">1</span>,n,ans,x,x);</span><br><span class="line">x--;y++;</span><br><span class="line">    &#125;</span><br><span class="line">    query(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(n<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>;i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,vec[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定一个字符串$T$&lt;/p&gt;
&lt;p&gt;求前$\lceil \frac{|T|}{2} \rceil$ 个位置与其关于对称轴对应位置形成的串 在
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="hash" scheme="http://yoursite.com/tags/hash/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>cf616F(SAM+树dp)</title>
    <link href="http://yoursite.com/2019/04/04/cf616F-SAM-%E6%A0%91dp/"/>
    <id>http://yoursite.com/2019/04/04/cf616F-SAM-树dp/</id>
    <published>2019-04-04T05:18:12.000Z</published>
    <updated>2019-04-04T05:30:06.559Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你n个串 每个串都有一个价值$c_i$ 然后让你构造一个串$S$ $S$的价值定义为:</p><p>$F(S)=\sum_{i=1}^{n}c_i<em>p_{S,i}</em>|S|$ </p><p>$p_{S,i}$ 表示在第$T_i$中$S$出现的次数</p><p>$|S|$表示串的长度</p><p>问 如何选择$S$能得到最大价值  输出最大价值</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我们考虑把所有串建广义的后缀自动机</p><p>众所周知的  $dis[fa[x]]+1$ 到$dis[x]$是本周不同子串  然后求出其在所有串中的价值和 这个可以在后缀上统计得到</p><p>复杂度 O$(\sum_{i-1}^{n}|T_i|)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ch[MAXN][<span class="number">26</span>],fa[MAXN],dis[MAXN];</span><br><span class="line">ll sum[MAXN];</span><br><span class="line"><span class="keyword">int</span> rt,cur,cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">built</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> vul)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> last=cur;cur=++cnt;dis[cur]=dis[last]+<span class="number">1</span>;sum[cur]=vul;<span class="keyword">int</span> p=last;</span><br><span class="line">    <span class="keyword">for</span>(;p&amp;&amp;!ch[p][x];p=fa[p])ch[p][x]=cur;</span><br><span class="line">    <span class="keyword">if</span>(!p)fa[cur]=rt;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> q=ch[p][x];</span><br><span class="line"><span class="keyword">if</span>(dis[q]==dis[p]+<span class="number">1</span>)fa[cur]=q;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nt=++cnt;dis[nt]=dis[p]+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(ch[nt],ch[q],<span class="keyword">sizeof</span>(ch[q]));</span><br><span class="line">    fa[nt]=fa[q];fa[q]=fa[cur]=nt;</span><br><span class="line">    <span class="keyword">for</span>(;ch[p][x]==q;p=fa[p])ch[p][x]=nt;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line">ll maxx;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">dfs(j-&gt;t);sum[x]+=sum[j-&gt;t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x!=rt&amp;&amp;dis[x]&gt;dis[fa[x]])maxx=max(maxx,max(sum[x]*(dis[fa[x]]+<span class="number">1</span>),sum[x]*dis[x]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;str[i];</span><br><span class="line">    inc(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    rt=cnt=cur=<span class="number">1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">int</span> sz=str[i].size();cur=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;sz;j++)built(str[i][j]-<span class="string">'a'</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,cnt)add(fa[i],i);</span><br><span class="line">    maxx=<span class="number">0</span>;dfs(rt);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maxx&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给你n个串 每个串都有一个价值$c_i$ 然后让你构造一个串$S$ $S$的价值定义为:&lt;/p&gt;
&lt;p&gt;$F(S)=\sum_{i=1}^{
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="dp" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/dp/"/>
    
    
      <category term="SAM" scheme="http://yoursite.com/tags/SAM/"/>
    
      <category term="树形dp" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
  </entry>
  
  <entry>
    <title>cf232D(后缀数组+主席树+ST表+二分)</title>
    <link href="http://yoursite.com/2019/04/03/cf232D-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E4%B8%BB%E5%B8%AD%E6%A0%91-ST%E8%A1%A8-%E4%BA%8C%E5%88%86/"/>
    <id>http://yoursite.com/2019/04/03/cf232D-后缀数组-主席树-ST表-二分/</id>
    <published>2019-04-03T13:53:25.000Z</published>
    <updated>2019-04-03T14:07:07.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定长度为$n$的整数序列</p><p>$q​$次查询 区间$[l,r]​$能’’匹配’’多少长度与其一致且不相交的区间 匹配的定义是for all $i​$ $(0 ≤ i≤ r1 - l1)​$ the following condition holds: $h1 + i + hl2 + i = hl1 + hl2​$ </p><h2 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h2><p>从这个匹配入手 </p><p>对于两个串 $[l,r]$ $[lx,rx]$</p><p>for all $i$ $(1 ≤ i≤ r - l)$ $h_{i+l}-h_{i+l-1}=h_{lx+i-1}-h_{i+lx}$ </p><p>所以把这个串复制一遍加在后面 注意用一个从未出现的数隔开 </p><p>然后前面一段用$h_i-h_{i+1}$替代</p><p>后面一部分用$h_{i}-h_{i-1}$ 替代</p><p>然后链接以后跑后缀数组</p><p>对于每个查询 找到$lcp&gt;=r-l$的最大范围[l,r] 然后用主席树维护答案即可</p><p>复杂度$O(nlogn+qlogn)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[MAXN],sz;</span><br><span class="line"><span class="keyword">int</span> str[MAXN],len;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec;</span><br><span class="line"><span class="keyword">int</span> t1[MAXN],t2[MAXN],txt[MAXN],rank1[MAXN],rank2[MAXN],td[MAXN],sa[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> f[],<span class="keyword">int</span> t,<span class="keyword">int</span> w,<span class="keyword">int</span> k)</span></span>&#123;<span class="keyword">return</span> f[t]==f[w]&amp;&amp;f[t+k]==f[w+k];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m=++sz;</span><br><span class="line">    <span class="keyword">int</span> *td=t1;<span class="keyword">int</span> *rank1=t2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)txt[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)txt[str[i]]++,rank1[i]=str[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)txt[i]+=txt[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)sa[--txt[str[i]]]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=len;k&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len-k;i&lt;len;i++)td[p++]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="keyword">if</span>(sa[i]&gt;=k)td[p++]=sa[i]-k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)txt[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)txt[rank1[i]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)txt[i]+=txt[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)sa[--txt[rank1[td[i]]]]=td[i];</span><br><span class="line">swap(rank1,td);rank1[sa[<span class="number">0</span>]]=<span class="number">0</span>;</span><br><span class="line">p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)rank1[sa[i]]=cmp(td,sa[i],sa[i<span class="number">-1</span>],k)?p<span class="number">-1</span>:p++;</span><br><span class="line"><span class="keyword">if</span>(p&gt;=len)<span class="keyword">break</span>;</span><br><span class="line">m=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)rank2[sa[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h[MAXN],H[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hh</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!rank2[i])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> t=sa[rank2[i]<span class="number">-1</span>];<span class="keyword">int</span> w=i;<span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>||H[i<span class="number">-1</span>]&lt;=<span class="number">1</span>)k=<span class="number">0</span>;<span class="keyword">else</span> k=H[i<span class="number">-1</span>]<span class="number">-1</span>,t+=k,w+=k;</span><br><span class="line"><span class="keyword">while</span>(t&lt;len&amp;&amp;w&lt;len)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str[w]==str[t])k++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    w++;t++;</span><br><span class="line">&#125;</span><br><span class="line">H[i]=k;h[rank2[i]]=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN][<span class="number">21</span>],ma[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">St</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=len;i++)ma[i]=ma[i/<span class="number">2</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)dp[i][<span class="number">0</span>]=h[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">20</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)&lt;=len;i++)&#123;</span><br><span class="line">    dp[i][j]=min(dp[i][j<span class="number">-1</span>],dp[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rmq</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    l++;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k=ma[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> min(dp[l][k],dp[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pii <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=x+<span class="number">1</span>;<span class="keyword">int</span> r=len<span class="number">-1</span>;pii ans;ans.second=x;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(rmq(x,mid)&gt;=t)ans.second=mid,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    l=<span class="number">1</span>;r=x<span class="number">-1</span>;ans.first=x+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(rmq(mid,x)&gt;=t)ans.first=mid,r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> rt[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,sum;</span><br><span class="line">&#125;node;</span><br><span class="line">node d[MAXN*<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    x=++cnt;d[x]=d[y];d[x].sum++;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(t&lt;=mid)update(d[x].l,d[y].l,l,mid,t);</span><br><span class="line">    <span class="keyword">else</span> update(d[x].r,d[y].r,mid+<span class="number">1</span>,r,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans1;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;ans1+=d[y].sum-d[x].sum;<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)query(d[x].l,d[y].l,l,mid,ql,qr);</span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid)query(d[x].r,d[y].r,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();len=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)a[i]=read();</span><br><span class="line">    inc(i,<span class="number">1</span>,n<span class="number">-1</span>)str[len++]=a[i]-a[i+<span class="number">1</span>],vec.pb(str[len<span class="number">-1</span>]);</span><br><span class="line">    str[len++]=inf;vec.pb(str[len<span class="number">-1</span>]);</span><br><span class="line">    inc(i,<span class="number">2</span>,n)str[len++]=a[i]-a[i<span class="number">-1</span>],vec.pb(str[len<span class="number">-1</span>]);</span><br><span class="line">    str[len++]=-inf;vec.pb(str[len<span class="number">-1</span>]);</span><br><span class="line">    sort(vec.begin(),vec.end());</span><br><span class="line">    sz=unique(vec.begin(),vec.end())-vec.begin();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)str[i]=lower_bound(vec.begin(),vec.begin()+sz,str[i])-vec.begin()+<span class="number">1</span>;</span><br><span class="line">    Sa();hh();St();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sa[i]&lt;n)rt[i]=rt[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    update(rt[i],rt[i<span class="number">-1</span>],<span class="number">1</span>,n,sa[i]-n+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> q=read();</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="keyword">int</span> l=read();<span class="keyword">int</span> r=read();</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    pii ans=solve(rank2[l<span class="number">-1</span>],r-l);</span><br><span class="line">    <span class="keyword">if</span>(ans.first&gt;ans.second)&#123;<span class="built_in">printf</span>(<span class="string">"0\n"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">    ans1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">2</span>*l-r<span class="number">-1</span>&gt;=<span class="number">1</span>)query(rt[ans.first<span class="number">-1</span>],rt[ans.second],<span class="number">1</span>,n,<span class="number">1</span>,<span class="number">2</span>*l-r<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(n-r+l&gt;r)query(rt[ans.first<span class="number">-1</span>],rt[ans.second],<span class="number">1</span>,n,r+<span class="number">1</span>,n-r+l);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans1);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定长度为$n$的整数序列&lt;/p&gt;
&lt;p&gt;$q​$次查询 区间$[l,r]​$能’’匹配’’多少长度与其一致且不相交的区间 匹配的定义是fo
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="主席树" scheme="http://yoursite.com/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="后缀数组" scheme="http://yoursite.com/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
      <category term="ST表" scheme="http://yoursite.com/tags/ST%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>cf524F(后缀数组+线段树)</title>
    <link href="http://yoursite.com/2019/04/03/cf524F-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>http://yoursite.com/2019/04/03/cf524F-后缀数组-线段树/</id>
    <published>2019-04-03T05:00:40.000Z</published>
    <updated>2019-04-03T05:08:28.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个括号序列,现在能进行两类操作:</p><ul><li>循环移位,将末尾的字符移动到开头</li><li>在任意位置加入任意类型字符</li></ul><p>问在满足加入字符最小的情况下,输出合法的括号序列,如果有多种情况满足长度最下,则输出字典序最小的</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先</p><p>对于加入字符最少 必然是加入$|左括号num-右括号num|$个 </p><p>若左括号多 必然在末尾加入右括号</p><p>反之则在开端加入左括号</p><p>对于循环移位操作 本质形成一个环 那么我们考虑用线段树判当前子串加入相关字符后能否构成合法括号序列</p><p>用后缀数组来维护字典序最小的方案</p><p>复杂度O$(nlogn)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> sum[MAXN];</span><br><span class="line"><span class="keyword">int</span> minn[MAXN&lt;&lt;<span class="number">2</span>],maxx[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">built</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    minn[x]=inf;maxx[x]=-inf;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;minn[x]=maxx[x]=sum[l];<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    built(x&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    built(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    minn[x]=min(minn[x&lt;&lt;<span class="number">1</span>],minn[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    maxx[x]=max(maxx[x&lt;&lt;<span class="number">1</span>],maxx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query_min</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;ans=min(ans,minn[x]);<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)query_min(x&lt;&lt;<span class="number">1</span>,l,mid,ql,qr);</span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid)query_min(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query_max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;ans=max(ans,maxx[x]);<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)query_max(x&lt;&lt;<span class="number">1</span>,l,mid,ql,qr);</span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid)query_max(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> txt[MAXN],rank1[MAXN],sa[MAXN],td[MAXN],t1[MAXN],t2[MAXN],rank2[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> f[],<span class="keyword">int</span> t,<span class="keyword">int</span> w,<span class="keyword">int</span> k)</span></span>&#123;<span class="keyword">return</span> f[t]==f[w]&amp;&amp;f[t+k]==f[w+k];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sa</span><span class="params">(<span class="keyword">char</span> str[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);<span class="keyword">int</span> m=<span class="number">256</span>;</span><br><span class="line">    <span class="keyword">int</span> *td=t1;<span class="keyword">int</span> *rank1=t2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)txt[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)rank1[i]=str[i],txt[str[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)txt[i]+=txt[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)sa[--txt[str[i]]]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=len;k&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len-k;i&lt;len;i++)td[p++]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="keyword">if</span>(sa[i]&gt;=k)td[p++]=sa[i]-k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)txt[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)txt[rank1[i]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)txt[i]+=txt[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)sa[--txt[rank1[td[i]]]]=td[i];</span><br><span class="line">swap(rank1,td);rank1[sa[<span class="number">0</span>]]=<span class="number">0</span>;</span><br><span class="line">p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)rank1[sa[i]]=cmp(td,sa[i],sa[i<span class="number">-1</span>],k)?p<span class="number">-1</span>:p++;</span><br><span class="line"><span class="keyword">if</span>(p&gt;=len)<span class="keyword">break</span>;</span><br><span class="line">m=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)rank2[sa[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> str[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);n=<span class="built_in">strlen</span>(str);</span><br><span class="line">    inc(i,<span class="number">0</span>,n<span class="number">-1</span>)str[n+i]=str[i];str[<span class="number">2</span>*n]=<span class="string">'\0'</span>;</span><br><span class="line">    inc(i,<span class="number">0</span>,<span class="number">2</span>*n<span class="number">-1</span>)<span class="keyword">if</span>(str[i]==<span class="string">'('</span>)sum[i+<span class="number">1</span>]=<span class="number">-1</span>;<span class="keyword">else</span> sum[i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,<span class="number">2</span>*n)sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">    built(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>*n);Sa(str);</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>(str[i]==<span class="string">'('</span>)cnt++;<span class="keyword">else</span> cnt--;</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> maxx=inf,pos=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> l=i+<span class="number">1</span>;<span class="keyword">int</span> r=i+n;</span><br><span class="line">    ans=-inf;query_max(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>*n,l,r);</span><br><span class="line">    <span class="keyword">if</span>(ans&gt;sum[i])<span class="keyword">continue</span>;</span><br><span class="line">    ans=-inf;query_max(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>*n,r,r);</span><br><span class="line">    <span class="keyword">if</span>(ans-sum[i]+cnt!=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span>(maxx&gt;rank2[i])pos=i,maxx=rank2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&lt;pos+n;i++)<span class="built_in">printf</span>(<span class="string">"%c"</span>,str[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)<span class="built_in">printf</span>(<span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> maxx=inf,pos=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> l=i+<span class="number">1</span>;<span class="keyword">int</span> r=i+n;</span><br><span class="line">    ans=-inf;query_max(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>*n,l,r);</span><br><span class="line">    <span class="keyword">if</span>(ans+cnt&gt;sum[i])<span class="keyword">continue</span>;</span><br><span class="line">    ans=-inf;query_max(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>*n,r,r);</span><br><span class="line">    <span class="keyword">if</span>(ans-sum[i]+cnt!=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span>(maxx&gt;rank2[i])pos=i,maxx=rank2[i];</span><br><span class="line">&#125;</span><br><span class="line">cnt*=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)<span class="built_in">printf</span>(<span class="string">"("</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&lt;pos+n;i++)<span class="built_in">printf</span>(<span class="string">"%c"</span>,str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定一个括号序列,现在能进行两类操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;循环移位,将末尾的字符移动到开头&lt;/li&gt;
&lt;li&gt;在任意位置加入任意类型
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="后缀数组" scheme="http://yoursite.com/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>cf86C(AC自动机+dp)</title>
    <link href="http://yoursite.com/2019/04/02/cf86C-AC%E8%87%AA%E5%8A%A8%E6%9C%BA-dp/"/>
    <id>http://yoursite.com/2019/04/02/cf86C-AC自动机-dp/</id>
    <published>2019-04-02T12:52:49.000Z</published>
    <updated>2019-04-02T13:05:41.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$m$个字符串 问构造长度为$n$的串的方案数</p><p>构造串需满足 对于任意位置 $i$ 都存在一个子区间[l,r] 包含$i$且子区间对应m个串中的任意一个</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>AC自动机+DP</p><p>我们可以设$dp[i][j][k]$ 表示已经构造了长度为$i$的串 且在自动机中第$j$状态  且存在$k$字符属于失配状态</p><p>对于每个位置  我们找到其在自动机上 m个串为其后缀的最长的那个串的长度</p><p>设加入四种字符其中一个后达到的目的状态为$x$ 当前状态为$y$</p><p>那么转移就是</p><p>若当前失配的长度$k&lt;maxdis$ 那么  $dp[i+1][x][0]+=dp[i][y][k]$</p><p>反之则 $dp[i+1][x][k+1]+=dp[i][y][k]$</p><p>复杂度为$O(NM*400)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T[MAXN];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> dep,ch[<span class="number">4</span>],fair,pos;</span><br><span class="line">    <span class="keyword">bool</span> vis;</span><br><span class="line">&#125;node;</span><br><span class="line"><span class="keyword">int</span> rt,n,m,cnt;</span><br><span class="line">node d[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x=++cnt;d[x].dep=d[y].dep+<span class="number">1</span>;d[x].fair=<span class="number">0</span>;</span><br><span class="line">    d[x].pos=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> str[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);<span class="keyword">int</span> temp=rt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> t=T[str[i]-<span class="string">'A'</span>];</span><br><span class="line"><span class="keyword">if</span>(!d[temp].ch[t])newnode(d[temp].ch[t],temp);</span><br><span class="line">temp=d[temp].ch[t];</span><br><span class="line">    &#125;</span><br><span class="line">    d[temp].vis=<span class="number">1</span>;d[temp].pos=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;que;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ac</span><span class="params">()</span></span>&#123;</span><br><span class="line">    que.push(rt);</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> x=que.front();que.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!d[x].ch[i])&#123;d[x].ch[i]=d[d[x].fair].ch[i];<span class="keyword">continue</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!d[x].fair)&#123;d[d[x].ch[i]].fair=rt;que.push(d[x].ch[i]);<span class="keyword">continue</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> temp=d[x].fair;</span><br><span class="line">    <span class="keyword">while</span>(temp&amp;&amp;!d[temp].ch[i])temp=d[temp].fair;</span><br><span class="line">    <span class="keyword">if</span>(!temp)d[d[x].ch[i]].fair=rt;<span class="keyword">else</span> d[d[x].ch[i]].fair=d[temp].ch[i];</span><br><span class="line">    <span class="keyword">if</span>(d[d[d[x].ch[i]].fair].dep&gt;d[d[d[x].ch[i]].pos].dep)d[d[x].ch[i]].pos=d[d[d[x].ch[i]].fair].pos;</span><br><span class="line">    que.push(d[x].ch[i]); </span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>][<span class="number">101</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    T[<span class="string">'A'</span>-<span class="string">'A'</span>]=<span class="number">0</span>;T[<span class="string">'C'</span>-<span class="string">'A'</span>]=<span class="number">1</span>;T[<span class="string">'G'</span>-<span class="string">'A'</span>]=<span class="number">2</span>;T[<span class="string">'T'</span>-<span class="string">'A'</span>]=<span class="number">3</span>;</span><br><span class="line">    n=read();m=read();newnode(rt,<span class="number">0</span>);d[rt].dep=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)<span class="built_in">scanf</span>(<span class="string">"%s"</span>,str),insert(str);</span><br><span class="line">    Ac();dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)&#123;</span><br><span class="line"><span class="keyword">int</span> pos=d[j].ch[k];</span><br><span class="line"><span class="comment">//cout&lt;&lt;j&lt;&lt;"===="&lt;&lt;k&lt;&lt;" "&lt;&lt;pos&lt;&lt;" "&lt;&lt;d[j].ch[k]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(!pos)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;=<span class="number">9</span>;p++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(d[d[pos].pos].dep&gt;p)&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;j&lt;&lt;" "&lt;&lt;k&lt;&lt;" "&lt;&lt;pos&lt;&lt;"::: "&lt;&lt;p&lt;&lt;endl;</span></span><br><span class="line">dp[i+<span class="number">1</span>][pos][<span class="number">0</span>]+=dp[i][j][p];dp[i+<span class="number">1</span>][pos][<span class="number">0</span>]%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">dp[i+<span class="number">1</span>][pos][p+<span class="number">1</span>]+=dp[i][j][p];dp[i+<span class="number">1</span>][pos][p+<span class="number">1</span>]%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;i+1&lt;&lt;":::"&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//for(int j=1;j&lt;=cnt;j++)&#123;</span></span><br><span class="line"><span class="comment">//    for(int k=0;k&lt;=10;k++)cout&lt;&lt;dp[i+1][j][k]&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">//    cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)ans+=dp[n][i][<span class="number">0</span>],ans%=mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定$m$个字符串 问构造长度为$n$的串的方案数&lt;/p&gt;
&lt;p&gt;构造串需满足 对于任意位置 $i$ 都存在一个子区间[l,r] 包含$i$
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="AC自动机" scheme="http://yoursite.com/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>cometOJ#0C.项链与计数(并查集)</title>
    <link href="http://yoursite.com/2019/04/01/cometOJ-0C-%E9%A1%B9%E9%93%BE%E4%B8%8E%E8%AE%A1%E6%95%B0-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://yoursite.com/2019/04/01/cometOJ-0C-项链与计数-并查集/</id>
    <published>2019-04-01T09:00:41.000Z</published>
    <updated>2019-04-01T09:12:14.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在图论中，“简单环” 被定义为一个点数和边数相等的回路，并且这条回路上没有出现重复的点或边。</p><p>对于一个无向图，小象定义 “项链” 是由一些简单环组成的子图，不妨设项链包括 <em>k</em> 个简单环 $C_1, C_2, \ldots…, C_k (k \in \mathbb{N}^+)$，那么项链需要满足：</p><ul><li>当且仅当 $|i - j| \leq 1$ 时，简单环 $C_i $和 $C_j $共用顶点；</li><li>简单环 $C_i$和 $C_{i +1}$恰好共用一个顶点；</li><li>任意两个不同的简单环 $C_i$和 $C_j(i \neq j)$ 没有共用边。</li></ul><p>注意，按照上述定义，一个简单环也可以看做是项链。</p><p>小象画了一个 $n$个点的无向图，其中点被从 $1$到 $n$ 编号。最开始图中没有任何一条边，然后他往图中依次添加了 $m$ 条无向边，整个图逐渐变得复杂起来。</p><p>他很好奇，在他每添加了一条边之后，整个图里存在多少对点 $(u, v)$满足 $u \neq v$且存在一个项链 $C_1,C_2, \ldots…, C_k$使得 $u \in C_1$, $v \in C_k$。需要一提的是，小象认为 $(u, v)$ 和 $(v, u)$ 是相同的点对。</p><p>不妨设在添加了 $i$ 条边后这样的点对数量为 $f(i)$,小象希望你能帮他计算 $\bigoplus\limits_{i = 1}^{m}{(i \cdot f(i))}$的值，这里$ \oplus​$ 表示按位异或运算符</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对于所有的边  构造生成树</p><p>对于所有边根据生成树的形态 分成树边和非树边</p><p>对于加入树边 不会对答案产生影响</p><p>对于加入非树边  则这个树链上任意两点都是满足条件的 我们可以用并查集缩点 并在缩点的过程中维护价值即可</p><p>复杂度$O(n+m)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,double&gt;</span></span></span><br><span class="line"><span class="comment">//#define link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-4</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="comment">//struct edge&#123;int t;double v;edge*next;&#125;e[MAXN&lt;&lt;1],*h[MAXN],*o=e;</span></span><br><span class="line"><span class="comment">//void add(int x,int y,double vul)&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIO</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">200</span>;</span><br><span class="line">    <span class="keyword">int</span> wpos;</span><br><span class="line">    <span class="keyword">char</span> wbuf[S];</span><br><span class="line">    FastIO():wpos(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">xchar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[S];</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> len=<span class="number">0</span>,pos=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(pos==len) pos=<span class="number">0</span>,len=fread(buf,<span class="number">1</span>,S,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">if</span>(pos==len) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> buf[pos++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s=<span class="number">1</span>,c=xchar(),x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;=<span class="number">32</span>) c=xchar();</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'-'</span>) s=<span class="number">-1</span>,c=xchar();</span><br><span class="line">        <span class="keyword">for</span>(;<span class="string">'0'</span>&lt;=c&amp;&amp;c&lt;=<span class="string">'9'</span>;c=xchar()) x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">return</span> x*s;</span><br><span class="line">    &#125;</span><br><span class="line">    ~FastIO()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(wpos) fwrite(wbuf,<span class="number">1</span>,wpos,<span class="built_in">stdout</span>),wpos=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;io;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[MAXN];</span><br><span class="line"><span class="keyword">int</span> f[MAXN],sz[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==f[x])<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> f[x]=find1(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[MAXN],dep[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> deep)</span></span>&#123;</span><br><span class="line">fa[x]=pre;dep[x]=deep+<span class="number">1</span>;vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vec[x][i]==pre)<span class="keyword">continue</span>;</span><br><span class="line">dfs(vec[x][i],x,deep+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;node;</span><br><span class="line">node d[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> T[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> _=io.read();</span><br><span class="line"><span class="keyword">while</span>(_--)&#123;</span><br><span class="line"><span class="keyword">int</span> n=io.read();<span class="keyword">int</span> m=io.read();</span><br><span class="line">inc(i,<span class="number">1</span>,n)f[i]=i;</span><br><span class="line">inc(i,<span class="number">1</span>,n)vec[i].clear(),vis[i]=<span class="number">0</span>;</span><br><span class="line">inc(i,<span class="number">1</span>,m)T[i]=<span class="number">0</span>;</span><br><span class="line">inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">d[i].x=io.read();d[i].y=io.read();</span><br><span class="line"><span class="keyword">int</span> t1=find1(d[i].x);<span class="keyword">int</span> t2=find1(d[i].y);</span><br><span class="line"><span class="keyword">if</span>(t1==t2)<span class="keyword">continue</span>;</span><br><span class="line">f[t1]=t2;T[i]=<span class="number">1</span>;</span><br><span class="line">vec[d[i].x].pb(d[i].y);</span><br><span class="line">vec[d[i].y].pb(d[i].x);</span><br><span class="line">&#125;</span><br><span class="line">inc(i,<span class="number">1</span>,n)<span class="keyword">if</span>(!vis[i])dfs(i,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">inc(i,<span class="number">1</span>,n)f[i]=i,sz[i]=<span class="number">1</span>;</span><br><span class="line">ll ans=<span class="number">0</span>,sum=<span class="number">0</span>,ans1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">if</span>(T[i])&#123;ans^=sum*i;<span class="keyword">continue</span>;&#125;</span><br><span class="line">x=d[i].x;y=d[i].y;</span><br><span class="line"><span class="keyword">if</span>(f[x]==f[y])&#123;ans^=sum*i;<span class="keyword">continue</span>;&#125;</span><br><span class="line">ans1=<span class="number">0</span>;x=find1(x);y=find1(y);</span><br><span class="line"><span class="keyword">while</span>(x!=y)&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y])swap(x,y);</span><br><span class="line">ans1+=sz[x];</span><br><span class="line">sum-=<span class="number">1l</span>l*sz[x]*(sz[x]<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">f[x]=fa[x];</span><br><span class="line">x=find1(x);</span><br><span class="line">&#125;</span><br><span class="line">x=find1(x);</span><br><span class="line">sum-=<span class="number">1l</span>l*sz[x]*(sz[x]<span class="number">-1</span>)/<span class="number">2</span>;sz[x]+=ans1;</span><br><span class="line">sum+=<span class="number">1l</span>l*sz[x]*(sz[x]<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">ans^=sum*i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;在图论中，“简单环” 被定义为一个点数和边数相等的回路，并且这条回路上没有出现重复的点或边。&lt;/p&gt;
&lt;p&gt;对于一个无向图，
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>bzoj4229(并查集)</title>
    <link href="http://yoursite.com/2019/04/01/bzoj4229-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://yoursite.com/2019/04/01/bzoj4229-并查集/</id>
    <published>2019-04-01T08:46:40.000Z</published>
    <updated>2019-04-01T08:57:59.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>现在，我想知道自己是否还有选择。</p><p>给定n个点m条边的无向图以及顺序发生的q个事件。</p><p>每个事件都属于下面两种之一：</p><p>1、删除某一条图上仍存在的边</p><p>2、询问是否存在两条边不相交的路径可以从点u出发到点v</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>神奇的并查集 %%%%</p><p>我们考虑离线下来 从后到前做 把删边处理成加边(注意重边)</p><p>把剩下的边分成两部分 树边和非树边</p><p>然后对于询问上被删除的边 从后往前 分为树边和非树边</p><p>然后把两个部分树边构成生成树  并把初始情况下的非树边加入 对生成树缩点 用并查集维护</p><p>对于询问中还未加入的边 用并查集维护即可</p><p>对于询问的查询  只要判断两点在并查集中是否联通即可</p><p>时间复杂度$O(n+m)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-4</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="keyword">bool</span> T[MAXN];</span><br><span class="line"><span class="keyword">int</span> f[MAXN],F[MAXN];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x])<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x]=find1(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==F[x])<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> F[x]=Find1(F[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,x,y;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node aa,node bb)&#123;</span><br><span class="line">        <span class="keyword">if</span>(aa.x==bb.x)<span class="keyword">return</span> aa.y&lt;bb.y;</span><br><span class="line">        <span class="keyword">return</span> aa.x&lt;bb.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;node;</span><br><span class="line">node d[MAXN],Edge[MAXN];</span><br><span class="line"><span class="built_in">set</span>&lt;node&gt;s;</span><br><span class="line"><span class="built_in">set</span>&lt;node&gt;::iterator ite; </span><br><span class="line"><span class="keyword">char</span> str[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN],use[MAXN];</span><br><span class="line"><span class="keyword">int</span> dep[MAXN],fa[MAXN],sz[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> deep)</span></span>&#123;</span><br><span class="line">    fa[x]=pre;dep[x]=deep+<span class="number">1</span>;vis[x]=<span class="number">1</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">        dfs(j-&gt;t,x,deep+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;S;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();m=read();q=read();</span><br><span class="line">    inc(i,<span class="number">1</span>,n)f[i]=i,F[i]=i,sz[i]=<span class="number">1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        Edge[i].x=read();Edge[i].y=read();</span><br><span class="line">        <span class="keyword">if</span>(Edge[i].x&gt;Edge[i].y)swap(Edge[i].x,Edge[i].y);</span><br><span class="line">        s.insert((node)&#123;i,Edge[i].x,Edge[i].y&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,q)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %d %d"</span>,str,&amp;d[i].x,&amp;d[i].y);</span><br><span class="line">        <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'P'</span>)d[i].id=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(d[i].x&gt;d[i].y)swap(d[i].x,d[i].y);</span><br><span class="line">            d[i].id=<span class="number">1</span>;</span><br><span class="line">            ite=s.lower_bound((node)&#123;<span class="number">0</span>,d[i].x,d[i].y&#125;);</span><br><span class="line">            T[ite-&gt;id]=<span class="number">1</span>;s.erase(ite);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[i])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> t1=find1(Edge[i].x);<span class="keyword">int</span> t2=find1(Edge[i].y);</span><br><span class="line">        <span class="keyword">if</span>(t1==t2)<span class="keyword">continue</span>;</span><br><span class="line">        f[t1]=t2;T[i]=<span class="number">1</span>;</span><br><span class="line">        add(Edge[i].x,Edge[i].y);</span><br><span class="line">        add(Edge[i].y,Edge[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    dec(i,q,<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!d[i].id)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> t1=find1(d[i].x);<span class="keyword">int</span> t2=find1(d[i].y);</span><br><span class="line">        <span class="keyword">if</span>(t1==t2)<span class="keyword">continue</span>;</span><br><span class="line">        f[t1]=t2;use[i]=<span class="number">1</span>;</span><br><span class="line">        add(d[i].x,d[i].y);add(d[i].y,d[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)<span class="keyword">if</span>(!vis[i])dfs(i,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[i])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> x=Edge[i].x;<span class="keyword">int</span> y=Edge[i].y;</span><br><span class="line">        <span class="keyword">if</span>(Find1(x)==Find1(y))<span class="keyword">continue</span>;</span><br><span class="line">        x=Find1(x);y=Find1(y);</span><br><span class="line">        <span class="keyword">while</span>(x!=y)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dep[x]&lt;dep[y])swap(x,y);</span><br><span class="line">            F[x]=fa[x];x=Find1(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dec(i,q,<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!d[i].id)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Find1(d[i].x)==Find1(d[i].y))S.push(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> S.push(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(use[i])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> x=d[i].x;<span class="keyword">int</span> y=d[i].y;</span><br><span class="line">            <span class="keyword">if</span>(Find1(x)==Find1(y))<span class="keyword">continue</span>;</span><br><span class="line">            x=Find1(x);y=Find1(y);</span><br><span class="line">            <span class="keyword">while</span>(x!=y)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dep[x]&lt;dep[y])swap(x,y);</span><br><span class="line">                F[x]=fa[x];x=Find1(x);</span><br><span class="line">            &#125;               </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!S.empty())&#123;</span><br><span class="line">        <span class="keyword">if</span>(S.top())<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        S.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;现在，我想知道自己是否还有选择。&lt;/p&gt;
&lt;p&gt;给定n个点m条边的无向图以及顺序发生的q个事件。&lt;/p&gt;
&lt;p&gt;每个事件都属
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>bzoj1758(点分治+单调队列+二分)</title>
    <link href="http://yoursite.com/2019/03/20/bzoj1758-%E7%82%B9%E5%88%86%E6%B2%BB-%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97-%E4%BA%8C%E5%88%86/"/>
    <id>http://yoursite.com/2019/03/20/bzoj1758-点分治-单调队列-二分/</id>
    <published>2019-03-20T09:18:13.000Z</published>
    <updated>2019-03-20T09:28:52.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>经典$0/1$分数规划 二分答案$ans$</p><p>对于所有的边权减去$ans$</p><p>问题转化成 树上是否存在一条路径 $L&lt;=len&lt;=R$ 并且路径和大于等于0</p><p>比较直观的做法 用点分+线段树查询 复杂度$O(nlog^2nlogw)$  然而会T飞</p><p>我们考虑 每个深度对应的是一段区间 总体来看是滑动窗口 然后我们维护的是窗口里面的最大值 所以用单调队列来维护滑动过程中的区间最大值</p><p>有个优化的地方是 对于子树的枚举顺序 我们应该考虑按照子树深度递增的顺序去枚举子树 这样会保证复杂度是$O(nlognlogw)$ 否则复杂度会退化</p><p>嗯…常数很大 能过全看脸 $xjb$被卡常注意加一些比较有用的剪枝吧</p><p>复杂度$O(nlognlogw)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-4</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;<span class="keyword">double</span> v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">double</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,L,R;</span><br><span class="line"><span class="keyword">int</span> sz[MAXN],rt,key,base,maxx[MAXN];</span><br><span class="line"><span class="keyword">double</span> K;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    get_root(j-&gt;t,x);</span><br><span class="line">    sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> G[MAXN],H[MAXN],dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> dep[MAXN],St[MAXN],tot1;</span><br><span class="line"><span class="keyword">int</span> Maxx;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    H[dep[x]]=max(H[dep[x]],dis[x]);St[++tot1]=x;</span><br><span class="line">    Maxx=max(Maxx,dep[x]);</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    dep[j-&gt;t]=dep[x]+<span class="number">1</span>;dis[j-&gt;t]=dis[x]+j-&gt;v-K;</span><br><span class="line">    dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q[MAXN],ql,qr;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="keyword">int</span> Dep[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">get_dep</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    Dep[y]=max(Dep[y],dep[x]); </span><br><span class="line">    link(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">        dep[j-&gt;t]=dep[x]+<span class="number">1</span>;</span><br><span class="line">        get_dep(j-&gt;t,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,k;<span class="keyword">double</span> y;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node aa,node bb)&#123;<span class="keyword">return</span> aa.k&lt;bb.k;&#125;</span><br><span class="line">&#125;node;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt;vec[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">    dep[j-&gt;t]=<span class="number">1</span>;get_dep(j-&gt;t,x,j-&gt;t);</span><br><span class="line">    vec[x].pb((node)&#123;j-&gt;t,Dep[j-&gt;t],j-&gt;v&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(vec[x].begin(),vec[x].end());</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">    Dep[j-&gt;t]=<span class="number">0</span>;</span><br><span class="line">    key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">    solve1(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;tot1=<span class="number">0</span>;G[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> MAxx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">0</span>;w&lt;vec[x].size();w++)&#123;</span><br><span class="line">    <span class="keyword">int</span> y=vec[x][w].x;</span><br><span class="line">    Maxx=<span class="number">0</span>;dep[y]=<span class="number">1</span>;dis[y]=vec[x][w].y-K;dfs(y,x);</span><br><span class="line">    <span class="keyword">int</span> l=min(MAxx+<span class="number">1</span>,max(<span class="number">0</span>,L-Maxx));<span class="keyword">int</span> r=min(MAxx,max(<span class="number">-1</span>,R-Maxx));ql=<span class="number">1</span>;qr=<span class="number">0</span>;<span class="keyword">double</span> ans=-inf;</span><br><span class="line">    inc(i,l,r)&#123;</span><br><span class="line">        <span class="keyword">while</span>(ql&lt;=qr&amp;&amp;G[i]&gt;G[q[qr]])qr--;</span><br><span class="line">        q[++qr]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    dec(i,Maxx,<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> t1=min(MAxx+<span class="number">1</span>,max(<span class="number">0</span>,L-i));<span class="keyword">int</span> t2=min(MAxx,max(<span class="number">-1</span>,R-i));</span><br><span class="line">        <span class="keyword">if</span>(t1&gt;l)&#123;</span><br><span class="line">        <span class="keyword">while</span>(ql&lt;=qr&amp;&amp;q[ql]&lt;t1)ql++;</span><br><span class="line">        l=t1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t2&gt;r)&#123;</span><br><span class="line">        inc(j,r+<span class="number">1</span>,t2)&#123;</span><br><span class="line">            <span class="keyword">while</span>(ql&lt;=qr&amp;&amp;G[j]&gt;G[q[qr]])qr--;</span><br><span class="line">            q[++qr]=j;</span><br><span class="line">        &#125;</span><br><span class="line">            r=t2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ql&lt;=qr)ans=max(ans,H[i]+G[q[ql]]);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans&gt;=<span class="number">0.000000</span>)flag=<span class="number">1</span>;</span><br><span class="line">        MAxx=max(MAxx,Maxx);</span><br><span class="line">        inc(i,<span class="number">1</span>,Maxx)G[i]=max(G[i],H[i]),H[i]=-inf;</span><br><span class="line">    &#125;</span><br><span class="line">    G[<span class="number">0</span>]=-inf;</span><br><span class="line">    inc(i,<span class="number">1</span>,tot1)G[dep[St[i]]]=-inf;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[j-&gt;t]||L+<span class="number">1</span>&gt;sz[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">        key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">        solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    flag=<span class="number">0</span>;K=x;<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    base=n;key=inf;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    <span class="keyword">if</span>(flag)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();L=read();R=read();</span><br><span class="line">    <span class="keyword">int</span> x,y;<span class="keyword">double</span> z;</span><br><span class="line">    inc(i,<span class="number">2</span>,n)x=read(),y=read(),<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;z),add(x,y,z),add(y,x,z);</span><br><span class="line">    base=n;key=inf;get_root(<span class="number">1</span>,<span class="number">0</span>);solve1(rt);</span><br><span class="line">    inc(i,<span class="number">1</span>,n)G[i]=H[i]=-inf,vis[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> l=<span class="number">1.0</span>;<span class="keyword">double</span> r=<span class="number">1000000.0</span>;<span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;eps)&#123;</span><br><span class="line">        <span class="keyword">double</span> mid=(l+r)/<span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid))ans=mid,l=mid;</span><br><span class="line">        <span class="keyword">else</span> r=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.3f\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>X国遭受了地震的重创, 导致全国的交通近乎瘫痪，重建家园的计划迫在眉睫。X国由N个城市组成, 重建小组提出，仅需建立N-1条道路即可使得任意两个城市互相可达。于是，重建小组很快提出了一个包含N-1条道路的方案，并满足城市之间两两可达，他们还计算评估了每条道路e建设之后可以带来的价值v(e)。</p><p>由于重建计划复杂而艰难，经费也有一定限制。因此，政府要求第一期重建工程修建的道路数目为k条，但需满足L ≤ k ≤ U, 即不应少于L条，但不超过U条。同时，为了最大化利用率，要求建设的这些道路恰好组成一条简单路径，即所建设的k条路径可以构成一个排列$e1 = (p1, q1), e2 = (p2, q2), ek = (pk, qk), 对于 1 ≤ i &lt; k, 有(qi = pi+1)$.</p><p>重建小组打算修改他们的原有方案以满足要求，即在原有的N-1条道路中寻找一条路径S作为新的方案，使得新方案中的道路平均价值</p><p>$AvgValue = \frac{\sum _{e \in S} v(e)}{|S|}​$</p><p>最大。这里v(e)表示道路e的价值，|S|表示新方案中道路的条数。请你帮助重建小组寻找一个最优方案。 注: 在本题中L和U的设置将保证有解。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行包含一个正整数$N$，表示$X$国的城市个数。</p><p>第二行包含两个正整数$L$、$U$，表示政府要求的第一期重建方案中修建道路数的上下限。<br>接下来的$N-1$行描述重建小组的原有方案，每行三个正整数$a_i,b_i,v_i$，分别表示道路$(a_i, b_i)$，其价值为$v_i$。其中城市由$1…N$标号。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>仅包含一行，为一个实数$AvgValue$，即最大平均价值。</p><p>小数点后保留三位。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;经典$0/1$分数规划 二分答案$ans$&lt;/p&gt;
&lt;p&gt;对于所有的边权减去$ans$&lt;/p&gt;
&lt;p&gt;问题转化成 树上是否存在一条路径 $L
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
      <category term="单调队列" scheme="http://yoursite.com/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>hdu5664(点分治+容斥+树状数组)</title>
    <link href="http://yoursite.com/2019/03/19/hdu5664-%E7%82%B9%E5%88%86%E6%B2%BB-%E5%AE%B9%E6%96%A5-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2019/03/19/hdu5664-点分治-容斥-树状数组/</id>
    <published>2019-03-19T13:49:42.000Z</published>
    <updated>2019-03-19T14:03:20.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>很牛逼的点分啊 !!!!!</p><p>我们考虑二分答案 然后直接点分统计大于等于k的点对个数 复杂度$(O(nlog^2nlogw))$ 据说卡卡常数肯定是能过的 但是我们主要用下面这种方法</p><p>我们对于当前重心的子树节点按照点到重心的距离排序 因为点只有$nlogn$个 (点分的性质) 所以预处理复杂度$O(nlog^2n)$ 其次因为你在直接计算的过程中包含了不经过当前重心的点对 所以我们需要去重 同时记录当前重心直接儿子的子树情况 做一个容斥即可..</p><p>对于每一个二分的值 我们用双指针去统计贡献 则check复杂度为$O(nlogn)$</p><p>对于题目另外一个条件 需要满足去掉”直链” 所以我们直接在以m为根的树中把存在$lca(u,v)=u||lca(u,v)=v$的点对删掉即可</p><p>所以总复杂度$O(nlognlogw)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NM=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;ll k;</span><br><span class="line"><span class="keyword">int</span> sz[MAXN],maxx[MAXN],key,rt,base,dep[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">get_root(j-&gt;t,x);</span><br><span class="line">sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> L[MAXN],R[MAXN],tot;</span><br><span class="line"><span class="keyword">int</span> dis[MAXN],st[NM];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt;vec[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)&#123;</span><br><span class="line">    st[tot]=dis[x];tot++;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">dis[j-&gt;t]=dis[x]+j-&gt;v;</span><br><span class="line">_dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tot1,St[NM];</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> __dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)&#123;</span><br><span class="line">    St[tot1]=dis[x];tot1++;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">__dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;L[x]=tot;st[tot]=<span class="number">0</span>;tot++;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">dis[j-&gt;t]=j-&gt;v;_dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">    R[x]=tot<span class="number">-1</span>;sort(st+L[x],st+R[x]+<span class="number">1</span>);</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">pii t;t.first=tot1;__dfs(j-&gt;t,x);</span><br><span class="line">t.second=tot1<span class="number">-1</span>;</span><br><span class="line">sort(St+t.first,St+t.second+<span class="number">1</span>);</span><br><span class="line">vec[x].pb(t);</span><br><span class="line">key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=l;<span class="keyword">int</span> j=r;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j&amp;&amp;st[i]+st[j]&gt;=x)ans+=r-j,j--;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j)ans+=max(<span class="number">0</span>,r-j);</span><br><span class="line">i++;</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=r-j;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc1</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=l;<span class="keyword">int</span> j=r;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j&amp;&amp;St[i]+St[j]&gt;=x)ans+=r-j,j--;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j)ans+=max(<span class="number">0</span>,r-j);</span><br><span class="line">i++;</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=r-j;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="keyword">int</span> d[NM];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    v1.pb(d[x]);v1.pb(d[x]-y);</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">d[j-&gt;t]=d[x]+j-&gt;v;</span><br><span class="line">dfs(j-&gt;t,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans1,T;</span><br><span class="line"><span class="keyword">int</span> sum[NM];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_id</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lower_bound(v1.begin(),v1.begin()+T,x)-v1.begin()+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=T;i+=get_id(i))sum[i]+=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&gt;<span class="number">0</span>;i-=get_id(i))ans+=sum[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    ans1+=query(Get_id(d[x]-y));update(Get_id(d[x]),<span class="number">1</span>);</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">get_sum(j-&gt;t,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    update(Get_id(d[x]),<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;v1.clear();</span><br><span class="line">    inc(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">ans+=calc(L[i],R[i],x);<span class="keyword">int</span> size=vec[i].size();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">    <span class="keyword">int</span> t1=vec[i][j].first;<span class="keyword">int</span> t2=vec[i][j].second;</span><br><span class="line">    ans-=calc1(t1,t2,x);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(m,<span class="number">0</span>,x);sort(v1.begin(),v1.end());</span><br><span class="line">    T=unique(v1.begin(),v1.end())-v1.begin();</span><br><span class="line">    ans1=<span class="number">0</span>;get_sum(m,<span class="number">0</span>,x);ans-=ans1;</span><br><span class="line">    <span class="keyword">if</span>(ans&gt;=k)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _=read();</span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line">tot=tot1=<span class="number">1</span>;<span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));o=e;</span><br><span class="line">n=read();m=read();k=read();</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line">inc(i,<span class="number">2</span>,n)x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z);</span><br><span class="line">key=inf;base=n;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">solve(rt);</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>;<span class="keyword">int</span> r=<span class="number">6e8</span>;<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(check(mid))ans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ans)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">inc(i,<span class="number">1</span>,n)vec[i].clear(),vis[i]=<span class="number">0</span>,d[i]=L[i]=R[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Lady CA has a tree with n points numbered $1,2,…,n$, and each edge has its weight. The unique route connecting two points is called a chain, and the length of a chain equals the sum value of the weights of the edges passed.</p><p>The point number m is called the root. Lady CA defines a special kind of chain called folded chain, the chain connecting the points numbered $x,y(x≠y)$ is called a folded chain, if and only if the chain connecting the point numbered $x$ and the root doesn’t pass the point numbered $y$, and the chain connecting the point numbered yand the root doesn’t pass the point numbered $x$.</p><p>Lady CA wants to find the length of the $kth$ longest folded chain. Notice that the chain connecting the points numbered $x,y$ and the chain connecting the points numbered $y$,$x$ are the same.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line contains an integer $T(1≤T≤3)$——The number of the test cases. For each test case:<br>The first line contains three integers $n(2≤n≤50,000),m(1≤m≤n),k(1≤k≤n×(n−1)/2)$. Between each two adjacent integers there is a white space separated.<br>The second line to the nth line describes the $n−1$ edges in the graph. Each line contains three integers $u,v(1≤u,v≤n,u≠v),w(1≤w≤10,000)$, which means there is an edge which has a weight $w$ connecting the points numbered $u,v$. Between each two adjacent integers there is a white space separated.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, the only line contains the only integer that is the length of the $kth$ longest folded chain. If the $kth$ longest folded chain doesn’t exist, print $NO$.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;很牛逼的点分啊 !!!!!&lt;/p&gt;
&lt;p&gt;我们考虑二分答案 然后直接点分统计大于等于k的点对个数 复杂度$(O(nlog^2nlogw))$
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="容斥" scheme="http://yoursite.com/tags/%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>bzoj4598(点分治+hash)</title>
    <link href="http://yoursite.com/2019/03/19/bzoj4598-%E7%82%B9%E5%88%86%E6%B2%BB-hash/"/>
    <id>http://yoursite.com/2019/03/19/bzoj4598-点分治-hash/</id>
    <published>2019-03-19T01:36:22.000Z</published>
    <updated>2019-03-19T01:46:45.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>点对问题考虑点分</p><p>我们考虑子树合并 有两种情况 分别是当前子树链作为开头或者结尾 对于长度大于$m$和小于等于$m$再分情况讨论下 然后分别维护已经合并完的子树在长度为$x$时 分别作为开头和结尾的情况下的方案数 统计贡献的话 就直接用hash判当前的子串是否合法即可</p><p>hash我们考虑自然溢出 </p><p>时间复杂度 $O(nlogn)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=H1[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*H1[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=H1[x];H1[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> str[MAXN],s[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> sz[MAXN],maxx[MAXN],key,rt,base;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">get_root(j-&gt;t,x);</span><br><span class="line">sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g[MAXN],h[MAXN],g1[MAXN],h1[MAXN];<span class="comment">//g 表示开头 h表示结尾</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> sum[MAXN],dis[MAXN],Dep[MAXN],ma[MAXN],sum1[MAXN];</span><br><span class="line"><span class="keyword">int</span> dep[MAXN];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="keyword">bool</span> G[MAXN],H[MAXN];</span><br><span class="line"><span class="keyword">int</span> st[MAXN],tot,St[MAXN],tot1;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    Dep[dep[x]]=dis[x];</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&lt;=m)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[x]==sum[dep[x]])G[dep[x]]=<span class="number">1</span>,ans+=h[m-dep[x]],g1[dep[x]<span class="number">-1</span>]++;</span><br><span class="line"><span class="keyword">if</span>(dis[x]*ma[m-dep[x]]==sum1[m]-sum1[m-dep[x]])H[dep[x]]=<span class="number">1</span>,ans+=g[m-dep[x]],h1[dep[x]<span class="number">-1</span>]++;</span><br><span class="line">st[++tot]=dep[x]<span class="number">-1</span>;St[++tot1]=dep[x]<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(G[dep[x]-m]&amp;&amp;dis[x]-Dep[dep[x]-m]==ma[dep[x]-m]*sum[m])G[dep[x]]=<span class="number">1</span>,ans+=h[(m-dep[x]%m)%m],g1[(dep[x]%m<span class="number">-1</span>+m)%m]++;</span><br><span class="line"><span class="keyword">if</span>(H[dep[x]-m]&amp;&amp;dis[x]-Dep[dep[x]-m]==ma[dep[x]-m]*sum1[m])H[dep[x]]=<span class="number">1</span>,ans+=g[(m-dep[x]%m)%m],h1[(dep[x]%m<span class="number">-1</span>+m)%m]++;</span><br><span class="line">st[++tot]=(dep[x]%m<span class="number">-1</span>+m)%m;St[++tot1]=(dep[x]%m<span class="number">-1</span>+m)%m;</span><br><span class="line">    &#125;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">dep[j-&gt;t]=dep[x]+<span class="number">1</span>;</span><br><span class="line">dis[j-&gt;t]=dis[x]+ma[dep[j-&gt;t]<span class="number">-1</span>]*str[j-&gt;t];</span><br><span class="line">dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">    G[dep[x]]=H[dep[x]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;tot1=<span class="number">0</span>;g[<span class="number">0</span>]=h[<span class="number">0</span>]=<span class="number">1</span>;dis[x]=str[x];Dep[<span class="number">1</span>]=dis[x];</span><br><span class="line">    <span class="keyword">if</span>(str[x]==s[m])H[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(str[x]==s[<span class="number">1</span>])G[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">tot=<span class="number">0</span>;dep[j-&gt;t]=<span class="number">2</span>;dis[j-&gt;t]=dis[x]+ma[dep[j-&gt;t]<span class="number">-1</span>]*str[j-&gt;t];dfs(j-&gt;t,x);</span><br><span class="line">inc(i,<span class="number">1</span>,tot)g[st[i]]+=g1[st[i]],g1[st[i]]=<span class="number">0</span>,h[st[i]]+=h1[st[i]],h1[st[i]]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,tot1)g[St[i]]=h[St[i]]=<span class="number">0</span>;</span><br><span class="line">    g[<span class="number">0</span>]=h[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _=read();ma[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,<span class="number">1e6</span>)ma[i]=ma[i<span class="number">-1</span>]*<span class="number">131</span>;</span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line"><span class="built_in">memset</span>(H1,<span class="number">0</span>,<span class="keyword">sizeof</span>(H1));o=e;</span><br><span class="line">n=read();m=read();</span><br><span class="line">inc(i,<span class="number">1</span>,n)vis[i]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x,y;ans=<span class="number">0</span>;</span><br><span class="line">inc(i,<span class="number">2</span>,n)x=read(),y=read(),add(x,y),add(y,x);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">inc(i,<span class="number">1</span>,m)sum[i]=sum[i<span class="number">-1</span>]*<span class="number">131</span>+s[i],sum1[i]=sum1[i<span class="number">-1</span>]+ma[i<span class="number">-1</span>]*s[i];</span><br><span class="line">key=inf;base=n;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">solve(rt);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出$n$个结点的树结构$T$，其中每一个结点上有一个字符，这里我们所说的字符只考虑大写字母$A$到$Z$,再给出长度为$m$的模式串$s$，其中每一位仍然是$A$到$Z$的大写字母。$Alice$希望知道，有多少对结点$&lt;u,v&gt;$满足$T$上从$U$到$V$的最短路径形成的字符串可以由模式串$S$重复若干次得到？这里结点对$&lt;u,v&gt;$是有序的，也就是说$&lt;u,v&gt;和&lt;v,u&gt;$需要被区分.所谓模式串的重复，是将若干个模式串$S$依次相接（不能重叠).例如当$S=PLUS$的时候，重复两次会得到$PLUSPLUS$，重复三次会得到$PLUSPLUSPLUS$,同时要注恿，重复必须是整数次的。例如当S=$XYXY$时，因为必须重复整数次，所以$XYXYXY$不能看作是$S$重复若干次得到的。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>每一个数据有多组测试，</p><p>第一行输入一个整数$C$，表示总的测试个数。</p><p>对于每一组测试来说：</p><p>第一行输入两个整数，分别表示树$T$的结点个数$n$与模式长度$m$。结点被依次编号为$1$到$n$，之后一行，依次给出了$n$个大写字母（以一个长度为$n$的字符串的形式给出），依次对应树上每一个结点上的字符（第$i$个字符对应了第$i$个结点).之后$n-1$行，每行有两个整数$u$和$v$表示树上的一条无向边，之后一行给定一个长度为$m$的由大写字母组成的字符串，为模式串$S$。</p><p>$1&lt;=C&lt;=10,3&lt;=N&lt;=10^6,3&lt;=M&lt;=10^6$</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>给出$C$行，对应$C$组测试。每一行输出一个整数，表示有多少对节点$&lt;u,v&gt;$满足从$u$到$v$的路径形成的字符串恰好是模式串的若干次重复.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;点对问题考虑点分&lt;/p&gt;
&lt;p&gt;我们考虑子树合并 有两种情况 分别是当前子树链作为开头或者结尾 对于长度大于$m$和小于等于$m$再分情况讨
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
      <category term="hash" scheme="http://yoursite.com/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>bzoj3648(点分治+树状数组)</title>
    <link href="http://yoursite.com/2019/03/15/bzoj3648-%E7%82%B9%E5%88%86%E6%B2%BB-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2019/03/15/bzoj3648-点分治-树状数组/</id>
    <published>2019-03-15T13:40:53.000Z</published>
    <updated>2019-03-15T14:26:53.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>分为两部分 </p><p>对于树形结构  直接点分 然后排序/树状数组统计贡献</p><p>对于基环树结构  我们先把环取出来 以环上的点为根做点分治 统计每个子树内的贡献 然后考虑环上点的相互影响 对于每个子树维护每种深度的个数 然后我们可以考虑到每个点作用的是一段连续区间 可以采用树状数组来维护答案 时间复杂度是$O(nlogn)$ 至于环上点的维护 就是变环为链 然后维护即可</p><p>时间复杂度 $O(nlog^2n)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> st[MAXN],tot,num[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="keyword">int</span> f[MAXN],fa[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x])<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x]=find1(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> rt,key,maxx[MAXN],sz[MAXN],base;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    get_root(j-&gt;t,x);</span><br><span class="line">    sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="keyword">int</span> sum[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=get_id(i))sum[i]+=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=get_id(i))sum[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&gt;<span class="number">0</span>;i-=get_id(i))ans1+=sum[i];</span><br><span class="line">    <span class="keyword">return</span> ans1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> St[MAXN],tot1;</span><br><span class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)&#123;</span><br><span class="line">    <span class="keyword">if</span>(dis[x]&lt;=k)ans+=Sum(n)-Sum(k-dis[x]);<span class="keyword">else</span> ans+=Sum(n);</span><br><span class="line">    st[++tot]=x;St[++tot1]=x;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    dis[j-&gt;t]=dis[x]+<span class="number">1</span>;</span><br><span class="line">    _dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;tot1=<span class="number">0</span>;update(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">    tot=<span class="number">0</span>;dis[j-&gt;t]=<span class="number">2</span>;_dfs(j-&gt;t,x);</span><br><span class="line">    inc(i,<span class="number">1</span>,tot)update(dis[st[i]],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,tot1)clear(dis[St[i]]);</span><br><span class="line">    clear(<span class="number">1</span>);</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">    key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> dep[MAXN];</span><br><span class="line"><span class="keyword">int</span> qko[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=<span class="number">3</span>*n;i+=get_id(i))qko[i]+=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&gt;<span class="number">0</span>;i-=get_id(i))ans1+=qko[i];</span><br><span class="line">    <span class="keyword">return</span> ans1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> Maxx;</span><br><span class="line"><span class="keyword">void</span> __dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> deep)&#123;</span><br><span class="line">    dep[deep]++;Maxx=max(Maxx,deep);</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    __dfs(j-&gt;t,x,deep+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;node;</span><br><span class="line">node que[MAXN];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> Num[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;Vec[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    fa[x]=pre;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Vec[x].size();i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(Vec[x][i]==pre)<span class="keyword">continue</span>;</span><br><span class="line">    dfs(Vec[x][i],x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();m=read();k=read();</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)f[i]=i;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)x=read(),y=read(),add(x,y),add(y,x),que[i]=(node)&#123;x,y&#125;;</span><br><span class="line">    x=<span class="number">0</span>;y=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">    <span class="keyword">int</span> t1=find1(que[i].x);<span class="keyword">int</span> t2=find1(que[i].y);</span><br><span class="line">    <span class="keyword">if</span>(t1==t2)&#123;x=que[i].x;y=que[i].y;<span class="keyword">continue</span>;&#125;</span><br><span class="line">    Vec[que[i].x].pb(que[i].y);</span><br><span class="line">    Vec[que[i].y].pb(que[i].x);</span><br><span class="line">    f[t1]=t2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x)&#123;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">int</span> x1=x;<span class="keyword">int</span> y1=y;</span><br><span class="line">    <span class="keyword">while</span>(x)Num[x]++,x=fa[x];</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Num[y])&#123;root=y;<span class="keyword">break</span>;&#125;</span><br><span class="line">        y=fa[y];</span><br><span class="line">    &#125;</span><br><span class="line">    x=x1;y=y1;</span><br><span class="line">    <span class="keyword">while</span>(x!=root)vec.pb(x),x=fa[x];</span><br><span class="line">    vec.pb(root);<span class="keyword">int</span> t=vec.size();</span><br><span class="line">    <span class="keyword">while</span>(y!=root)vec.pb(y),y=fa[y];</span><br><span class="line">    reverse(vec.begin()+t,vec.end());</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)vis[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t=vec.size();</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t)&#123;</span><br><span class="line">     inc(i,<span class="number">0</span>,t<span class="number">-1</span>)vis[vec[i]]=<span class="number">1</span>;</span><br><span class="line">     inc(i,<span class="number">0</span>,t<span class="number">-1</span>)&#123;</span><br><span class="line">         vis[vec[i]]=<span class="number">0</span>;</span><br><span class="line">         base=num[vec[i]];key=inf;get_root(vec[i],<span class="number">0</span>);</span><br><span class="line">         solve(rt);</span><br><span class="line">         vis[vec[i]]=<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)vis[i]=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">0</span>,t<span class="number">-1</span>)vis[vec[i]]=<span class="number">1</span>;</span><br><span class="line">    vis[vec[<span class="number">0</span>]]=<span class="number">0</span>;Maxx=<span class="number">0</span>;__dfs(vec[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>);vis[vec[<span class="number">0</span>]]=<span class="number">1</span>;</span><br><span class="line">    inc(i,<span class="number">0</span>,t<span class="number">-2</span>)vec.pb(vec[i]);</span><br><span class="line">    inc(i,<span class="number">1</span>,Maxx)&#123;</span><br><span class="line">        <span class="keyword">int</span> l=max(<span class="number">1</span>,k+<span class="number">1</span>-i);<span class="keyword">int</span> r=<span class="number">1</span>+t;</span><br><span class="line">        update1(l,dep[i]);</span><br><span class="line">        dep[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;vec.size();i++)&#123;</span><br><span class="line">        vis[vec[i]]=<span class="number">0</span>;Maxx=<span class="number">0</span>;__dfs(vec[i],<span class="number">0</span>,<span class="number">1</span>);vis[vec[i]]=<span class="number">1</span>;</span><br><span class="line">        inc(j,<span class="number">1</span>,Maxx)&#123;</span><br><span class="line">        <span class="keyword">int</span> l=max(i+<span class="number">1</span>,k+i+<span class="number">1</span>-j-t);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=t)update1(l,-dep[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        inc(j,<span class="number">1</span>,Maxx)&#123;</span><br><span class="line">        <span class="keyword">int</span> pos=i+j;</span><br><span class="line">        ans+=<span class="number">1l</span>l*Sum1(pos)*dep[j];</span><br><span class="line">        &#125;</span><br><span class="line">        inc(j,<span class="number">1</span>,Maxx)&#123;</span><br><span class="line">        <span class="keyword">int</span> l=max(i+<span class="number">1</span>,k+i+<span class="number">1</span>-j);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;t)update1(l,dep[j]);</span><br><span class="line">        dep[j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    base=n;key=inf;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>T64有一个好朋友，叫T128。T128是寄宿生，并且最近被老师叫过去当宿管了。宿管可不是一件很好做的工作，碰巧T128有一个工作上的问题想请T64帮忙解决。T128的寝室条件不是很好，所以没有很多钱来装修。礼间寝室仅由$n-1$条双向道路连接，而且任意两间寝室之间都可以互达。最近，T128被要求对一条路径上的所有寝室进行管理，这条路径不会重复经过某个点或某条边。但他不记得是哪条路径了。他只记得这条路径上有不少于$k$个寝室。于是，他想请T64帮忙数一下，有多少条这样的路径满足条件。嗯…还有一个问题。由于最近有一些熊孩子不准晚上讲话很不爽，他们决定修筑一条“情报通道”，如果通道建成，寝室就变成了一个$N$个点$N$条边的无向图。并且，经过“情报通道”的路径也是合法的。T128心想：通道建成之前，T64还有一个高效的算法帮我数路径条数，但是通道建成之后，他还有办法吗？对，T64手忙脚乱，根本数不清有多少条路径。于是他找到了你。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行为三个正整数$N$，$M$，$K（2 ≤ K ≤ N）$，代表有$n$间寝室，$m$条边连接它们$n-1 ≤ m ≤ N$；</p><p>$m= n-1$意味着“情报遁道”未被修好；$m=n$意味着“情报通道”已被修好），以及题目描述中的$K$。</p><p>接下来$m$行，每行两个正整数$z$，$y$，代表第$x$间寝室与第$y$间寝室之间有一条双向边。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>仅包含一个整数，代表经过至少$K$间寝室的路径条数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;分为两部分 &lt;/p&gt;
&lt;p&gt;对于树形结构  直接点分 然后排序/树状数组统计贡献&lt;/p&gt;
&lt;p&gt;对于基环树结构  我们先把环取出来 以环上的
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
