<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wang9897</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-02T13:05:41.526Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wang9897</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cf86C(AC自动机+dp)</title>
    <link href="http://yoursite.com/2019/04/02/cf86C-AC%E8%87%AA%E5%8A%A8%E6%9C%BA-dp/"/>
    <id>http://yoursite.com/2019/04/02/cf86C-AC自动机-dp/</id>
    <published>2019-04-02T12:52:49.000Z</published>
    <updated>2019-04-02T13:05:41.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$m$个字符串 问构造长度为$n$的串的方案数</p><p>构造串需满足 对于任意位置 $i$ 都存在一个子区间[l,r] 包含$i$且子区间对应m个串中的任意一个</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>AC自动机+DP</p><p>我们可以设$dp[i][j][k]$ 表示已经构造了长度为$i$的串 且在自动机中第$j$状态  且存在$k$字符属于失配状态</p><p>对于每个位置  我们找到其在自动机上 m个串为其后缀的最长的那个串的长度</p><p>设加入四种字符其中一个后达到的目的状态为$x$ 当前状态为$y$</p><p>那么转移就是</p><p>若当前失配的长度$k&lt;maxdis$ 那么  $dp[i+1][x][0]+=dp[i][y][k]$</p><p>反之则 $dp[i+1][x][k+1]+=dp[i][y][k]$</p><p>复杂度为$O(NM*400)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T[MAXN];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> dep,ch[<span class="number">4</span>],fair,pos;</span><br><span class="line">    <span class="keyword">bool</span> vis;</span><br><span class="line">&#125;node;</span><br><span class="line"><span class="keyword">int</span> rt,n,m,cnt;</span><br><span class="line">node d[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x=++cnt;d[x].dep=d[y].dep+<span class="number">1</span>;d[x].fair=<span class="number">0</span>;</span><br><span class="line">    d[x].pos=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> str[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);<span class="keyword">int</span> temp=rt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> t=T[str[i]-<span class="string">'A'</span>];</span><br><span class="line"><span class="keyword">if</span>(!d[temp].ch[t])newnode(d[temp].ch[t],temp);</span><br><span class="line">temp=d[temp].ch[t];</span><br><span class="line">    &#125;</span><br><span class="line">    d[temp].vis=<span class="number">1</span>;d[temp].pos=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;que;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ac</span><span class="params">()</span></span>&#123;</span><br><span class="line">    que.push(rt);</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> x=que.front();que.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!d[x].ch[i])&#123;d[x].ch[i]=d[d[x].fair].ch[i];<span class="keyword">continue</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!d[x].fair)&#123;d[d[x].ch[i]].fair=rt;que.push(d[x].ch[i]);<span class="keyword">continue</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> temp=d[x].fair;</span><br><span class="line">    <span class="keyword">while</span>(temp&amp;&amp;!d[temp].ch[i])temp=d[temp].fair;</span><br><span class="line">    <span class="keyword">if</span>(!temp)d[d[x].ch[i]].fair=rt;<span class="keyword">else</span> d[d[x].ch[i]].fair=d[temp].ch[i];</span><br><span class="line">    <span class="keyword">if</span>(d[d[d[x].ch[i]].fair].dep&gt;d[d[d[x].ch[i]].pos].dep)d[d[x].ch[i]].pos=d[d[d[x].ch[i]].fair].pos;</span><br><span class="line">    que.push(d[x].ch[i]); </span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>][<span class="number">101</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    T[<span class="string">'A'</span>-<span class="string">'A'</span>]=<span class="number">0</span>;T[<span class="string">'C'</span>-<span class="string">'A'</span>]=<span class="number">1</span>;T[<span class="string">'G'</span>-<span class="string">'A'</span>]=<span class="number">2</span>;T[<span class="string">'T'</span>-<span class="string">'A'</span>]=<span class="number">3</span>;</span><br><span class="line">    n=read();m=read();newnode(rt,<span class="number">0</span>);d[rt].dep=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)<span class="built_in">scanf</span>(<span class="string">"%s"</span>,str),insert(str);</span><br><span class="line">    Ac();dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)&#123;</span><br><span class="line"><span class="keyword">int</span> pos=d[j].ch[k];</span><br><span class="line"><span class="comment">//cout&lt;&lt;j&lt;&lt;"===="&lt;&lt;k&lt;&lt;" "&lt;&lt;pos&lt;&lt;" "&lt;&lt;d[j].ch[k]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(!pos)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;=<span class="number">9</span>;p++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(d[d[pos].pos].dep&gt;p)&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;j&lt;&lt;" "&lt;&lt;k&lt;&lt;" "&lt;&lt;pos&lt;&lt;"::: "&lt;&lt;p&lt;&lt;endl;</span></span><br><span class="line">dp[i+<span class="number">1</span>][pos][<span class="number">0</span>]+=dp[i][j][p];dp[i+<span class="number">1</span>][pos][<span class="number">0</span>]%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">dp[i+<span class="number">1</span>][pos][p+<span class="number">1</span>]+=dp[i][j][p];dp[i+<span class="number">1</span>][pos][p+<span class="number">1</span>]%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;i+1&lt;&lt;":::"&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//for(int j=1;j&lt;=cnt;j++)&#123;</span></span><br><span class="line"><span class="comment">//    for(int k=0;k&lt;=10;k++)cout&lt;&lt;dp[i+1][j][k]&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">//    cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)ans+=dp[n][i][<span class="number">0</span>],ans%=mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定$m$个字符串 问构造长度为$n$的串的方案数&lt;/p&gt;
&lt;p&gt;构造串需满足 对于任意位置 $i$ 都存在一个子区间[l,r] 包含$i$
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="AC自动机" scheme="http://yoursite.com/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>cometOJ#0C.项链与计数(并查集)</title>
    <link href="http://yoursite.com/2019/04/01/cometOJ-0C-%E9%A1%B9%E9%93%BE%E4%B8%8E%E8%AE%A1%E6%95%B0-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://yoursite.com/2019/04/01/cometOJ-0C-项链与计数-并查集/</id>
    <published>2019-04-01T09:00:41.000Z</published>
    <updated>2019-04-01T09:12:14.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在图论中，“简单环” 被定义为一个点数和边数相等的回路，并且这条回路上没有出现重复的点或边。</p><p>对于一个无向图，小象定义 “项链” 是由一些简单环组成的子图，不妨设项链包括 <em>k</em> 个简单环 $C_1, C_2, \ldots…, C_k (k \in \mathbb{N}^+)$，那么项链需要满足：</p><ul><li>当且仅当 $|i - j| \leq 1$ 时，简单环 $C_i $和 $C_j $共用顶点；</li><li>简单环 $C_i$和 $C_{i +1}$恰好共用一个顶点；</li><li>任意两个不同的简单环 $C_i$和 $C_j(i \neq j)$ 没有共用边。</li></ul><p>注意，按照上述定义，一个简单环也可以看做是项链。</p><p>小象画了一个 $n$个点的无向图，其中点被从 $1$到 $n$ 编号。最开始图中没有任何一条边，然后他往图中依次添加了 $m$ 条无向边，整个图逐渐变得复杂起来。</p><p>他很好奇，在他每添加了一条边之后，整个图里存在多少对点 $(u, v)$满足 $u \neq v$且存在一个项链 $C_1,C_2, \ldots…, C_k$使得 $u \in C_1$, $v \in C_k$。需要一提的是，小象认为 $(u, v)$ 和 $(v, u)$ 是相同的点对。</p><p>不妨设在添加了 $i$ 条边后这样的点对数量为 $f(i)$,小象希望你能帮他计算 $\bigoplus\limits_{i = 1}^{m}{(i \cdot f(i))}$的值，这里$ \oplus​$ 表示按位异或运算符</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对于所有的边  构造生成树</p><p>对于所有边根据生成树的形态 分成树边和非树边</p><p>对于加入树边 不会对答案产生影响</p><p>对于加入非树边  则这个树链上任意两点都是满足条件的 我们可以用并查集缩点 并在缩点的过程中维护价值即可</p><p>复杂度$O(n+m)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,double&gt;</span></span></span><br><span class="line"><span class="comment">//#define link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-4</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="comment">//struct edge&#123;int t;double v;edge*next;&#125;e[MAXN&lt;&lt;1],*h[MAXN],*o=e;</span></span><br><span class="line"><span class="comment">//void add(int x,int y,double vul)&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIO</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">200</span>;</span><br><span class="line">    <span class="keyword">int</span> wpos;</span><br><span class="line">    <span class="keyword">char</span> wbuf[S];</span><br><span class="line">    FastIO():wpos(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">xchar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[S];</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> len=<span class="number">0</span>,pos=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(pos==len) pos=<span class="number">0</span>,len=fread(buf,<span class="number">1</span>,S,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">if</span>(pos==len) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> buf[pos++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s=<span class="number">1</span>,c=xchar(),x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;=<span class="number">32</span>) c=xchar();</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'-'</span>) s=<span class="number">-1</span>,c=xchar();</span><br><span class="line">        <span class="keyword">for</span>(;<span class="string">'0'</span>&lt;=c&amp;&amp;c&lt;=<span class="string">'9'</span>;c=xchar()) x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">return</span> x*s;</span><br><span class="line">    &#125;</span><br><span class="line">    ~FastIO()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(wpos) fwrite(wbuf,<span class="number">1</span>,wpos,<span class="built_in">stdout</span>),wpos=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;io;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[MAXN];</span><br><span class="line"><span class="keyword">int</span> f[MAXN],sz[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==f[x])<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> f[x]=find1(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[MAXN],dep[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> deep)</span></span>&#123;</span><br><span class="line">fa[x]=pre;dep[x]=deep+<span class="number">1</span>;vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vec[x][i]==pre)<span class="keyword">continue</span>;</span><br><span class="line">dfs(vec[x][i],x,deep+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;node;</span><br><span class="line">node d[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> T[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> _=io.read();</span><br><span class="line"><span class="keyword">while</span>(_--)&#123;</span><br><span class="line"><span class="keyword">int</span> n=io.read();<span class="keyword">int</span> m=io.read();</span><br><span class="line">inc(i,<span class="number">1</span>,n)f[i]=i;</span><br><span class="line">inc(i,<span class="number">1</span>,n)vec[i].clear(),vis[i]=<span class="number">0</span>;</span><br><span class="line">inc(i,<span class="number">1</span>,m)T[i]=<span class="number">0</span>;</span><br><span class="line">inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">d[i].x=io.read();d[i].y=io.read();</span><br><span class="line"><span class="keyword">int</span> t1=find1(d[i].x);<span class="keyword">int</span> t2=find1(d[i].y);</span><br><span class="line"><span class="keyword">if</span>(t1==t2)<span class="keyword">continue</span>;</span><br><span class="line">f[t1]=t2;T[i]=<span class="number">1</span>;</span><br><span class="line">vec[d[i].x].pb(d[i].y);</span><br><span class="line">vec[d[i].y].pb(d[i].x);</span><br><span class="line">&#125;</span><br><span class="line">inc(i,<span class="number">1</span>,n)<span class="keyword">if</span>(!vis[i])dfs(i,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">inc(i,<span class="number">1</span>,n)f[i]=i,sz[i]=<span class="number">1</span>;</span><br><span class="line">ll ans=<span class="number">0</span>,sum=<span class="number">0</span>,ans1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">if</span>(T[i])&#123;ans^=sum*i;<span class="keyword">continue</span>;&#125;</span><br><span class="line">x=d[i].x;y=d[i].y;</span><br><span class="line"><span class="keyword">if</span>(f[x]==f[y])&#123;ans^=sum*i;<span class="keyword">continue</span>;&#125;</span><br><span class="line">ans1=<span class="number">0</span>;x=find1(x);y=find1(y);</span><br><span class="line"><span class="keyword">while</span>(x!=y)&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y])swap(x,y);</span><br><span class="line">ans1+=sz[x];</span><br><span class="line">sum-=<span class="number">1l</span>l*sz[x]*(sz[x]<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">f[x]=fa[x];</span><br><span class="line">x=find1(x);</span><br><span class="line">&#125;</span><br><span class="line">x=find1(x);</span><br><span class="line">sum-=<span class="number">1l</span>l*sz[x]*(sz[x]<span class="number">-1</span>)/<span class="number">2</span>;sz[x]+=ans1;</span><br><span class="line">sum+=<span class="number">1l</span>l*sz[x]*(sz[x]<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">ans^=sum*i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;在图论中，“简单环” 被定义为一个点数和边数相等的回路，并且这条回路上没有出现重复的点或边。&lt;/p&gt;
&lt;p&gt;对于一个无向图，
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>bzoj4229(并查集)</title>
    <link href="http://yoursite.com/2019/04/01/bzoj4229-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://yoursite.com/2019/04/01/bzoj4229-并查集/</id>
    <published>2019-04-01T08:46:40.000Z</published>
    <updated>2019-04-01T08:57:59.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>现在，我想知道自己是否还有选择。</p><p>给定n个点m条边的无向图以及顺序发生的q个事件。</p><p>每个事件都属于下面两种之一：</p><p>1、删除某一条图上仍存在的边</p><p>2、询问是否存在两条边不相交的路径可以从点u出发到点v</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>神奇的并查集 %%%%</p><p>我们考虑离线下来 从后到前做 把删边处理成加边(注意重边)</p><p>把剩下的边分成两部分 树边和非树边</p><p>然后对于询问上被删除的边 从后往前 分为树边和非树边</p><p>然后把两个部分树边构成生成树  并把初始情况下的非树边加入 对生成树缩点 用并查集维护</p><p>对于询问中还未加入的边 用并查集维护即可</p><p>对于询问的查询  只要判断两点在并查集中是否联通即可</p><p>时间复杂度$O(n+m)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-4</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="keyword">bool</span> T[MAXN];</span><br><span class="line"><span class="keyword">int</span> f[MAXN],F[MAXN];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x])<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x]=find1(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==F[x])<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> F[x]=Find1(F[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,x,y;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node aa,node bb)&#123;</span><br><span class="line">        <span class="keyword">if</span>(aa.x==bb.x)<span class="keyword">return</span> aa.y&lt;bb.y;</span><br><span class="line">        <span class="keyword">return</span> aa.x&lt;bb.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;node;</span><br><span class="line">node d[MAXN],Edge[MAXN];</span><br><span class="line"><span class="built_in">set</span>&lt;node&gt;s;</span><br><span class="line"><span class="built_in">set</span>&lt;node&gt;::iterator ite; </span><br><span class="line"><span class="keyword">char</span> str[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN],use[MAXN];</span><br><span class="line"><span class="keyword">int</span> dep[MAXN],fa[MAXN],sz[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> deep)</span></span>&#123;</span><br><span class="line">    fa[x]=pre;dep[x]=deep+<span class="number">1</span>;vis[x]=<span class="number">1</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">        dfs(j-&gt;t,x,deep+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;S;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();m=read();q=read();</span><br><span class="line">    inc(i,<span class="number">1</span>,n)f[i]=i,F[i]=i,sz[i]=<span class="number">1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        Edge[i].x=read();Edge[i].y=read();</span><br><span class="line">        <span class="keyword">if</span>(Edge[i].x&gt;Edge[i].y)swap(Edge[i].x,Edge[i].y);</span><br><span class="line">        s.insert((node)&#123;i,Edge[i].x,Edge[i].y&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,q)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %d %d"</span>,str,&amp;d[i].x,&amp;d[i].y);</span><br><span class="line">        <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'P'</span>)d[i].id=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(d[i].x&gt;d[i].y)swap(d[i].x,d[i].y);</span><br><span class="line">            d[i].id=<span class="number">1</span>;</span><br><span class="line">            ite=s.lower_bound((node)&#123;<span class="number">0</span>,d[i].x,d[i].y&#125;);</span><br><span class="line">            T[ite-&gt;id]=<span class="number">1</span>;s.erase(ite);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[i])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> t1=find1(Edge[i].x);<span class="keyword">int</span> t2=find1(Edge[i].y);</span><br><span class="line">        <span class="keyword">if</span>(t1==t2)<span class="keyword">continue</span>;</span><br><span class="line">        f[t1]=t2;T[i]=<span class="number">1</span>;</span><br><span class="line">        add(Edge[i].x,Edge[i].y);</span><br><span class="line">        add(Edge[i].y,Edge[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    dec(i,q,<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!d[i].id)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> t1=find1(d[i].x);<span class="keyword">int</span> t2=find1(d[i].y);</span><br><span class="line">        <span class="keyword">if</span>(t1==t2)<span class="keyword">continue</span>;</span><br><span class="line">        f[t1]=t2;use[i]=<span class="number">1</span>;</span><br><span class="line">        add(d[i].x,d[i].y);add(d[i].y,d[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)<span class="keyword">if</span>(!vis[i])dfs(i,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[i])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> x=Edge[i].x;<span class="keyword">int</span> y=Edge[i].y;</span><br><span class="line">        <span class="keyword">if</span>(Find1(x)==Find1(y))<span class="keyword">continue</span>;</span><br><span class="line">        x=Find1(x);y=Find1(y);</span><br><span class="line">        <span class="keyword">while</span>(x!=y)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dep[x]&lt;dep[y])swap(x,y);</span><br><span class="line">            F[x]=fa[x];x=Find1(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dec(i,q,<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!d[i].id)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Find1(d[i].x)==Find1(d[i].y))S.push(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> S.push(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(use[i])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> x=d[i].x;<span class="keyword">int</span> y=d[i].y;</span><br><span class="line">            <span class="keyword">if</span>(Find1(x)==Find1(y))<span class="keyword">continue</span>;</span><br><span class="line">            x=Find1(x);y=Find1(y);</span><br><span class="line">            <span class="keyword">while</span>(x!=y)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dep[x]&lt;dep[y])swap(x,y);</span><br><span class="line">                F[x]=fa[x];x=Find1(x);</span><br><span class="line">            &#125;               </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!S.empty())&#123;</span><br><span class="line">        <span class="keyword">if</span>(S.top())<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        S.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;现在，我想知道自己是否还有选择。&lt;/p&gt;
&lt;p&gt;给定n个点m条边的无向图以及顺序发生的q个事件。&lt;/p&gt;
&lt;p&gt;每个事件都属
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>bzoj1758(点分治+单调队列+二分)</title>
    <link href="http://yoursite.com/2019/03/20/bzoj1758-%E7%82%B9%E5%88%86%E6%B2%BB-%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97-%E4%BA%8C%E5%88%86/"/>
    <id>http://yoursite.com/2019/03/20/bzoj1758-点分治-单调队列-二分/</id>
    <published>2019-03-20T09:18:13.000Z</published>
    <updated>2019-03-20T09:28:52.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>经典$0/1$分数规划 二分答案$ans$</p><p>对于所有的边权减去$ans$</p><p>问题转化成 树上是否存在一条路径 $L&lt;=len&lt;=R$ 并且路径和大于等于0</p><p>比较直观的做法 用点分+线段树查询 复杂度$O(nlog^2nlogw)$  然而会T飞</p><p>我们考虑 每个深度对应的是一段区间 总体来看是滑动窗口 然后我们维护的是窗口里面的最大值 所以用单调队列来维护滑动过程中的区间最大值</p><p>有个优化的地方是 对于子树的枚举顺序 我们应该考虑按照子树深度递增的顺序去枚举子树 这样会保证复杂度是$O(nlognlogw)$ 否则复杂度会退化</p><p>嗯…常数很大 能过全看脸 $xjb$被卡常注意加一些比较有用的剪枝吧</p><p>复杂度$O(nlognlogw)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-4</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;<span class="keyword">double</span> v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">double</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,L,R;</span><br><span class="line"><span class="keyword">int</span> sz[MAXN],rt,key,base,maxx[MAXN];</span><br><span class="line"><span class="keyword">double</span> K;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    get_root(j-&gt;t,x);</span><br><span class="line">    sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> G[MAXN],H[MAXN],dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> dep[MAXN],St[MAXN],tot1;</span><br><span class="line"><span class="keyword">int</span> Maxx;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    H[dep[x]]=max(H[dep[x]],dis[x]);St[++tot1]=x;</span><br><span class="line">    Maxx=max(Maxx,dep[x]);</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    dep[j-&gt;t]=dep[x]+<span class="number">1</span>;dis[j-&gt;t]=dis[x]+j-&gt;v-K;</span><br><span class="line">    dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q[MAXN],ql,qr;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="keyword">int</span> Dep[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">get_dep</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    Dep[y]=max(Dep[y],dep[x]); </span><br><span class="line">    link(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">        dep[j-&gt;t]=dep[x]+<span class="number">1</span>;</span><br><span class="line">        get_dep(j-&gt;t,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,k;<span class="keyword">double</span> y;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node aa,node bb)&#123;<span class="keyword">return</span> aa.k&lt;bb.k;&#125;</span><br><span class="line">&#125;node;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt;vec[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">    dep[j-&gt;t]=<span class="number">1</span>;get_dep(j-&gt;t,x,j-&gt;t);</span><br><span class="line">    vec[x].pb((node)&#123;j-&gt;t,Dep[j-&gt;t],j-&gt;v&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(vec[x].begin(),vec[x].end());</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">    Dep[j-&gt;t]=<span class="number">0</span>;</span><br><span class="line">    key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">    solve1(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;tot1=<span class="number">0</span>;G[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> MAxx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">0</span>;w&lt;vec[x].size();w++)&#123;</span><br><span class="line">    <span class="keyword">int</span> y=vec[x][w].x;</span><br><span class="line">    Maxx=<span class="number">0</span>;dep[y]=<span class="number">1</span>;dis[y]=vec[x][w].y-K;dfs(y,x);</span><br><span class="line">    <span class="keyword">int</span> l=min(MAxx+<span class="number">1</span>,max(<span class="number">0</span>,L-Maxx));<span class="keyword">int</span> r=min(MAxx,max(<span class="number">-1</span>,R-Maxx));ql=<span class="number">1</span>;qr=<span class="number">0</span>;<span class="keyword">double</span> ans=-inf;</span><br><span class="line">    inc(i,l,r)&#123;</span><br><span class="line">        <span class="keyword">while</span>(ql&lt;=qr&amp;&amp;G[i]&gt;G[q[qr]])qr--;</span><br><span class="line">        q[++qr]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    dec(i,Maxx,<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> t1=min(MAxx+<span class="number">1</span>,max(<span class="number">0</span>,L-i));<span class="keyword">int</span> t2=min(MAxx,max(<span class="number">-1</span>,R-i));</span><br><span class="line">        <span class="keyword">if</span>(t1&gt;l)&#123;</span><br><span class="line">        <span class="keyword">while</span>(ql&lt;=qr&amp;&amp;q[ql]&lt;t1)ql++;</span><br><span class="line">        l=t1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t2&gt;r)&#123;</span><br><span class="line">        inc(j,r+<span class="number">1</span>,t2)&#123;</span><br><span class="line">            <span class="keyword">while</span>(ql&lt;=qr&amp;&amp;G[j]&gt;G[q[qr]])qr--;</span><br><span class="line">            q[++qr]=j;</span><br><span class="line">        &#125;</span><br><span class="line">            r=t2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ql&lt;=qr)ans=max(ans,H[i]+G[q[ql]]);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans&gt;=<span class="number">0.000000</span>)flag=<span class="number">1</span>;</span><br><span class="line">        MAxx=max(MAxx,Maxx);</span><br><span class="line">        inc(i,<span class="number">1</span>,Maxx)G[i]=max(G[i],H[i]),H[i]=-inf;</span><br><span class="line">    &#125;</span><br><span class="line">    G[<span class="number">0</span>]=-inf;</span><br><span class="line">    inc(i,<span class="number">1</span>,tot1)G[dep[St[i]]]=-inf;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[j-&gt;t]||L+<span class="number">1</span>&gt;sz[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">        key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">        solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    flag=<span class="number">0</span>;K=x;<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    base=n;key=inf;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    <span class="keyword">if</span>(flag)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();L=read();R=read();</span><br><span class="line">    <span class="keyword">int</span> x,y;<span class="keyword">double</span> z;</span><br><span class="line">    inc(i,<span class="number">2</span>,n)x=read(),y=read(),<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;z),add(x,y,z),add(y,x,z);</span><br><span class="line">    base=n;key=inf;get_root(<span class="number">1</span>,<span class="number">0</span>);solve1(rt);</span><br><span class="line">    inc(i,<span class="number">1</span>,n)G[i]=H[i]=-inf,vis[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> l=<span class="number">1.0</span>;<span class="keyword">double</span> r=<span class="number">1000000.0</span>;<span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;eps)&#123;</span><br><span class="line">        <span class="keyword">double</span> mid=(l+r)/<span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid))ans=mid,l=mid;</span><br><span class="line">        <span class="keyword">else</span> r=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.3f\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>X国遭受了地震的重创, 导致全国的交通近乎瘫痪，重建家园的计划迫在眉睫。X国由N个城市组成, 重建小组提出，仅需建立N-1条道路即可使得任意两个城市互相可达。于是，重建小组很快提出了一个包含N-1条道路的方案，并满足城市之间两两可达，他们还计算评估了每条道路e建设之后可以带来的价值v(e)。</p><p>由于重建计划复杂而艰难，经费也有一定限制。因此，政府要求第一期重建工程修建的道路数目为k条，但需满足L ≤ k ≤ U, 即不应少于L条，但不超过U条。同时，为了最大化利用率，要求建设的这些道路恰好组成一条简单路径，即所建设的k条路径可以构成一个排列$e1 = (p1, q1), e2 = (p2, q2), ek = (pk, qk), 对于 1 ≤ i &lt; k, 有(qi = pi+1)$.</p><p>重建小组打算修改他们的原有方案以满足要求，即在原有的N-1条道路中寻找一条路径S作为新的方案，使得新方案中的道路平均价值</p><p>$AvgValue = \frac{\sum _{e \in S} v(e)}{|S|}​$</p><p>最大。这里v(e)表示道路e的价值，|S|表示新方案中道路的条数。请你帮助重建小组寻找一个最优方案。 注: 在本题中L和U的设置将保证有解。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行包含一个正整数$N$，表示$X$国的城市个数。</p><p>第二行包含两个正整数$L$、$U$，表示政府要求的第一期重建方案中修建道路数的上下限。<br>接下来的$N-1$行描述重建小组的原有方案，每行三个正整数$a_i,b_i,v_i$，分别表示道路$(a_i, b_i)$，其价值为$v_i$。其中城市由$1…N$标号。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>仅包含一行，为一个实数$AvgValue$，即最大平均价值。</p><p>小数点后保留三位。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;经典$0/1$分数规划 二分答案$ans$&lt;/p&gt;
&lt;p&gt;对于所有的边权减去$ans$&lt;/p&gt;
&lt;p&gt;问题转化成 树上是否存在一条路径 $L
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
      <category term="单调队列" scheme="http://yoursite.com/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>hdu5664(点分治+容斥+树状数组)</title>
    <link href="http://yoursite.com/2019/03/19/hdu5664-%E7%82%B9%E5%88%86%E6%B2%BB-%E5%AE%B9%E6%96%A5-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2019/03/19/hdu5664-点分治-容斥-树状数组/</id>
    <published>2019-03-19T13:49:42.000Z</published>
    <updated>2019-03-19T14:03:20.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>很牛逼的点分啊 !!!!!</p><p>我们考虑二分答案 然后直接点分统计大于等于k的点对个数 复杂度$(O(nlog^2nlogw))$ 据说卡卡常数肯定是能过的 但是我们主要用下面这种方法</p><p>我们对于当前重心的子树节点按照点到重心的距离排序 因为点只有$nlogn$个 (点分的性质) 所以预处理复杂度$O(nlog^2n)$ 其次因为你在直接计算的过程中包含了不经过当前重心的点对 所以我们需要去重 同时记录当前重心直接儿子的子树情况 做一个容斥即可..</p><p>对于每一个二分的值 我们用双指针去统计贡献 则check复杂度为$O(nlogn)$</p><p>对于题目另外一个条件 需要满足去掉”直链” 所以我们直接在以m为根的树中把存在$lca(u,v)=u||lca(u,v)=v$的点对删掉即可</p><p>所以总复杂度$O(nlognlogw)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NM=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;ll k;</span><br><span class="line"><span class="keyword">int</span> sz[MAXN],maxx[MAXN],key,rt,base,dep[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">get_root(j-&gt;t,x);</span><br><span class="line">sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> L[MAXN],R[MAXN],tot;</span><br><span class="line"><span class="keyword">int</span> dis[MAXN],st[NM];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt;vec[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)&#123;</span><br><span class="line">    st[tot]=dis[x];tot++;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">dis[j-&gt;t]=dis[x]+j-&gt;v;</span><br><span class="line">_dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tot1,St[NM];</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> __dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)&#123;</span><br><span class="line">    St[tot1]=dis[x];tot1++;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">__dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;L[x]=tot;st[tot]=<span class="number">0</span>;tot++;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">dis[j-&gt;t]=j-&gt;v;_dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">    R[x]=tot<span class="number">-1</span>;sort(st+L[x],st+R[x]+<span class="number">1</span>);</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">pii t;t.first=tot1;__dfs(j-&gt;t,x);</span><br><span class="line">t.second=tot1<span class="number">-1</span>;</span><br><span class="line">sort(St+t.first,St+t.second+<span class="number">1</span>);</span><br><span class="line">vec[x].pb(t);</span><br><span class="line">key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=l;<span class="keyword">int</span> j=r;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j&amp;&amp;st[i]+st[j]&gt;=x)ans+=r-j,j--;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j)ans+=max(<span class="number">0</span>,r-j);</span><br><span class="line">i++;</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=r-j;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc1</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=l;<span class="keyword">int</span> j=r;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j&amp;&amp;St[i]+St[j]&gt;=x)ans+=r-j,j--;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j)ans+=max(<span class="number">0</span>,r-j);</span><br><span class="line">i++;</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=r-j;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="keyword">int</span> d[NM];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    v1.pb(d[x]);v1.pb(d[x]-y);</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">d[j-&gt;t]=d[x]+j-&gt;v;</span><br><span class="line">dfs(j-&gt;t,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans1,T;</span><br><span class="line"><span class="keyword">int</span> sum[NM];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_id</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lower_bound(v1.begin(),v1.begin()+T,x)-v1.begin()+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=T;i+=get_id(i))sum[i]+=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&gt;<span class="number">0</span>;i-=get_id(i))ans+=sum[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    ans1+=query(Get_id(d[x]-y));update(Get_id(d[x]),<span class="number">1</span>);</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">get_sum(j-&gt;t,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    update(Get_id(d[x]),<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;v1.clear();</span><br><span class="line">    inc(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">ans+=calc(L[i],R[i],x);<span class="keyword">int</span> size=vec[i].size();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">    <span class="keyword">int</span> t1=vec[i][j].first;<span class="keyword">int</span> t2=vec[i][j].second;</span><br><span class="line">    ans-=calc1(t1,t2,x);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(m,<span class="number">0</span>,x);sort(v1.begin(),v1.end());</span><br><span class="line">    T=unique(v1.begin(),v1.end())-v1.begin();</span><br><span class="line">    ans1=<span class="number">0</span>;get_sum(m,<span class="number">0</span>,x);ans-=ans1;</span><br><span class="line">    <span class="keyword">if</span>(ans&gt;=k)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _=read();</span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line">tot=tot1=<span class="number">1</span>;<span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));o=e;</span><br><span class="line">n=read();m=read();k=read();</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line">inc(i,<span class="number">2</span>,n)x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z);</span><br><span class="line">key=inf;base=n;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">solve(rt);</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>;<span class="keyword">int</span> r=<span class="number">6e8</span>;<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(check(mid))ans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ans)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">inc(i,<span class="number">1</span>,n)vec[i].clear(),vis[i]=<span class="number">0</span>,d[i]=L[i]=R[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Lady CA has a tree with n points numbered $1,2,…,n$, and each edge has its weight. The unique route connecting two points is called a chain, and the length of a chain equals the sum value of the weights of the edges passed.</p><p>The point number m is called the root. Lady CA defines a special kind of chain called folded chain, the chain connecting the points numbered $x,y(x≠y)$ is called a folded chain, if and only if the chain connecting the point numbered $x$ and the root doesn’t pass the point numbered $y$, and the chain connecting the point numbered yand the root doesn’t pass the point numbered $x$.</p><p>Lady CA wants to find the length of the $kth$ longest folded chain. Notice that the chain connecting the points numbered $x,y$ and the chain connecting the points numbered $y$,$x$ are the same.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line contains an integer $T(1≤T≤3)$——The number of the test cases. For each test case:<br>The first line contains three integers $n(2≤n≤50,000),m(1≤m≤n),k(1≤k≤n×(n−1)/2)$. Between each two adjacent integers there is a white space separated.<br>The second line to the nth line describes the $n−1$ edges in the graph. Each line contains three integers $u,v(1≤u,v≤n,u≠v),w(1≤w≤10,000)$, which means there is an edge which has a weight $w$ connecting the points numbered $u,v$. Between each two adjacent integers there is a white space separated.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, the only line contains the only integer that is the length of the $kth$ longest folded chain. If the $kth$ longest folded chain doesn’t exist, print $NO$.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;很牛逼的点分啊 !!!!!&lt;/p&gt;
&lt;p&gt;我们考虑二分答案 然后直接点分统计大于等于k的点对个数 复杂度$(O(nlog^2nlogw))$
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="容斥" scheme="http://yoursite.com/tags/%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>bzoj4598(点分治+hash)</title>
    <link href="http://yoursite.com/2019/03/19/bzoj4598-%E7%82%B9%E5%88%86%E6%B2%BB-hash/"/>
    <id>http://yoursite.com/2019/03/19/bzoj4598-点分治-hash/</id>
    <published>2019-03-19T01:36:22.000Z</published>
    <updated>2019-03-19T01:46:45.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>点对问题考虑点分</p><p>我们考虑子树合并 有两种情况 分别是当前子树链作为开头或者结尾 对于长度大于$m$和小于等于$m$再分情况讨论下 然后分别维护已经合并完的子树在长度为$x$时 分别作为开头和结尾的情况下的方案数 统计贡献的话 就直接用hash判当前的子串是否合法即可</p><p>hash我们考虑自然溢出 </p><p>时间复杂度 $O(nlogn)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=H1[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*H1[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=H1[x];H1[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> str[MAXN],s[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> sz[MAXN],maxx[MAXN],key,rt,base;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">get_root(j-&gt;t,x);</span><br><span class="line">sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g[MAXN],h[MAXN],g1[MAXN],h1[MAXN];<span class="comment">//g 表示开头 h表示结尾</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> sum[MAXN],dis[MAXN],Dep[MAXN],ma[MAXN],sum1[MAXN];</span><br><span class="line"><span class="keyword">int</span> dep[MAXN];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="keyword">bool</span> G[MAXN],H[MAXN];</span><br><span class="line"><span class="keyword">int</span> st[MAXN],tot,St[MAXN],tot1;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    Dep[dep[x]]=dis[x];</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&lt;=m)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[x]==sum[dep[x]])G[dep[x]]=<span class="number">1</span>,ans+=h[m-dep[x]],g1[dep[x]<span class="number">-1</span>]++;</span><br><span class="line"><span class="keyword">if</span>(dis[x]*ma[m-dep[x]]==sum1[m]-sum1[m-dep[x]])H[dep[x]]=<span class="number">1</span>,ans+=g[m-dep[x]],h1[dep[x]<span class="number">-1</span>]++;</span><br><span class="line">st[++tot]=dep[x]<span class="number">-1</span>;St[++tot1]=dep[x]<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(G[dep[x]-m]&amp;&amp;dis[x]-Dep[dep[x]-m]==ma[dep[x]-m]*sum[m])G[dep[x]]=<span class="number">1</span>,ans+=h[(m-dep[x]%m)%m],g1[(dep[x]%m<span class="number">-1</span>+m)%m]++;</span><br><span class="line"><span class="keyword">if</span>(H[dep[x]-m]&amp;&amp;dis[x]-Dep[dep[x]-m]==ma[dep[x]-m]*sum1[m])H[dep[x]]=<span class="number">1</span>,ans+=g[(m-dep[x]%m)%m],h1[(dep[x]%m<span class="number">-1</span>+m)%m]++;</span><br><span class="line">st[++tot]=(dep[x]%m<span class="number">-1</span>+m)%m;St[++tot1]=(dep[x]%m<span class="number">-1</span>+m)%m;</span><br><span class="line">    &#125;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">dep[j-&gt;t]=dep[x]+<span class="number">1</span>;</span><br><span class="line">dis[j-&gt;t]=dis[x]+ma[dep[j-&gt;t]<span class="number">-1</span>]*str[j-&gt;t];</span><br><span class="line">dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">    G[dep[x]]=H[dep[x]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;tot1=<span class="number">0</span>;g[<span class="number">0</span>]=h[<span class="number">0</span>]=<span class="number">1</span>;dis[x]=str[x];Dep[<span class="number">1</span>]=dis[x];</span><br><span class="line">    <span class="keyword">if</span>(str[x]==s[m])H[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(str[x]==s[<span class="number">1</span>])G[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">tot=<span class="number">0</span>;dep[j-&gt;t]=<span class="number">2</span>;dis[j-&gt;t]=dis[x]+ma[dep[j-&gt;t]<span class="number">-1</span>]*str[j-&gt;t];dfs(j-&gt;t,x);</span><br><span class="line">inc(i,<span class="number">1</span>,tot)g[st[i]]+=g1[st[i]],g1[st[i]]=<span class="number">0</span>,h[st[i]]+=h1[st[i]],h1[st[i]]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,tot1)g[St[i]]=h[St[i]]=<span class="number">0</span>;</span><br><span class="line">    g[<span class="number">0</span>]=h[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _=read();ma[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,<span class="number">1e6</span>)ma[i]=ma[i<span class="number">-1</span>]*<span class="number">131</span>;</span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line"><span class="built_in">memset</span>(H1,<span class="number">0</span>,<span class="keyword">sizeof</span>(H1));o=e;</span><br><span class="line">n=read();m=read();</span><br><span class="line">inc(i,<span class="number">1</span>,n)vis[i]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x,y;ans=<span class="number">0</span>;</span><br><span class="line">inc(i,<span class="number">2</span>,n)x=read(),y=read(),add(x,y),add(y,x);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">inc(i,<span class="number">1</span>,m)sum[i]=sum[i<span class="number">-1</span>]*<span class="number">131</span>+s[i],sum1[i]=sum1[i<span class="number">-1</span>]+ma[i<span class="number">-1</span>]*s[i];</span><br><span class="line">key=inf;base=n;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">solve(rt);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出$n$个结点的树结构$T$，其中每一个结点上有一个字符，这里我们所说的字符只考虑大写字母$A$到$Z$,再给出长度为$m$的模式串$s$，其中每一位仍然是$A$到$Z$的大写字母。$Alice$希望知道，有多少对结点$&lt;u,v&gt;$满足$T$上从$U$到$V$的最短路径形成的字符串可以由模式串$S$重复若干次得到？这里结点对$&lt;u,v&gt;$是有序的，也就是说$&lt;u,v&gt;和&lt;v,u&gt;$需要被区分.所谓模式串的重复，是将若干个模式串$S$依次相接（不能重叠).例如当$S=PLUS$的时候，重复两次会得到$PLUSPLUS$，重复三次会得到$PLUSPLUSPLUS$,同时要注恿，重复必须是整数次的。例如当S=$XYXY$时，因为必须重复整数次，所以$XYXYXY$不能看作是$S$重复若干次得到的。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>每一个数据有多组测试，</p><p>第一行输入一个整数$C$，表示总的测试个数。</p><p>对于每一组测试来说：</p><p>第一行输入两个整数，分别表示树$T$的结点个数$n$与模式长度$m$。结点被依次编号为$1$到$n$，之后一行，依次给出了$n$个大写字母（以一个长度为$n$的字符串的形式给出），依次对应树上每一个结点上的字符（第$i$个字符对应了第$i$个结点).之后$n-1$行，每行有两个整数$u$和$v$表示树上的一条无向边，之后一行给定一个长度为$m$的由大写字母组成的字符串，为模式串$S$。</p><p>$1&lt;=C&lt;=10,3&lt;=N&lt;=10^6,3&lt;=M&lt;=10^6$</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>给出$C$行，对应$C$组测试。每一行输出一个整数，表示有多少对节点$&lt;u,v&gt;$满足从$u$到$v$的路径形成的字符串恰好是模式串的若干次重复.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;点对问题考虑点分&lt;/p&gt;
&lt;p&gt;我们考虑子树合并 有两种情况 分别是当前子树链作为开头或者结尾 对于长度大于$m$和小于等于$m$再分情况讨
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
      <category term="hash" scheme="http://yoursite.com/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>bzoj3648(点分治+树状数组)</title>
    <link href="http://yoursite.com/2019/03/15/bzoj3648-%E7%82%B9%E5%88%86%E6%B2%BB-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2019/03/15/bzoj3648-点分治-树状数组/</id>
    <published>2019-03-15T13:40:53.000Z</published>
    <updated>2019-03-15T14:26:53.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>分为两部分 </p><p>对于树形结构  直接点分 然后排序/树状数组统计贡献</p><p>对于基环树结构  我们先把环取出来 以环上的点为根做点分治 统计每个子树内的贡献 然后考虑环上点的相互影响 对于每个子树维护每种深度的个数 然后我们可以考虑到每个点作用的是一段连续区间 可以采用树状数组来维护答案 时间复杂度是$O(nlogn)$ 至于环上点的维护 就是变环为链 然后维护即可</p><p>时间复杂度 $O(nlog^2n)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> st[MAXN],tot,num[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="keyword">int</span> f[MAXN],fa[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x])<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x]=find1(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> rt,key,maxx[MAXN],sz[MAXN],base;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    get_root(j-&gt;t,x);</span><br><span class="line">    sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="keyword">int</span> sum[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=get_id(i))sum[i]+=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=get_id(i))sum[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&gt;<span class="number">0</span>;i-=get_id(i))ans1+=sum[i];</span><br><span class="line">    <span class="keyword">return</span> ans1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> St[MAXN],tot1;</span><br><span class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)&#123;</span><br><span class="line">    <span class="keyword">if</span>(dis[x]&lt;=k)ans+=Sum(n)-Sum(k-dis[x]);<span class="keyword">else</span> ans+=Sum(n);</span><br><span class="line">    st[++tot]=x;St[++tot1]=x;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    dis[j-&gt;t]=dis[x]+<span class="number">1</span>;</span><br><span class="line">    _dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;tot1=<span class="number">0</span>;update(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">    tot=<span class="number">0</span>;dis[j-&gt;t]=<span class="number">2</span>;_dfs(j-&gt;t,x);</span><br><span class="line">    inc(i,<span class="number">1</span>,tot)update(dis[st[i]],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,tot1)clear(dis[St[i]]);</span><br><span class="line">    clear(<span class="number">1</span>);</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">    key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> dep[MAXN];</span><br><span class="line"><span class="keyword">int</span> qko[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=<span class="number">3</span>*n;i+=get_id(i))qko[i]+=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&gt;<span class="number">0</span>;i-=get_id(i))ans1+=qko[i];</span><br><span class="line">    <span class="keyword">return</span> ans1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> Maxx;</span><br><span class="line"><span class="keyword">void</span> __dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> deep)&#123;</span><br><span class="line">    dep[deep]++;Maxx=max(Maxx,deep);</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    __dfs(j-&gt;t,x,deep+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;node;</span><br><span class="line">node que[MAXN];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> Num[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;Vec[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    fa[x]=pre;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Vec[x].size();i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(Vec[x][i]==pre)<span class="keyword">continue</span>;</span><br><span class="line">    dfs(Vec[x][i],x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();m=read();k=read();</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)f[i]=i;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)x=read(),y=read(),add(x,y),add(y,x),que[i]=(node)&#123;x,y&#125;;</span><br><span class="line">    x=<span class="number">0</span>;y=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">    <span class="keyword">int</span> t1=find1(que[i].x);<span class="keyword">int</span> t2=find1(que[i].y);</span><br><span class="line">    <span class="keyword">if</span>(t1==t2)&#123;x=que[i].x;y=que[i].y;<span class="keyword">continue</span>;&#125;</span><br><span class="line">    Vec[que[i].x].pb(que[i].y);</span><br><span class="line">    Vec[que[i].y].pb(que[i].x);</span><br><span class="line">    f[t1]=t2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x)&#123;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">int</span> x1=x;<span class="keyword">int</span> y1=y;</span><br><span class="line">    <span class="keyword">while</span>(x)Num[x]++,x=fa[x];</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Num[y])&#123;root=y;<span class="keyword">break</span>;&#125;</span><br><span class="line">        y=fa[y];</span><br><span class="line">    &#125;</span><br><span class="line">    x=x1;y=y1;</span><br><span class="line">    <span class="keyword">while</span>(x!=root)vec.pb(x),x=fa[x];</span><br><span class="line">    vec.pb(root);<span class="keyword">int</span> t=vec.size();</span><br><span class="line">    <span class="keyword">while</span>(y!=root)vec.pb(y),y=fa[y];</span><br><span class="line">    reverse(vec.begin()+t,vec.end());</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)vis[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t=vec.size();</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t)&#123;</span><br><span class="line">     inc(i,<span class="number">0</span>,t<span class="number">-1</span>)vis[vec[i]]=<span class="number">1</span>;</span><br><span class="line">     inc(i,<span class="number">0</span>,t<span class="number">-1</span>)&#123;</span><br><span class="line">         vis[vec[i]]=<span class="number">0</span>;</span><br><span class="line">         base=num[vec[i]];key=inf;get_root(vec[i],<span class="number">0</span>);</span><br><span class="line">         solve(rt);</span><br><span class="line">         vis[vec[i]]=<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)vis[i]=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">0</span>,t<span class="number">-1</span>)vis[vec[i]]=<span class="number">1</span>;</span><br><span class="line">    vis[vec[<span class="number">0</span>]]=<span class="number">0</span>;Maxx=<span class="number">0</span>;__dfs(vec[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>);vis[vec[<span class="number">0</span>]]=<span class="number">1</span>;</span><br><span class="line">    inc(i,<span class="number">0</span>,t<span class="number">-2</span>)vec.pb(vec[i]);</span><br><span class="line">    inc(i,<span class="number">1</span>,Maxx)&#123;</span><br><span class="line">        <span class="keyword">int</span> l=max(<span class="number">1</span>,k+<span class="number">1</span>-i);<span class="keyword">int</span> r=<span class="number">1</span>+t;</span><br><span class="line">        update1(l,dep[i]);</span><br><span class="line">        dep[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;vec.size();i++)&#123;</span><br><span class="line">        vis[vec[i]]=<span class="number">0</span>;Maxx=<span class="number">0</span>;__dfs(vec[i],<span class="number">0</span>,<span class="number">1</span>);vis[vec[i]]=<span class="number">1</span>;</span><br><span class="line">        inc(j,<span class="number">1</span>,Maxx)&#123;</span><br><span class="line">        <span class="keyword">int</span> l=max(i+<span class="number">1</span>,k+i+<span class="number">1</span>-j-t);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=t)update1(l,-dep[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        inc(j,<span class="number">1</span>,Maxx)&#123;</span><br><span class="line">        <span class="keyword">int</span> pos=i+j;</span><br><span class="line">        ans+=<span class="number">1l</span>l*Sum1(pos)*dep[j];</span><br><span class="line">        &#125;</span><br><span class="line">        inc(j,<span class="number">1</span>,Maxx)&#123;</span><br><span class="line">        <span class="keyword">int</span> l=max(i+<span class="number">1</span>,k+i+<span class="number">1</span>-j);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;t)update1(l,dep[j]);</span><br><span class="line">        dep[j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    base=n;key=inf;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>T64有一个好朋友，叫T128。T128是寄宿生，并且最近被老师叫过去当宿管了。宿管可不是一件很好做的工作，碰巧T128有一个工作上的问题想请T64帮忙解决。T128的寝室条件不是很好，所以没有很多钱来装修。礼间寝室仅由$n-1$条双向道路连接，而且任意两间寝室之间都可以互达。最近，T128被要求对一条路径上的所有寝室进行管理，这条路径不会重复经过某个点或某条边。但他不记得是哪条路径了。他只记得这条路径上有不少于$k$个寝室。于是，他想请T64帮忙数一下，有多少条这样的路径满足条件。嗯…还有一个问题。由于最近有一些熊孩子不准晚上讲话很不爽，他们决定修筑一条“情报通道”，如果通道建成，寝室就变成了一个$N$个点$N$条边的无向图。并且，经过“情报通道”的路径也是合法的。T128心想：通道建成之前，T64还有一个高效的算法帮我数路径条数，但是通道建成之后，他还有办法吗？对，T64手忙脚乱，根本数不清有多少条路径。于是他找到了你。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行为三个正整数$N$，$M$，$K（2 ≤ K ≤ N）$，代表有$n$间寝室，$m$条边连接它们$n-1 ≤ m ≤ N$；</p><p>$m= n-1$意味着“情报遁道”未被修好；$m=n$意味着“情报通道”已被修好），以及题目描述中的$K$。</p><p>接下来$m$行，每行两个正整数$z$，$y$，代表第$x$间寝室与第$y$间寝室之间有一条双向边。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>仅包含一个整数，代表经过至少$K$间寝室的路径条数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;分为两部分 &lt;/p&gt;
&lt;p&gt;对于树形结构  直接点分 然后排序/树状数组统计贡献&lt;/p&gt;
&lt;p&gt;对于基环树结构  我们先把环取出来 以环上的
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>bzoj2870(点分治+树状数组)</title>
    <link href="http://yoursite.com/2019/03/15/bzoj2870-%E7%82%B9%E5%88%86%E6%B2%BB-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2019/03/15/bzoj2870-点分治-树状数组/</id>
    <published>2019-03-15T12:20:21.000Z</published>
    <updated>2019-03-15T12:31:26.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>(下文子树权值是指当前点到重心节点路径的最小值)</p><p>摁….卡线段树….选择树状数组吧(树状数组下标是权值 维护前缀区间路径长度的最大值)</p><p>因为是点对问题….点分治没跑了</p><p>我们考虑子树合并 对于大于当前结点权值的点 我们可以在$O(logn)$的情况下得到答案 但是对于小于当前权值的点我们没有比较高效的办法统计贡献  但是我们可以反着跑一遍 就能维护所有的答案了</p><p>时间复杂度 $O(nlog^2n)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;o-&gt;t=y;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> N,n,a[MAXN],base,key,rt,sz[MAXN],maxx[MAXN];</span><br><span class="line"><span class="keyword">int</span> ans2[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line">ll ANS;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=N;i+=get_id(i))ans2[i]=max(ans2[i],t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&gt;<span class="number">0</span>;i-=get_id(i))ans=max(ans,ans2[i]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=N;i+=get_id(i))ans2[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    get_root(j-&gt;t,x);</span><br><span class="line">    sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> num[MAXN],dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> st[MAXN],tot,St[MAXN],tot1,ans1;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    ans1=query(N-dis[x]+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(ans1)ANS=max(ANS,<span class="number">1l</span>l*(ans1+num[x]<span class="number">-1</span>)*(dis[x]<span class="number">-1</span>)),st[++tot]=x;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    num[j-&gt;t]=num[x]+<span class="number">1</span>;dis[j-&gt;t]=min(dis[x],a[j-&gt;t]);</span><br><span class="line">    dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> p[MAXN],cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;tot1=<span class="number">0</span>;cnt=<span class="number">0</span>;</span><br><span class="line">    update(N-a[x]+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">    p[++cnt]=j-&gt;t;</span><br><span class="line">    tot=<span class="number">0</span>;num[j-&gt;t]=<span class="number">2</span>;dis[j-&gt;t]=min(a[j-&gt;t],a[x]);dfs(j-&gt;t,x);</span><br><span class="line">    inc(i,<span class="number">1</span>,tot)update(N-dis[st[i]]+<span class="number">1</span>,num[st[i]]),St[++tot1]=st[i];</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,tot1)clear(N-dis[St[i]]+<span class="number">1</span>);</span><br><span class="line">    update(N-a[x]+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    dec(i,cnt,<span class="number">1</span>)&#123;</span><br><span class="line">    tot=<span class="number">0</span>;num[p[i]]=<span class="number">2</span>;dis[p[i]]=min(a[p[i]],a[x]);dfs(p[i],x);</span><br><span class="line">    inc(j,<span class="number">1</span>,tot)update(N-dis[st[j]]+<span class="number">1</span>,num[st[j]]);</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,tot1)clear(N-dis[St[i]]+<span class="number">1</span>);</span><br><span class="line">    clear(N-a[x]+<span class="number">1</span>);</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">    key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    inc(i,<span class="number">1</span>,n)a[i]=read()+<span class="number">1</span>,N=max(N,a[i]),ANS=max(ANS,<span class="number">1l</span>l*(a[i]<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    inc(i,<span class="number">2</span>,n)x=read(),y=read(),add(x,y),add(y,x);</span><br><span class="line">    key=inf;base=n;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ANS);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一棵$N$个点的树，求树上一条链使得链的长度乘链上所有点中的最小权值所得的积最大。</p><p>其中链长度定义为链上点的个数。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行$N$</p><p>第二行$N$个数分别表示$1~N$的点权$v[i]$</p><p>接下来$N-1$行每行两个数$x$、$y$，表示一条连接$x$和$y$的边</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>一个数，表示最大的痛苦程度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;(下文子树权值是指当前点到重心节点路径的最小值)&lt;/p&gt;
&lt;p&gt;摁….卡线段树….选择树状数组吧(树状数组下标是权值 维护前缀区间路径长度的
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>bzoj3784(点分治)</title>
    <link href="http://yoursite.com/2019/03/13/bzoj3784-%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    <id>http://yoursite.com/2019/03/13/bzoj3784-点分治/</id>
    <published>2019-03-13T06:55:20.000Z</published>
    <updated>2019-03-13T07:09:36.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这题确实妙妙秒啊!!!!!</p><p>首先这是一个点对问题 我们还是从点分入手  仍然考虑子树点对 我们发现对于当前子树 能与其组成点对的是同一个重心的情况下之前的子树 考虑到类似dfs序的东西 我们称之为点分序吧 所以我们能把这个树形问题转化为序列问题  因为点分的性质保证每个点最多出现$logn$次 那么对于这$nlogn$个节点 每个点的权值对应的是其到重心的距离 且每个节点都具有一个管辖区间$[L,R]$  表示的是当前点能与这个区间的点能组合成点对.</p><p>经过上述的转化 我们可以类似于 超级钢琴的做法 用$st$表查询区间最大值的位置 以及 用堆维护前$m$大的元素即可</p><p>复杂度 $O(mlogn+nlogn)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">6e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NM=<span class="number">8e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;ll m;</span><br><span class="line"><span class="keyword">int</span> key,rt,maxx[MAXN],sz[MAXN],base;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> tot,pos[NM][<span class="number">18</span>],dp[NM];</span><br><span class="line"><span class="keyword">int</span> L[NM],R[NM],ma[NM];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    maxx[x]=<span class="number">0</span>;sz[x]=<span class="number">1</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre||vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">get_root(j-&gt;t,x);</span><br><span class="line">sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    tot++;</span><br><span class="line">    pos[tot][<span class="number">0</span>]=tot;</span><br><span class="line">    dp[tot]=dis[x];L[tot]=l;R[tot]=r;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">dis[j-&gt;t]=dis[x]+j-&gt;v;</span><br><span class="line">dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;tot++;</span><br><span class="line">    pos[tot][<span class="number">0</span>]=tot;dp[tot]=<span class="number">0</span>;L[tot]=tot;R[tot]=tot;</span><br><span class="line">    l=tot;r=tot;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">dis[j-&gt;t]=j-&gt;v;dfs(j-&gt;t,x);</span><br><span class="line">r=tot;</span><br><span class="line">    &#125;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">St</span><span class="params">()</span></span>&#123;</span><br><span class="line">    inc(i,<span class="number">2</span>,tot)ma[i]=ma[i/<span class="number">2</span>]+<span class="number">1</span>;</span><br><span class="line">    inc(j,<span class="number">1</span>,<span class="number">17</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)&lt;=tot+<span class="number">1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[pos[i][j<span class="number">-1</span>]]&gt;=dp[pos[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]])pos[i][j]=pos[i][j<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">else</span> pos[i][j]=pos[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rmq</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k=ma[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(dp[pos[l][k]]&gt;=dp[pos[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]])<span class="keyword">return</span> pos[l][k];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> pos[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,pos,id,k;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node aa,node bb)&#123;<span class="keyword">return</span> aa.k&lt;bb.k;&#125;</span><br><span class="line">&#125;node;</span><br><span class="line">priority_queue&lt;node&gt;que;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    <span class="keyword">int</span> x,y,z;tot=<span class="number">0</span>;</span><br><span class="line">    m=min(m,<span class="number">1l</span>l*n*(n<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line">    inc(i,<span class="number">2</span>,n)x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z);</span><br><span class="line">    base=n;key=inf;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    St();</span><br><span class="line">    inc(i,<span class="number">1</span>,tot)&#123;</span><br><span class="line"><span class="keyword">int</span> t=rmq(L[i],R[i]);</span><br><span class="line">que.push((node)&#123;L[i],R[i],t,i,dp[t]+dp[i]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(que.top()).k);</span><br><span class="line">node p=que.top();que.pop();</span><br><span class="line"><span class="keyword">int</span> t1=rmq(p.l,p.pos<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> t2=rmq(p.pos+<span class="number">1</span>,p.r);</span><br><span class="line"><span class="keyword">if</span>(t1)que.push((node)&#123;p.l,p.pos<span class="number">-1</span>,t1,p.id,dp[p.id]+dp[t1]&#125;);</span><br><span class="line"><span class="keyword">if</span>(t2)que.push((node)&#123;p.pos+<span class="number">1</span>,p.r,t2,p.id,dp[p.id]+dp[t2]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个$N$个结点的树，结点用正整数$1..N$编号。每条边有一个正整数权值。用$d(a,b)$表示从结点$a$到结点$b$路边上经过边的权值。其中要求$a&lt;b$.将这$n*(n-1)/2$个距离从大到小排序，输出前$M$个距离值。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行两个正整数$N,M$</p><p>下面$N-1$行，每行三个正整数$a,b,c(a,b&lt;=N,C&lt;=10000).$表示结点$a$到结点$b$有一条权值为$c$的边。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>共$M$行，如题所述.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;这题确实妙妙秒啊!!!!!&lt;/p&gt;
&lt;p&gt;首先这是一个点对问题 我们还是从点分入手  仍然考虑子树点对 我们发现对于当前子树 能与其组成点对
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
      <category term="堆" scheme="http://yoursite.com/tags/%E5%A0%86/"/>
    
      <category term="st表" scheme="http://yoursite.com/tags/st%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>bzoj4016(点分治)</title>
    <link href="http://yoursite.com/2019/03/13/bzoj4016-%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    <id>http://yoursite.com/2019/03/13/bzoj4016-点分治/</id>
    <published>2019-03-13T04:45:11.000Z</published>
    <updated>2019-03-13T04:53:21.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h2><p>强行凑题…..</p><p>前面构造最短路树 然后后半部分模板点分统计贡献</p><p>这个最短路树要保证路径的字典序最小 那么我们可以跑出最短路 枚举边 看距离差值是否等于边权 然后连边 对于所有连边排序以后 做$dfs$建树</p><p>第二部分就直接考虑子树合并 维护每个深度下的最大距离 以及方案数 枚举统计贡献</p><p>复杂度 $O(mlogn+nlogn)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e12</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt;vec[MAXN];</span><br><span class="line">ll dis[MAXN],ans1;</span><br><span class="line">ll ans2;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125;Node;</span><br><span class="line">Node Edge[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;ll d;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node aa,node bb)&#123;</span><br><span class="line"><span class="keyword">return</span> aa.d&gt;bb.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;node;</span><br><span class="line">priority_queue&lt;node&gt;que;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)vis[i]=<span class="number">0</span>,dis[i]=inf;</span><br><span class="line">    dis[s]=<span class="number">0</span>;que.push((node)&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">node t=que.top();que.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[t.v])<span class="keyword">continue</span>;</span><br><span class="line">vis[t.v]=<span class="number">1</span>;</span><br><span class="line">link(t.v)&#123;</span><br><span class="line">    <span class="keyword">if</span>(dis[j-&gt;t]&gt;dis[t.v]+j-&gt;v)&#123;</span><br><span class="line">dis[j-&gt;t]=dis[t.v]+j-&gt;v;</span><br><span class="line">que.push((node)&#123;j-&gt;t,dis[j-&gt;t]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x=Edge[i].x;<span class="keyword">int</span> y=Edge[i].y;</span><br><span class="line"><span class="keyword">if</span>(dis[x]&gt;dis[y])swap(x,y);</span><br><span class="line"><span class="keyword">if</span>(Edge[i].z==dis[y]-dis[x])vec[x].pb(mp(y,Edge[i].z));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[vec[x][i].first])<span class="keyword">continue</span>;</span><br><span class="line">add(x,vec[x][i].first,vec[x][i].second);</span><br><span class="line">add(vec[x][i].first,x,vec[x][i].second);</span><br><span class="line">dfs(vec[x][i].first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rt,sz[MAXN],maxx[MAXN],base;</span><br><span class="line"><span class="keyword">int</span> key;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">get_root(j-&gt;t,x);</span><br><span class="line">sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])rt=x,key=maxx[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c1[MAXN];</span><br><span class="line">ll MAxx[MAXN];</span><br><span class="line"><span class="keyword">int</span> num[MAXN];</span><br><span class="line"><span class="keyword">int</span> st[MAXN],St[MAXN],tot,tot1;</span><br><span class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)&#123;</span><br><span class="line">    num[x]=num[pre]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(num[x]&gt;k)<span class="keyword">return</span> ;</span><br><span class="line">    st[++tot]=x,St[++tot1]=x;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">dis[j-&gt;t]=dis[x]+j-&gt;v;</span><br><span class="line">_dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;tot1=<span class="number">0</span>;c1[<span class="number">1</span>]=<span class="number">1</span>;MAxx[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">tot=<span class="number">0</span>;num[x]=<span class="number">1</span>;dis[j-&gt;t]=j-&gt;v;_dfs(j-&gt;t,x);</span><br><span class="line">inc(i,<span class="number">1</span>,tot)&#123;</span><br><span class="line">    <span class="keyword">if</span>(dis[st[i]]+MAxx[k+<span class="number">1</span>-num[st[i]]]&gt;ans1)ans1=dis[st[i]]+MAxx[k+<span class="number">1</span>-num[st[i]]],ans2=c1[k+<span class="number">1</span>-num[st[i]]];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dis[st[i]]+MAxx[k+<span class="number">1</span>-num[st[i]]]==ans1)ans2+=c1[k+<span class="number">1</span>-num[st[i]]];</span><br><span class="line">&#125;</span><br><span class="line">inc(i,<span class="number">1</span>,tot)&#123;</span><br><span class="line">    <span class="keyword">if</span>(MAxx[num[st[i]]]==dis[st[i]])c1[num[st[i]]]++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(MAxx[num[st[i]]]&lt;dis[st[i]])MAxx[num[st[i]]]=dis[st[i]],c1[num[st[i]]]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,tot1)MAxx[num[St[i]]]=-inf,c1[num[St[i]]]=<span class="number">0</span>;</span><br><span class="line">    c1[<span class="number">1</span>]=<span class="number">0</span>;MAxx[<span class="number">1</span>]=-inf;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">base=sz[j-&gt;t];key=(<span class="number">1</span>&lt;&lt;<span class="number">30</span>);get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();m=read();k=read();</span><br><span class="line">    inc(i,<span class="number">0</span>,n)MAxx[i]=-inf;</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    inc(i,<span class="number">1</span>,m)x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z),Edge[i]=(Node)&#123;x,y,z&#125;;</span><br><span class="line">    dij(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));<span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e));o=e;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)vis[i]=dis[i]=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)sort(vec[i].begin(),vec[i].end());</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    inc(i,<span class="number">1</span>,n)vis[i]=<span class="number">0</span>;</span><br><span class="line">    key=(<span class="number">1</span>&lt;&lt;<span class="number">30</span>);base=n;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,ans1,ans2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给一个包含$n$个点，$m$条边的无向连通图。从顶点$1$出发，往其余所有点分别走一次并返回。</p><p>往某一个点走时，选择总长度最短的路径走。若有多条长度最短的路径，则选择经过的顶点序列字典序最小的那条路径(如路径A为$1,32,11，$路径B为$1,3,2,11$，路径B字典序较小。注意是序列的字典序的最小，而非路径中节点编号相连的字符串字典序最小)。到达该点后按原路返回，然后往其他点走，直到所有点都走过。</p><p>可以知道，经过的边会构成一棵最短路径树。请问，在这棵最短路径树上，最长的包含K个点的简单路径长度为多长？长度为该最长长度的不同路径有多少条？</p><p>这里的简单路径是指：对于一个点最多只经过一次的路径。不同路径是指路径两端端点至少有一个不同，点A到点B的路径和点B到点A视为同一条路径</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行输入三个正整数$n,m，K$，表示有$n$个点$m$条边，要求的路径需要经过$K$个点。接下来输入$m$行，每行三个正整数$A_i,B_i,C_i(1&lt;=A_i,B_i&lt;=n,1&lt;=C_i&lt;=10000)$，表示$A_i$和$B_i$间有一条长度为$C_i$的边。数据保证输入的是连通的无向图。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出一行两个整数，以一个空格隔开，第一个整数表示包含$K$个点的路径最长为多长，第二个整数表示这样的不同的最长路径有多少条。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解:&quot;&gt;&lt;/a&gt;题解:&lt;/h2&gt;&lt;p&gt;强行凑题…..&lt;/p&gt;
&lt;p&gt;前面构造最短路树 然后后半部分模板点分统计贡献&lt;/p&gt;
&lt;p&gt;这个最短路树要保证路径的字典序最小 那么我们
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>bzoj3697(点分治)</title>
    <link href="http://yoursite.com/2019/03/12/bzoj3697-%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    <id>http://yoursite.com/2019/03/12/bzoj3697-点分治/</id>
    <published>2019-03-12T10:25:43.000Z</published>
    <updated>2019-03-13T04:40:34.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h2><p>这题稍微有点绕</p><p>如果我们仅仅只要查询一段路径的上$0/1$路径段的数量相等的话 直接做点分就行了 </p><p>但是现在需要存在一个中间转折点 要这个点到两段的$0/1$路径的数量段同样相等  所以我们考虑每个点到重心节点的$0/1$数量段的差值 </p><p>我们根据节点之前的祖先节点是否出现和其一样差值的节点将其分成两类</p><p>然后分类讨论下</p><p>若当前这点属于前面有相同祖先节点具有相同差值的情况  那么他能和其他不同子树上任意一类节点产生贡献</p><p>若属于后者 那么他只能和其他不同子树中的第一类节点产生贡献</p><p>然后注意下细节就$OK$了</p><p>时间复杂度  $O(nlogn)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,key,rt,base;</span><br><span class="line"><span class="keyword">int</span> sz[MAXN],maxx[MAXN];</span><br><span class="line"><span class="keyword">int</span> dp1[MAXN&lt;&lt;<span class="number">1</span>],dp2[MAXN&lt;&lt;<span class="number">1</span>],dis[MAXN],Vis[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre||vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">get_root(j-&gt;t,x);</span><br><span class="line">sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot,St[MAXN],tot1;</span><br><span class="line">pii st[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    St[++tot1]=dis[x];</span><br><span class="line">    <span class="comment">//cout&lt;&lt;x&lt;&lt;":: "&lt;&lt;pre&lt;&lt;" "&lt;&lt;dis[x]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(Vis[dis[x]+n])ans+=dp1[n-dis[x]],ans+=dp2[n-dis[x]],st[++tot]=mp(dis[x],<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> ans+=dp2[n-dis[x]],st[++tot]=mp(dis[x],<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(!dis[x]&amp;&amp;Vis[n])ans++;</span><br><span class="line">    <span class="keyword">if</span>(!dis[x]&amp;&amp;!Vis[n])ans+=dp1[n];</span><br><span class="line">    Vis[dis[x]+n]++;</span><br><span class="line">   <span class="comment">// cout&lt;&lt;x&lt;&lt;"::: "&lt;&lt;dis[x]&lt;&lt;" "&lt;&lt;ans&lt;&lt;endl;</span></span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre||vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">dis[j-&gt;t]=dis[x]+(j-&gt;v==<span class="number">0</span>?<span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">    Vis[dis[x]+n]--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;tot1=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">tot=<span class="number">0</span>;dis[j-&gt;t]=(j-&gt;v==<span class="number">0</span>?<span class="number">1</span>:<span class="number">-1</span>);dfs(j-&gt;t,x);</span><br><span class="line">inc(i,<span class="number">1</span>,tot)<span class="keyword">if</span>(st[i].second==<span class="number">1</span>)dp2[n+st[i].first]++;<span class="keyword">else</span> dp1[n+st[i].first]++;</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,tot1)dp1[n+St[i]]=dp2[n+St[i]]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">2</span>,n)x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z);</span><br><span class="line">    key=inf;base=n;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>采药人的药田是一个树状结构，每条路径上都种植着同种药材。<br>采药人以自己对药材独到的见解，对每种药材进行了分类。大致分为两类，一种是阴性的，一种是阳性的。<br>采药人每天都要进行采药活动。他选择的路径是很有讲究的，他认为阴阳平衡是很重要的，所以他走的一定是两种药材数目相等的路径。采药工作是很辛苦的，所以他希望他选出的路径中有一个可以作为休息站的节点（不包括起点和终点），满足起点到休息站和休息站到终点的路径也是阴阳平衡的。他想知道他一共可以选择多少种不同的路径。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第$1$行包含一个整数$N$。<br>接下来$N-1$行，每行包含三个整数$a_i  b_i  t_i$,表示这条路上药材的类型。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出符合采药人要求的路径数目。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解:&quot;&gt;&lt;/a&gt;题解:&lt;/h2&gt;&lt;p&gt;这题稍微有点绕&lt;/p&gt;
&lt;p&gt;如果我们仅仅只要查询一段路径的上$0/1$路径段的数量相等的话 直接做点分就行了 &lt;/p&gt;
&lt;p&gt;但是现在
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>bzoj1316(点分治)</title>
    <link href="http://yoursite.com/2019/03/12/bzoj1316-%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    <id>http://yoursite.com/2019/03/12/bzoj1316-点分治/</id>
    <published>2019-03-12T06:30:41.000Z</published>
    <updated>2019-03-12T06:44:44.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>第一眼以为$q$很大…想了一晚上….</p><p>然后早上起来看题….$q&lt;=100$ 惊了</p><p>好了 言归正传  $q&lt;=100$那就直接暴力跑100次点分$ check $ 据说这样会被卡常数???反正我没试过</p><p>我们考虑 直接在重心分治的时候$check$ 每次把新的子树合并上去 然后$q$次$check$对应的$len$是否存在 然后我很快就$WA$了  原因是因为 $len=0$ 这种情况存在  特判下就能A了</p><p>复杂度 $O(qnlogn)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NM=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[MAXN],q,n,key,rt,base;</span><br><span class="line"><span class="keyword">bool</span> Num[NM],vis[MAXN],ans[MAXN];</span><br><span class="line"><span class="keyword">int</span> sz[MAXN],maxx[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre||vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">get_root(j-&gt;t,x);</span><br><span class="line">sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])rt=x,key=maxx[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> st[MAXN],St[MAXN],tot,tot1;</span><br><span class="line"><span class="keyword">int</span> dis[MAXN];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dis[x]&lt;NM)st[++tot]=dis[x],St[++tot1]=dis[x];</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre||vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">dis[j-&gt;t]=dis[x]+j-&gt;v;</span><br><span class="line">dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    tot1=<span class="number">0</span>;Num[<span class="number">0</span>]=<span class="number">1</span>;vis[x]=<span class="number">1</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">tot=<span class="number">0</span>;dis[j-&gt;t]=j-&gt;v;dfs(j-&gt;t,x);</span><br><span class="line">inc(i,<span class="number">1</span>,tot)inc(k,<span class="number">1</span>,q)<span class="keyword">if</span>(st[i]&lt;=p[k]&amp;&amp;Num[p[k]-st[i]])ans[k]=<span class="number">1</span>;</span><br><span class="line">inc(i,<span class="number">1</span>,tot)Num[st[i]]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,tot1)Num[St[i]]=<span class="number">0</span>;Num[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    inc(i,<span class="number">0</span>,NM<span class="number">-1</span>)Num[i]=<span class="number">0</span>;</span><br><span class="line">    n=read();q=read();</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    inc(i,<span class="number">2</span>,n)x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z);</span><br><span class="line">    inc(i,<span class="number">1</span>,q)p[i]=read();</span><br><span class="line">    key=inf;base=n;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    inc(i,<span class="number">1</span>,q)<span class="keyword">if</span>(!p[i]||ans[i])<span class="built_in">puts</span>(<span class="string">"Yes"</span>);<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一棵$n$个点的带权有根树，有$p$个询问，每次询问树中是否存在一条长度为$Len$的路径，如果是，输出$Yes$否输出$No$.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行两个整数$n, p$分别表示点的个数和询问的个数． 接下来$n-1$行每行三个数$x, y, c$，表示有一条树边$x→y$，长度为$c$． 接下来$p$行每行一个数$Len$，表示询问树中是否存在一条长度为$Len$的路径．</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出有$p$行，$Yes$或$No$.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;第一眼以为$q$很大…想了一晚上….&lt;/p&gt;
&lt;p&gt;然后早上起来看题….$q&amp;lt;=100$ 惊了&lt;/p&gt;
&lt;p&gt;好了 言归正传  $q&amp;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>bzoj2599(点分治)</title>
    <link href="http://yoursite.com/2019/03/11/bzoj2599-%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    <id>http://yoursite.com/2019/03/11/bzoj2599-点分治/</id>
    <published>2019-03-11T12:00:21.000Z</published>
    <updated>2019-03-11T12:11:01.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>讲个鬼故事~~</p><p>第一次xjb写了一个点分治  统计贡献甚至没有去掉同颗子树的情况  骗了75分……..然后对拍写挂了  生成数据从1到n 对拍找不到错 …真是太菜了</p><p>言归正传:</p><p>对于统计贡献 我们可以把重心的儿子的子树一个个合并 然后维护答案就行了</p><p>坑点就是….别把$K$当做$N$ 然后注意别用$memset$来清空  直接用数组记录修改的位置 然后$for$循环清空就行了</p><p>注意还有不存在的情况需要处理</p><p>复杂度 $O(nlogn)$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NM=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,K;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line">ll dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt[MAXN];</span><br><span class="line"><span class="keyword">int</span> base,key,rt;</span><br><span class="line"><span class="keyword">int</span> sz[MAXN],maxx[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre||vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">get_root(j-&gt;t,x);</span><br><span class="line">sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> st[MAXN],tot,ans,St[MAXN],tot1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[NM],Num[NM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dis[x]&lt;=K)st[++tot]=dis[x],num[dis[x]]=min(num[dis[x]],cnt[x]),St[++tot1]=dis[x];</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre||vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">dis[j-&gt;t]=dis[x]+j-&gt;v;cnt[j-&gt;t]=cnt[x]+<span class="number">1</span>;</span><br><span class="line">dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;tot1=<span class="number">0</span>;Num[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">tot=<span class="number">0</span>;dis[j-&gt;t]=j-&gt;v;cnt[j-&gt;t]=<span class="number">1</span>;dfs(j-&gt;t,x);</span><br><span class="line">inc(i,<span class="number">1</span>,tot)ans=min(ans,num[st[i]]+Num[K-st[i]]);</span><br><span class="line">inc(i,<span class="number">1</span>,tot)Num[st[i]]=min(Num[st[i]],num[st[i]]),num[st[i]]=inf;</span><br><span class="line">    &#125;</span><br><span class="line">    inc(i,<span class="number">1</span>,tot1)Num[St[i]]=inf;</span><br><span class="line">    Num[<span class="number">0</span>]=inf;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,<span class="number">0</span>);</span><br><span class="line">solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();K=read();</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    inc(i,<span class="number">1</span>,K)num[i]=Num[i]=inf;</span><br><span class="line">    inc(i,<span class="number">2</span>,n)x=read()+<span class="number">1</span>,y=read()+<span class="number">1</span>,z=read(),add(x,y,z),add(y,x,z);</span><br><span class="line">    ans=inf;key=inf;base=n;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    <span class="keyword">if</span>(ans==inf)<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给一棵树,每条边有权.求一条简单路径,权值和等于$K$,且边的数量最小.$N &lt;= 200000$,$ K &lt;= 1000000$</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行 两个整数 $n, k$<br>第$二…….N$行 每行三个整数 表示一条无向边的两端和权值 (注意点的编号从0开始)</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>一个整数 表示最小边数量 如果不存在这样的路径 输出$-1​$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;讲个鬼故事~~&lt;/p&gt;
&lt;p&gt;第一次xjb写了一个点分治  统计贡献甚至没有去掉同颗子树的情况  骗了75分……..然后对拍写挂了  生成数
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>bzoj2152(点分治)</title>
    <link href="http://yoursite.com/2019/03/11/bzoj2152-%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    <id>http://yoursite.com/2019/03/11/bzoj2152-点分治/</id>
    <published>2019-03-11T07:37:20.000Z</published>
    <updated>2019-03-11T07:50:48.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>点分治模板题</p><p>不同的是 我们不需要sort 也不需要去重</p><p>对于每个子树重心做一个树$dp$即可 $dp[x][y]$表示x的子树中到x距离模3后y的个数</p><p>然后对于每个子树重心 合并维护答案即可</p><p>$复杂度O(nlogn)$</p><a id="more"></a><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> base,key,pos,sz[MAXN],maxx[MAXN],rt;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">get_root(j-&gt;t,x);</span><br><span class="line">sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;maxx[x])key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t[MAXN][<span class="number">4</span>];</span><br><span class="line">ll dis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    t[x][<span class="number">0</span>]=t[x][<span class="number">1</span>]=t[x][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    t[x][dis[x]%<span class="number">3</span>]++;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">dis[j-&gt;t]=dis[x]+j-&gt;v;</span><br><span class="line">dfs(j-&gt;t,x);</span><br><span class="line">t[x][<span class="number">0</span>]+=t[j-&gt;t][<span class="number">0</span>];t[x][<span class="number">1</span>]+=t[j-&gt;t][<span class="number">1</span>];t[x][<span class="number">2</span>]+=t[j-&gt;t][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;dis[x]=<span class="number">0</span>;</span><br><span class="line">    dfs(x,<span class="number">0</span>);</span><br><span class="line">    t[x][<span class="number">0</span>]=t[x][<span class="number">1</span>]=t[x][<span class="number">2</span>]=<span class="number">0</span>;t[x][<span class="number">0</span>]++;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">ans+=<span class="number">1l</span>l*t[x][<span class="number">0</span>]*t[j-&gt;t][<span class="number">0</span>];</span><br><span class="line">ans+=<span class="number">1l</span>l*t[x][<span class="number">1</span>]*t[j-&gt;t][<span class="number">2</span>];</span><br><span class="line">ans+=<span class="number">1l</span>l*t[x][<span class="number">2</span>]*t[j-&gt;t][<span class="number">1</span>];</span><br><span class="line">t[x][<span class="number">0</span>]+=t[j-&gt;t][<span class="number">0</span>];t[x][<span class="number">1</span>]+=t[j-&gt;t][<span class="number">1</span>];t[x][<span class="number">2</span>]+=t[j-&gt;t][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j-&gt;t]||j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">key=inf;base=sz[j-&gt;t];get_root(j-&gt;t,x);</span><br><span class="line">solve(rt,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    inc(i,<span class="number">2</span>,n)x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z);</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    base=n;key=inf;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt,<span class="number">0</span>);</span><br><span class="line">    ll t1=<span class="number">2</span>*ans+n;ll t2=<span class="number">1l</span>l*n*n;</span><br><span class="line">    ll t=__gcd(t1,t2);t1/=t;t2/=t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>,t1,t2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>聪聪和可可是兄弟俩，他们俩经常为了一些琐事打起来，例如家中只剩下最后一根冰棍而两人都想吃、两个人都想玩儿电脑（可是他们家只有一台电脑）……遇到这种问题，一般情况下石头剪刀布就好了，可是他们已经玩儿腻了这种低智商的游戏。他们的爸爸快被他们的争吵烦死了，所以他发明了一个新游戏：由爸爸在纸上画$n$个“点”，并用$n-1$条“边”把这$n$个“点”恰好连通（其实这就是一棵树）。并且每条“边”上都有一个数。接下来由聪聪和可可分别随即选一个点（当然他们选点时是看不到这棵树的），如果两个点之间所有边上数的和加起来恰好是$3$的倍数，则判聪聪赢，否则可可赢。聪聪非常爱思考问题，在每次游戏后都会仔细研究这棵树，希望知道对于这张图自己的获胜概率是多少。现请你帮忙求出这个值以验证聪聪的答案是否正确。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入的第1行包含1个正整数$n$。后面$n-1$行，每行$3$个整数$x、y、w$，表示$x$号点和$y$号点之间有一条边，上面的数是$w$。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>以即约分数形式输出这个概率（即$“a/b”$的形式，其中$a$和$b$必须互质。如果概率为$1$，输出$“1/1”$）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;点分治模板题&lt;/p&gt;
&lt;p&gt;不同的是 我们不需要sort 也不需要去重&lt;/p&gt;
&lt;p&gt;对于每个子树重心做一个树$dp$即可 $dp[x][y]$表示x的子树中到x距离模3后y的个数&lt;/p&gt;
&lt;p&gt;然后对于每个子树重心 合并维护答案即可&lt;/p&gt;
&lt;p&gt;$复杂度O(nlogn)$&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>bzoj3365(点分治)</title>
    <link href="http://yoursite.com/2019/03/11/bzoj3365-%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    <id>http://yoursite.com/2019/03/11/bzoj3365-点分治/</id>
    <published>2019-03-11T06:51:53.000Z</published>
    <updated>2019-03-11T06:53:36.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>同上题</p><a id="more"></a><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,K;</span><br><span class="line"><span class="keyword">int</span> rt,base,sz[MAXN],maxx[MAXN],key;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre||vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">get_root(j-&gt;t,x);</span><br><span class="line">sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(maxx[x]&lt;key)key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll st[MAXN],dis[MAXN];<span class="keyword">int</span> tot,num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_deep</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    num[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(!pre)st[++tot]=dis[x];</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre||vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">dis[j-&gt;t]=dis[x]+j-&gt;v;st[++tot]=dis[j-&gt;t];</span><br><span class="line">get_deep(j-&gt;t,x);</span><br><span class="line">num[x]+=num[j-&gt;t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> x,ll dist)</span></span>&#123;</span><br><span class="line">    dis[x]=dist;tot=<span class="number">0</span>;get_deep(x,<span class="number">0</span>);</span><br><span class="line">    sort(st+<span class="number">1</span>,st+tot+<span class="number">1</span>);</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,tot)&#123;</span><br><span class="line"><span class="keyword">int</span> l=i+<span class="number">1</span>;<span class="keyword">int</span> r=tot;<span class="keyword">int</span> ans1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(st[i]+st[mid]&lt;=K)ans1=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ans1)<span class="keyword">continue</span>;</span><br><span class="line">sum+=ans1-i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;ans+=get_sum(x,<span class="number">0</span>);</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==y||vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">key=inf;base=num[j-&gt;t];get_root(j-&gt;t,x);ans-=get_sum(j-&gt;t,j-&gt;v);</span><br><span class="line">solve(rt,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    n=read();<span class="keyword">int</span> m=read();</span><br><span class="line">    inc(i,<span class="number">2</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d %d %d %c"</span>,&amp;x,&amp;y,&amp;z,&amp;ch),add(x,y,z),add(y,x,z);</span><br><span class="line">    K=read();</span><br><span class="line">    key=inf;base=n;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3365" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3365</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;同上题&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>bzoj1468(点分治)</title>
    <link href="http://yoursite.com/2019/03/11/bzoj1468-%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    <id>http://yoursite.com/2019/03/11/bzoj1468-点分治/</id>
    <published>2019-03-11T06:30:28.000Z</published>
    <updated>2019-03-11T06:43:47.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>点分治模板题  </p><p>第一次写点分治 那就把我的心酸证明历程也记录下吧</p><p>首先:前置知识点  树的重心(当$x$为根时,其子树节点的$size$的最大值最小)</p><p>然后每次以子树重心分治 保证分治层数不超过$logn$层</p><p>证明: 我们假如其$size_u&gt;size/2$那么 我们必然可以往其$size$较大的子树节点继续选择 那么这个点就不在是重心 </p><p>然后:考虑如何统计点对贡献 我们可以处理出当前子树节点到$rt$的距离 然后$sort$以后双指针/二分查询贡献 但是这样会把子树节点内的点对重复计数 所以每次需要去重一下 </p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,K;</span><br><span class="line"><span class="keyword">int</span> rt,base,sz[MAXN],maxx[MAXN],key;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;maxx[x]=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre||vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">get_root(j-&gt;t,x);</span><br><span class="line">sz[x]+=sz[j-&gt;t];maxx[x]=max(maxx[x],sz[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=max(maxx[x],base-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(maxx[x]&lt;key)key=maxx[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll st[MAXN],dis[MAXN];<span class="keyword">int</span> tot,num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_deep</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    num[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(!pre)st[++tot]=dis[x];</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre||vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">dis[j-&gt;t]=dis[x]+j-&gt;v;st[++tot]=dis[j-&gt;t];</span><br><span class="line">get_deep(j-&gt;t,x);</span><br><span class="line">num[x]+=num[j-&gt;t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> x,ll dist)</span></span>&#123;</span><br><span class="line">    dis[x]=dist;tot=<span class="number">0</span>;get_deep(x,<span class="number">0</span>);</span><br><span class="line">    sort(st+<span class="number">1</span>,st+tot+<span class="number">1</span>);</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,tot)&#123;</span><br><span class="line"><span class="keyword">int</span> l=i+<span class="number">1</span>;<span class="keyword">int</span> r=tot;<span class="keyword">int</span> ans1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(st[i]+st[mid]&lt;=K)ans1=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ans1)<span class="keyword">continue</span>;</span><br><span class="line">sum+=ans1-i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;ans+=get_sum(x,<span class="number">0</span>);</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==y||vis[j-&gt;t])<span class="keyword">continue</span>;</span><br><span class="line">key=inf;base=num[j-&gt;t];get_root(j-&gt;t,x);ans-=get_sum(j-&gt;t,j-&gt;v);</span><br><span class="line">solve(rt,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    n=read();</span><br><span class="line">    inc(i,<span class="number">2</span>,n)x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z);</span><br><span class="line">    K=read();</span><br><span class="line">    key=inf;base=n;get_root(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一棵$TREE$,以及这棵树上边的距离.问有多少对点它们两者间的距离小于等于$K$</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>$N(n&lt;=40000)$接下来$n-1$行边描述管道，按照题目中写的输入 接下来是$k$</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>一行，有多少对点之间的距离小于等于$k$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;点分治模板题  &lt;/p&gt;
&lt;p&gt;第一次写点分治 那就把我的心酸证明历程也记录下吧&lt;/p&gt;
&lt;p&gt;首先:前置知识点  树的重心(当$x$为根时
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="点分治" scheme="http://yoursite.com/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>bzoj2282树形dp</title>
    <link href="http://yoursite.com/2019/03/10/bzoj2282-%E6%A0%91%E5%BD%A2dp/"/>
    <id>http://yoursite.com/2019/03/10/bzoj2282-树形dp/</id>
    <published>2019-03-10T13:10:58.000Z</published>
    <updated>2019-03-11T06:57:01.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先路径的选择应该是直径的某一段区间…证明略(虽然我也是直观感受的)</p><p>然后我们考虑对直径上区间的选择 对于区间[l,r]的价值为$max(dis(直径左端点,l),max(dis(直径右端点,r),子区间上的价值))$ </p><p>当$l$保持不变,$r$增加时,区间价值单调不增加,所以我们应该对于每个左端点$l$,找到最大r满足条件 然后统计</p><p>然后对于子区间价值的维护 我们可以找到每个点到离其最近直径上点距离的最大值更新并维护直径上点的价值</p><p>然后因为我单调队列 写挂了  就直接用线段树查询区间最大值即可</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> st[MAXN],tot,p[MAXN],dis[MAXN],s;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;que;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)dis[i]=vis[i]=<span class="number">0</span>;</span><br><span class="line">    vis[x]=<span class="number">1</span>;que.push(x);</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">    <span class="keyword">int</span> y=que.front();que.pop();</span><br><span class="line">    link(y)<span class="keyword">if</span>(!vis[j-&gt;t])vis[j-&gt;t]=<span class="number">1</span>,dis[j-&gt;t]=dis[y]+j-&gt;v,que.push(j-&gt;t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pos=x;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)<span class="keyword">if</span>(dis[pos]&lt;dis[i])pos=i;</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> sum[MAXN],fa[MAXN],ans[MAXN],key[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    fa[x]=pre;</span><br><span class="line">    link(x)<span class="keyword">if</span>(j-&gt;t!=pre)sum[j-&gt;t]=sum[x]+j-&gt;v,key[j-&gt;t]=j-&gt;v,dfs(j-&gt;t,x);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> y)&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">if</span>(vis[x])k=x;<span class="keyword">else</span> k=y;</span><br><span class="line">    p[x]=k;</span><br><span class="line">    link(x)<span class="keyword">if</span>(j-&gt;t!=fa[x])_dfs(j-&gt;t,k);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> maxx[MAXN&lt;&lt;<span class="number">2</span>],R[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">built</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;maxx[x]=ans[st[l]];<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    built(x&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    built(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    maxx[x]=max(maxx[x&lt;&lt;<span class="number">1</span>],maxx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> Maxx;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;Maxx=max(Maxx,maxx[x]);<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)query(x&lt;&lt;<span class="number">1</span>,l,mid,ql,qr);</span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid)query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();s=read();</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    inc(i,<span class="number">2</span>,n)x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z);</span><br><span class="line">    x=bfs(<span class="number">1</span>);y=bfs(x);</span><br><span class="line">    dfs(x,<span class="number">0</span>);tot=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)vis[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k1=y;</span><br><span class="line">    <span class="keyword">while</span>(y)st[++tot]=y,vis[y]=<span class="number">1</span>,y=fa[y];</span><br><span class="line">    y=k1;</span><br><span class="line">    _dfs(x,x);</span><br><span class="line">    inc(i,<span class="number">1</span>,n)ans[p[i]]=max(ans[p[i]],sum[i]-sum[p[i]]);</span><br><span class="line">    built(<span class="number">1</span>,<span class="number">1</span>,tot);</span><br><span class="line">    inc(i,<span class="number">1</span>,tot)R[i]=R[i<span class="number">-1</span>]+key[st[i]];</span><br><span class="line">    <span class="keyword">int</span> ans2=inf;</span><br><span class="line">   <span class="comment">// cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl;</span></span><br><span class="line">    inc(i,<span class="number">1</span>,tot)&#123;</span><br><span class="line">    <span class="keyword">int</span> l=i;<span class="keyword">int</span> r=tot;<span class="keyword">int</span> ans1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(R[mid]-R[i<span class="number">-1</span>]&lt;=s)ans1=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ans1)ans1=i;<span class="keyword">else</span> ans1=min(tot,ans1+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//  cout&lt;&lt;i&lt;&lt;"::: "&lt;&lt;ans1&lt;&lt;endl;</span></span><br><span class="line">    Maxx=<span class="number">0</span>;query(<span class="number">1</span>,<span class="number">1</span>,tot,i,ans1);</span><br><span class="line">    ans2=min(ans2,max(Maxx,max(sum[y]-sum[st[i]],sum[st[ans1]]-sum[x])));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>某个国家有$n$个城市，这$n$个城市中任意两个都连通且有唯一一条路径，每条连通两个城市的道路的长度为$z_i(z_i&lt;=1000)$。</p><p>这个国家的人对火焰有超越宇宙的热情，所以这个国家最兴旺的行业是消防业。由于政府对国民的热情忍无可忍（大量的消防经费开销）可是却又无可奈何（总统竞选的国民支持率），所以只能想尽方法提高消防能力。</p><p>现在这个国家的经费足以在一条边长度和不超过$s$的路径（两端都是城市）上建立消防枢纽，为了尽量提高枢纽的利用率，要求其他所有城市到这条路径的距离的最大值最小。</p><p>你受命监管这个项目，你当然需要知道应该把枢纽建立在什么位置上。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入包含$n$行：<br>第$1$行，两个正整数$n$和$s$，中间用一个空格隔开。其中$n$为城市的个数,$s$为路径长度的上界。设结点编号以此为$1，2，……，n$。<br>从第$2$行到第$n$行，每行给出$3$个用空格隔开的正整数，依次表示每一条边的两个端点编号和长度。例如，$“2 4 7”$表示连接结点$2$与$4$的边的长度为$7$。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出包含一个非负整数，即所有城市到选择的路径的最大值，当然这个最大值必须是所有方案中最小的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;首先路径的选择应该是直径的某一段区间…证明略(虽然我也是直观感受的)&lt;/p&gt;
&lt;p&gt;然后我们考虑对直径上区间的选择 对于区间[l,r]的价值
      
    
    </summary>
    
      <category term="dp" scheme="http://yoursite.com/categories/dp/"/>
    
    
      <category term="树形dp" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
  </entry>
  
  <entry>
    <title>bzoj1509(树形dp)</title>
    <link href="http://yoursite.com/2019/03/10/bzoj1509-%E6%A0%91%E5%BD%A2dp/"/>
    <id>http://yoursite.com/2019/03/10/bzoj1509-树形dp/</id>
    <published>2019-03-10T06:20:46.000Z</published>
    <updated>2019-03-10T06:33:40.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>从一棵树里面找三个点$x,y,z$,从点$x$出发,先到另外两个点中离$x$较近的点,然后再到剩下那个点的路径和最大.首先对于直径两端点是必然选择,然后枚举起点,统计答案即可</p><a id="more"></a><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,long long&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">ll dis[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;que;</span><br><span class="line"><span class="function">pii <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)dis[i]=vis[i]=<span class="number">0</span>;</span><br><span class="line">    que.push(x);vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> y=que.front();que.pop();</span><br><span class="line">link(y)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!vis[j-&gt;t])vis[j-&gt;t]=<span class="number">1</span>,dis[j-&gt;t]=dis[y]+j-&gt;v,que.push(j-&gt;t);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pii pos=mp(x,<span class="number">0</span>);</span><br><span class="line">    inc(i,<span class="number">1</span>,n)<span class="keyword">if</span>(dis[pos.first]&lt;dis[i])pos=mp(i,dis[i]);</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    fa[x]=pre;</span><br><span class="line">    link(x)<span class="keyword">if</span>(j-&gt;t!=pre)dfs(j-&gt;t,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[MAXN];ll sum[MAXN];</span><br><span class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> y)&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">if</span>(vis[x])k=x;<span class="keyword">else</span> k=y;</span><br><span class="line">    p[x]=k;</span><br><span class="line">    link(x)<span class="keyword">if</span>(j-&gt;t!=fa[x])sum[j-&gt;t]=sum[x]+j-&gt;v,_dfs(j-&gt;t,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    inc(i,<span class="number">2</span>,n)x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z);</span><br><span class="line">    pii t1=bfs(<span class="number">1</span>);</span><br><span class="line">    pii t2=bfs(t1.first);</span><br><span class="line">    ll ans=t2.second;</span><br><span class="line">    dfs(t1.first,<span class="number">0</span>);x=t2.first;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)vis[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;vis[x]=<span class="number">1</span>;x=fa[x];&#125;</span><br><span class="line">    _dfs(t1.first,t1.first);</span><br><span class="line">    ll maxx=<span class="number">0</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)maxx=max(maxx,sum[i]-sum[p[i]]+min(sum[p[i]]-sum[t1.first],sum[t2.first]-sum[p[i]]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,maxx+ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1509" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=1509</a></p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行是两个整数$N(3&lt;=N&lt;=200000),M$,分别表示居住点总数和街道总数,以下$M$行，每行给出一条街道的信息。第$i+1$行包含整数$Ui、Vi、Ti（1&lt;=U_i, V_i &lt;= N，1 &lt;= T_i&lt;=1000000000)$，表示街道$i$连接居住点$U_i$和$V_i$，并且经过街道$i$需花费$T_i$分钟。街道信息不会重复给出。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>仅包含整数$T$，即最坏情况下Chris的父母需要花费$T$分钟才能找到Chris。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;从一棵树里面找三个点$x,y,z$,从点$x$出发,先到另外两个点中离$x$较近的点,然后再到剩下那个点的路径和最大.首先对于直径两端点是必然选择,然后枚举起点,统计答案即可&lt;/p&gt;
    
    </summary>
    
      <category term="dp" scheme="http://yoursite.com/categories/dp/"/>
    
    
      <category term="树形dp" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
  </entry>
  
  <entry>
    <title>bzoj1912(树形dp)</title>
    <link href="http://yoursite.com/2019/03/10/bzoj1912-%E6%A0%91%E5%BD%A2dp/"/>
    <id>http://yoursite.com/2019/03/10/bzoj1912-树形dp/</id>
    <published>2019-03-10T04:54:26.000Z</published>
    <updated>2019-03-10T05:03:38.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>$ k=1 $ 必然连接直径两端</li><li>我们考虑$ k=2 $的情况 首先明确选的两条路径 选直径是否还是最优的?当然,不管如何考虑选直径带来的优势要大于不选直径  然后对于第二条路的选择 如果第二条路和直径有交边 那么交边还是会经过两次 那么就是让 两条路径并起来的部分减去交的部分长度最长 我们可以考虑将选出来的直径的边权置$-1$ 然后再求一遍树的直径 这样子就必然能得到最优解</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> t)</span></span>&#123;o-&gt;t=y;o-&gt;v=t;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> dis[MAXN];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;que;</span><br><span class="line"><span class="function">pii <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)vis[i]=dis[i]=<span class="number">0</span>;</span><br><span class="line">    que.push(x);vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">    <span class="keyword">int</span> y=que.front();que.pop();</span><br><span class="line">    link(y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[j-&gt;t])vis[j-&gt;t]=<span class="number">1</span>,dis[j-&gt;t]=dis[y]+j-&gt;v,que.push(j-&gt;t);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pii pos=mp(x,<span class="number">0</span>);</span><br><span class="line">    inc(i,<span class="number">1</span>,n)<span class="keyword">if</span>(dis[pos.first]&lt;dis[i])pos=mp(i,dis[i]);</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> fa[MAXN];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    fa[x]=pre;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)&#123;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(j-&gt;t==pre)&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(vis[j-&gt;t])j-&gt;v=<span class="number">-1</span>,_dfs(j-&gt;t,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> dp[MAXN],dp1[MAXN];</span><br><span class="line"><span class="keyword">int</span> st[MAXN],tot;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> x&gt;y;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> __dfs(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)&#123;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    __dfs(j-&gt;t,x);</span><br><span class="line">    dp[x]=max(dp[x],dp[j-&gt;t]);</span><br><span class="line">    &#125;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">    st[++tot]=dp1[j-&gt;t]+j-&gt;v;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(st+<span class="number">1</span>,st+tot+<span class="number">1</span>,cmp);</span><br><span class="line"> <span class="comment">//   cout&lt;&lt;x&lt;&lt;"::: "&lt;&lt;tot&lt;&lt;" "&lt;&lt;st[1]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(tot==<span class="number">0</span>)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tot==<span class="number">1</span>)dp[x]=max(dp[x],st[<span class="number">1</span>]),dp1[x]=st[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">else</span> dp[x]=max(dp[x],max(st[<span class="number">1</span>]+st[<span class="number">2</span>],st[<span class="number">1</span>])),dp1[x]=st[<span class="number">1</span>];</span><br><span class="line"> <span class="comment">//   cout&lt;&lt;x&lt;&lt;"::: "&lt;&lt;dp[x]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();k=read();</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    inc(i,<span class="number">2</span>,n)x=read(),y=read(),add(x,y,<span class="number">1</span>),add(y,x,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">2</span>*(n<span class="number">-1</span>);</span><br><span class="line">    pii t1,t2;</span><br><span class="line">    t1=bfs(<span class="number">1</span>);t2=bfs(t1.first);</span><br><span class="line">    ans-=t2.second<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">2</span>)&#123;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)vis[i]=<span class="number">0</span>;</span><br><span class="line">    x=t2.first;y=t1.first;</span><br><span class="line">    dfs(y,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        vis[x]=<span class="number">1</span>;</span><br><span class="line">        x=fa[x];</span><br><span class="line">    &#125;</span><br><span class="line">    _dfs(y,<span class="number">0</span>);__dfs(y,<span class="number">0</span>);</span><br><span class="line">    ans-=dp[y]<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1912" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=1912</a></p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行包含两个整数$n$,$K(1 ≤ K ≤ 2)$.接下来$n – 1$行，每行两个整数 $a, b$,表示村庄$a$与$b$之间有一条道路$(1 ≤ a, b ≤ n)$。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出一个整数，表示新建了$K$条道路后能达到的最小巡逻距离。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;$ k=1 $ 必然连接直径两端&lt;/li&gt;
&lt;li&gt;我们考虑$ k=2 $的情况 首先明确选的两条路径 选直径是否还是最优的?当
      
    
    </summary>
    
      <category term="dp" scheme="http://yoursite.com/categories/dp/"/>
    
    
      <category term="树形dp" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
  </entry>
  
  <entry>
    <title>bzoj4987(树形dp)</title>
    <link href="http://yoursite.com/2019/03/09/bzoj4987-%E6%A0%91%E5%BD%A2dp/"/>
    <id>http://yoursite.com/2019/03/09/bzoj4987-树形dp/</id>
    <published>2019-03-09T06:24:44.000Z</published>
    <updated>2019-03-09T06:43:03.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先,$\sum_{i=1}^{k-1} dis(a_i,a_{i+1})​$ 最小化 那么对于这$k​$个点的选择可见必然是一个连通子树 可以反证 如何统计价值呢?我们考虑对于一棵树如何遍历每个点让路径和最小 显然是 $ 2sum-len​$ 即2倍路径和减去直径 这样子我们可以设$dp[i][j][0/1/2]​$ 表示在$i​$的子树中选了$j​$个点的联通子树 且直径的三种形态下的最小值 转移留给读者思考</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">2e9</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> t,v;edge*next;&#125;e[MAXN&lt;&lt;<span class="number">1</span>],*h[MAXN],*o=e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> vul)</span></span>&#123;o-&gt;t=y;o-&gt;v=vul;o-&gt;next=h[x];h[x]=o++;&#125;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,sz[MAXN];</span><br><span class="line">ll dp[MAXN][MAXN][<span class="number">3</span>];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>&amp;&amp;y==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;y==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;</span><br><span class="line">    link(x)&#123;</span><br><span class="line"><span class="keyword">if</span>(j-&gt;t==pre)<span class="keyword">continue</span>;</span><br><span class="line">dfs(j-&gt;t,x);</span><br><span class="line">dec(i,min(sz[x],m),<span class="number">1</span>)inc(k,<span class="number">0</span>,<span class="number">2</span>)<span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">1</span>;r+i&lt;=m&amp;&amp;r&lt;=sz[j-&gt;t];r++)inc(p,<span class="number">0</span>,<span class="number">2</span>-k)&#123;</span><br><span class="line">    dp[x][i+r][k+p]=min(dp[x][i+r][k+p],dp[j-&gt;t][r][p]+dp[x][i][k]+(j-&gt;v)*check(k,p));</span><br><span class="line">&#125;</span><br><span class="line">sz[x]+=sz[j-&gt;t];</span><br><span class="line">    &#125;</span><br><span class="line">    ans=min(ans,min(dp[x][m][<span class="number">1</span>],dp[x][m][<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    inc(i,<span class="number">2</span>,n)x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z);</span><br><span class="line">    inc(i,<span class="number">1</span>,n)inc(j,<span class="number">0</span>,m)dp[i][j][<span class="number">0</span>]=dp[i][j][<span class="number">1</span>]=dp[i][j][<span class="number">2</span>]=inf;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)dp[i][<span class="number">1</span>][<span class="number">1</span>]=dp[i][<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    ans=inf;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>从前有棵树。<br>找出$K$个点$A_1,A_2,…,A_k$。最小化$\sum_{i=1}^{k-1} dis(a_i,a_{i+1})$ </p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><p>第一行两个正整数$n$,$k$,表示数的顶点数和需要选出的点个数。</p><p>接下来$n-1$行每行3个非负整数$x$,$y$,$z$，表示从存在一条从$x$到$y$权值为$z$的边</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><p>一行一个整数，表示最小的距离和。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h2&gt;&lt;p&gt;首先,$\sum_{i=1}^{k-1} dis(a_i,a_{i+1})​$ 最小化 那么对于这$k​$个点的选择可见必然是一个连通子树 
      
    
    </summary>
    
      <category term="dp" scheme="http://yoursite.com/categories/dp/"/>
    
    
      <category term="树形dp" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
  </entry>
  
</feed>
